/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { IgcContextMenuItem, IgcContextMenuOrientation, IgcContextMenuPosition, IgcDropTargetPaneInfo, IgcPaneNavigatorMetadata, IgcTabHeadersPosition } from "./components/dockmanager/dockmanager.interfaces";
import { IgcActivePaneEventArgs, IgcContentPane, IgcDockingIndicatorPosition, IgcDockManagerLayout, IgcDockManagerPane, IgcDockManagerPoint, IgcDockManagerResourceStrings, IgcFloatingPaneResizeEventArgs, IgcFloatingPaneResizeMoveEventArgs, IgcPaneCloseEventArgs, IgcPaneDragEndEventArgs, IgcPaneDragOverEventArgs, IgcPaneDragStartEventArgs, IgcPaneHeaderConnectionEventArgs, IgcPanePinnedEventArgs, IgcPaneScrollEventArgs, IgcResizerLocation, IgcSplitPane, IgcSplitPaneOrientation, IgcSplitterResizeEventArgs, IgcTabGroupPane, IgcTabHeaderConnectionEventArgs, IgcUnpinnedLocation } from "./components/dockmanager/dockmanager.public-interfaces";
import { IgcDragEventArguments, IgcDragMoveEventArguments, IgcDragResizeEventArguments, IgcDragService, IgcDragStartEventArguments } from "./components/drag-drop/drag.service";
export { IgcContextMenuItem, IgcContextMenuOrientation, IgcContextMenuPosition, IgcDropTargetPaneInfo, IgcPaneNavigatorMetadata, IgcTabHeadersPosition } from "./components/dockmanager/dockmanager.interfaces";
export { IgcActivePaneEventArgs, IgcContentPane, IgcDockingIndicatorPosition, IgcDockManagerLayout, IgcDockManagerPane, IgcDockManagerPoint, IgcDockManagerResourceStrings, IgcFloatingPaneResizeEventArgs, IgcFloatingPaneResizeMoveEventArgs, IgcPaneCloseEventArgs, IgcPaneDragEndEventArgs, IgcPaneDragOverEventArgs, IgcPaneDragStartEventArgs, IgcPaneHeaderConnectionEventArgs, IgcPanePinnedEventArgs, IgcPaneScrollEventArgs, IgcResizerLocation, IgcSplitPane, IgcSplitPaneOrientation, IgcSplitterResizeEventArgs, IgcTabGroupPane, IgcTabHeaderConnectionEventArgs, IgcUnpinnedLocation } from "./components/dockmanager/dockmanager.public-interfaces";
export { IgcDragEventArguments, IgcDragMoveEventArguments, IgcDragResizeEventArguments, IgcDragService, IgcDragStartEventArguments } from "./components/drag-drop/drag.service";
export namespace Components {
    /**
     * @hidden 
     */
    interface IgcButtonComponent {
        "disabled": boolean;
        "name": string;
        "type": string;
        "value": string;
    }
    /**
     * @hidden 
     */
    interface IgcContentPaneComponent {
        "contentId": string;
        "disabled": boolean;
        "header": string;
        "isFlyout": boolean;
        "isSingleFloating": boolean;
        "size": number;
        "unpinnedSize": number;
    }
    /**
     * @hidden 
     */
    interface IgcContextMenuComponent {
        "activeIndex": number;
        "items": IgcContextMenuItem[];
        "orientation": IgcContextMenuOrientation;
        "position": IgcContextMenuPosition;
        "target": HTMLElement;
    }
    /**
     * @hidden 
     */
    interface IgcDockmanager {
        "activePane": IgcContentPane;
        "allowFloatingPanesResize": boolean;
        "allowInnerDock": boolean;
        "allowMaximize": boolean;
        "containedInBoundaries": boolean;
        "contextMenuPosition": IgcContextMenuPosition;
        "disableKeyboardNavigation": boolean;
        "draggedPane": IgcContentPane | IgcSplitPane | IgcTabGroupPane;
        "dropPane": () => Promise<boolean>;
        "dropPosition": IgcDockManagerPoint;
        "focusPane": (contentId: string) => Promise<void>;
        /**
          * The layout configuration of the Dock Manager.
         */
        "layout": IgcDockManagerLayout;
        "maximizedPane": IgcContentPane | IgcSplitPane | IgcTabGroupPane;
        "navigationPaneMeta": IgcPaneNavigatorMetadata;
        "proximityDock": boolean;
        "removePane": (pane: IgcDockManagerPane) => Promise<void>;
        "resourceStrings": IgcDockManagerResourceStrings;
        "showHeaderIconOnHover": 'closeOnly' | 'moreOptionsOnly' | 'all';
        "showPaneHeaders": 'onHoverOnly' | 'always';
    }
    /**
     * @hidden 
     */
    interface IgcDocumentHostComponent {
        "size": number;
    }
    /**
     * @hidden 
     */
    interface IgcFloatingPaneComponent {
        "allowResize": boolean;
        "floatingHeight": number;
        "floatingId": string;
        "floatingLocation": IgcDockManagerPoint;
        "floatingMinHeight": number;
        "floatingMinWidth": number;
        "floatingWidth": number;
        "hasHeader": boolean;
        "maximized": boolean;
    }
    /**
     * @hidden 
     */
    interface IgcIconComponent {
        "name": string;
    }
    /**
     * @hidden 
     */
    interface IgcJoystickIconComponent {
        "direction": string;
        "empty": boolean;
        "isDocHost": boolean;
        "position": IgcDockingIndicatorPosition;
    }
    /**
     * @hidden 
     */
    interface IgcJoystickIndicatorComponent {
        "allowCenterDock": boolean;
        "documentOnlyDrag": boolean;
        "dropTargetPaneInfo": IgcDropTargetPaneInfo;
    }
    /**
     * @hidden 
     */
    interface IgcPaneHeaderComponent {
        "allowClose": boolean;
        "allowMaximize": boolean;
        "allowPinning": boolean;
        "disabled": boolean;
        "dragService": IgcDragService;
        "forcedDrag": boolean;
        "isActive": boolean;
        "isFloating": boolean;
        "isFloatingPaneHeader": boolean;
        "maximized": boolean;
        "pane": IgcContentPane;
        "pinned": boolean;
        "resourceStrings": IgcDockManagerResourceStrings;
    }
    /**
     * @hidden 
     */
    interface IgcPaneNavigatorComponent {
        "activeDocuments": IgcContentPane[];
        "activePanes": IgcContentPane[];
        "previousActivePaneIndex": number;
        "resourceStrings": IgcDockManagerResourceStrings;
        "selectedIndex": number;
    }
    /**
     * @hidden 
     */
    interface IgcResizerComponent {
        "orientation": IgcResizerLocation;
    }
    /**
     * @hidden 
     */
    interface IgcRootDockingIndicatorComponent {
        "position": IgcDockingIndicatorPosition;
    }
    /**
     * @hidden 
     */
    interface IgcSplitPaneComponent {
        "orientation": IgcSplitPaneOrientation;
        "size": number;
    }
    /**
     * @hidden 
     */
    interface IgcSplitterComponent {
        "flyoutLocation": IgcUnpinnedLocation;
        "showDragGhost": boolean;
        "splitPaneOrientation": IgcSplitPaneOrientation;
    }
    /**
     * @hidden 
     */
    interface IgcTabHeaderComponent {
        "disabled": boolean;
        "dragService": IgcDragService;
        "forcedDrag": boolean;
        "header": string;
        "hovered": boolean;
        "iconName": string;
        "isActive": boolean;
        "position": IgcTabHeadersPosition;
        "resourceStrings": IgcDockManagerResourceStrings;
        "selected": boolean;
        "showHeaderIconOnHover": 'closeOnly' | 'moreOptionsOnly' | 'all';
    }
    /**
     * @hidden 
     */
    interface IgcTabPanelComponent {
        "disabled": boolean;
        "selected": boolean;
    }
    /**
     * @hidden 
     */
    interface IgcTabsComponent {
        "allowMaximize": boolean;
        "contentIds": string[];
        "hasHeaders": boolean;
        "maximized": boolean;
        "resourceStrings": IgcDockManagerResourceStrings;
        "selectedIndex": number;
        "showHiddenTabsMenu": boolean;
        "size": number;
        "tabHeadersPosition": IgcTabHeadersPosition;
    }
    /**
     * @hidden 
     */
    interface IgcUnpinnedPaneHeaderComponent {
        "disabled": boolean;
        "isActive": boolean;
        "location": IgcUnpinnedLocation;
    }
    /**
     * @hidden 
     */
    interface SampleComponent {
        "hiddenPanes": IgcContentPane[];
    }
}
export interface IgcContentPaneComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcContentPaneComponentElement;
}
export interface IgcContextMenuComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcContextMenuComponentElement;
}
export interface IgcDockmanagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcDockmanagerElement;
}
export interface IgcFloatingPaneComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcFloatingPaneComponentElement;
}
export interface IgcPaneHeaderComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcPaneHeaderComponentElement;
}
export interface IgcPaneNavigatorComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcPaneNavigatorComponentElement;
}
export interface IgcResizerComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcResizerComponentElement;
}
export interface IgcSplitPaneComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcSplitPaneComponentElement;
}
export interface IgcSplitterComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcSplitterComponentElement;
}
export interface IgcTabHeaderComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcTabHeaderComponentElement;
}
export interface IgcTabPanelComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcTabPanelComponentElement;
}
export interface IgcTabsComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIgcTabsComponentElement;
}
declare global {
    /**
     * @hidden 
     */
    interface HTMLIgcButtonComponentElement extends Components.IgcButtonComponent, HTMLStencilElement {
    }
    var HTMLIgcButtonComponentElement: {
        prototype: HTMLIgcButtonComponentElement;
        new (): HTMLIgcButtonComponentElement;
    };
    interface HTMLIgcContentPaneComponentElementEventMap {
        "rendered": HTMLIgcContentPaneComponentElement;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcContentPaneComponentElement extends Components.IgcContentPaneComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcContentPaneComponentElementEventMap>(type: K, listener: (this: HTMLIgcContentPaneComponentElement, ev: IgcContentPaneComponentCustomEvent<HTMLIgcContentPaneComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcContentPaneComponentElementEventMap>(type: K, listener: (this: HTMLIgcContentPaneComponentElement, ev: IgcContentPaneComponentCustomEvent<HTMLIgcContentPaneComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcContentPaneComponentElement: {
        prototype: HTMLIgcContentPaneComponentElement;
        new (): HTMLIgcContentPaneComponentElement;
    };
    interface HTMLIgcContextMenuComponentElementEventMap {
        "menuClosed": any;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcContextMenuComponentElement extends Components.IgcContextMenuComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcContextMenuComponentElementEventMap>(type: K, listener: (this: HTMLIgcContextMenuComponentElement, ev: IgcContextMenuComponentCustomEvent<HTMLIgcContextMenuComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcContextMenuComponentElementEventMap>(type: K, listener: (this: HTMLIgcContextMenuComponentElement, ev: IgcContextMenuComponentCustomEvent<HTMLIgcContextMenuComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcContextMenuComponentElement: {
        prototype: HTMLIgcContextMenuComponentElement;
        new (): HTMLIgcContextMenuComponentElement;
    };
    interface HTMLIgcDockmanagerElementEventMap {
        "paneHeaderConnected": IgcPaneHeaderConnectionEventArgs;
        "paneHeaderDisconnected": IgcPaneHeaderConnectionEventArgs;
        "tabHeaderConnected": IgcTabHeaderConnectionEventArgs;
        "tabHeaderDisconnected": IgcTabHeaderConnectionEventArgs;
        "splitterResizeStart": IgcSplitterResizeEventArgs;
        "splitterResizeEnd": IgcSplitterResizeEventArgs;
        "paneClose": IgcPaneCloseEventArgs;
        "paneScroll": IgcPaneScrollEventArgs;
        "panePinnedToggle": IgcPanePinnedEventArgs;
        "activePaneChanged": IgcActivePaneEventArgs;
        "paneDragStart": IgcPaneDragStartEventArgs;
        "paneDragOver": IgcPaneDragOverEventArgs;
        "paneDragEnd": IgcPaneDragEndEventArgs;
        "floatingPaneResizeMove": IgcFloatingPaneResizeMoveEventArgs;
        "floatingPaneResizeEnd": IgcFloatingPaneResizeEventArgs;
        "floatingPaneResizeStart": IgcFloatingPaneResizeEventArgs;
        "layoutChange": any;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcDockmanagerElement extends Components.IgcDockmanager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcDockmanagerElementEventMap>(type: K, listener: (this: HTMLIgcDockmanagerElement, ev: IgcDockmanagerCustomEvent<HTMLIgcDockmanagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcDockmanagerElementEventMap>(type: K, listener: (this: HTMLIgcDockmanagerElement, ev: IgcDockmanagerCustomEvent<HTMLIgcDockmanagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcDockmanagerElement: {
        prototype: HTMLIgcDockmanagerElement;
        new (): HTMLIgcDockmanagerElement;
    };
    /**
     * @hidden 
     */
    interface HTMLIgcDocumentHostComponentElement extends Components.IgcDocumentHostComponent, HTMLStencilElement {
    }
    var HTMLIgcDocumentHostComponentElement: {
        prototype: HTMLIgcDocumentHostComponentElement;
        new (): HTMLIgcDocumentHostComponentElement;
    };
    interface HTMLIgcFloatingPaneComponentElementEventMap {
        "wndResizeStart": IgcDragResizeEventArguments;
        "wndResizeMove": IgcDragResizeEventArguments;
        "wndResizeEnd": IgcDragResizeEventArguments;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcFloatingPaneComponentElement extends Components.IgcFloatingPaneComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcFloatingPaneComponentElementEventMap>(type: K, listener: (this: HTMLIgcFloatingPaneComponentElement, ev: IgcFloatingPaneComponentCustomEvent<HTMLIgcFloatingPaneComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcFloatingPaneComponentElementEventMap>(type: K, listener: (this: HTMLIgcFloatingPaneComponentElement, ev: IgcFloatingPaneComponentCustomEvent<HTMLIgcFloatingPaneComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcFloatingPaneComponentElement: {
        prototype: HTMLIgcFloatingPaneComponentElement;
        new (): HTMLIgcFloatingPaneComponentElement;
    };
    /**
     * @hidden 
     */
    interface HTMLIgcIconComponentElement extends Components.IgcIconComponent, HTMLStencilElement {
    }
    var HTMLIgcIconComponentElement: {
        prototype: HTMLIgcIconComponentElement;
        new (): HTMLIgcIconComponentElement;
    };
    /**
     * @hidden 
     */
    interface HTMLIgcJoystickIconComponentElement extends Components.IgcJoystickIconComponent, HTMLStencilElement {
    }
    var HTMLIgcJoystickIconComponentElement: {
        prototype: HTMLIgcJoystickIconComponentElement;
        new (): HTMLIgcJoystickIconComponentElement;
    };
    /**
     * @hidden 
     */
    interface HTMLIgcJoystickIndicatorComponentElement extends Components.IgcJoystickIndicatorComponent, HTMLStencilElement {
    }
    var HTMLIgcJoystickIndicatorComponentElement: {
        prototype: HTMLIgcJoystickIndicatorComponentElement;
        new (): HTMLIgcJoystickIndicatorComponentElement;
    };
    interface HTMLIgcPaneHeaderComponentElementEventMap {
        "pinToggle": any;
        "maximize": any;
        "close": any;
        "dragStarted": IgcDragStartEventArguments;
        "dragEnded": IgcDragEventArguments;
        "dragMoved": IgcDragMoveEventArguments;
        "elementConnected": HTMLIgcPaneHeaderComponentElement;
        "elementDisconnected": HTMLIgcPaneHeaderComponentElement;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcPaneHeaderComponentElement extends Components.IgcPaneHeaderComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcPaneHeaderComponentElementEventMap>(type: K, listener: (this: HTMLIgcPaneHeaderComponentElement, ev: IgcPaneHeaderComponentCustomEvent<HTMLIgcPaneHeaderComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcPaneHeaderComponentElementEventMap>(type: K, listener: (this: HTMLIgcPaneHeaderComponentElement, ev: IgcPaneHeaderComponentCustomEvent<HTMLIgcPaneHeaderComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcPaneHeaderComponentElement: {
        prototype: HTMLIgcPaneHeaderComponentElement;
        new (): HTMLIgcPaneHeaderComponentElement;
    };
    interface HTMLIgcPaneNavigatorComponentElementEventMap {
        "closed": IgcContentPane;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcPaneNavigatorComponentElement extends Components.IgcPaneNavigatorComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcPaneNavigatorComponentElementEventMap>(type: K, listener: (this: HTMLIgcPaneNavigatorComponentElement, ev: IgcPaneNavigatorComponentCustomEvent<HTMLIgcPaneNavigatorComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcPaneNavigatorComponentElementEventMap>(type: K, listener: (this: HTMLIgcPaneNavigatorComponentElement, ev: IgcPaneNavigatorComponentCustomEvent<HTMLIgcPaneNavigatorComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcPaneNavigatorComponentElement: {
        prototype: HTMLIgcPaneNavigatorComponentElement;
        new (): HTMLIgcPaneNavigatorComponentElement;
    };
    interface HTMLIgcResizerComponentElementEventMap {
        "resizerMoved": IgcDragMoveEventArguments;
        "resizerDragStart": IgcDragStartEventArguments;
        "resizerDragEnd": IgcDragEventArguments;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcResizerComponentElement extends Components.IgcResizerComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcResizerComponentElementEventMap>(type: K, listener: (this: HTMLIgcResizerComponentElement, ev: IgcResizerComponentCustomEvent<HTMLIgcResizerComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcResizerComponentElementEventMap>(type: K, listener: (this: HTMLIgcResizerComponentElement, ev: IgcResizerComponentCustomEvent<HTMLIgcResizerComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcResizerComponentElement: {
        prototype: HTMLIgcResizerComponentElement;
        new (): HTMLIgcResizerComponentElement;
    };
    /**
     * @hidden 
     */
    interface HTMLIgcRootDockingIndicatorComponentElement extends Components.IgcRootDockingIndicatorComponent, HTMLStencilElement {
    }
    var HTMLIgcRootDockingIndicatorComponentElement: {
        prototype: HTMLIgcRootDockingIndicatorComponentElement;
        new (): HTMLIgcRootDockingIndicatorComponentElement;
    };
    interface HTMLIgcSplitPaneComponentElementEventMap {
        "rendered": HTMLIgcSplitPaneComponentElement;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcSplitPaneComponentElement extends Components.IgcSplitPaneComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcSplitPaneComponentElementEventMap>(type: K, listener: (this: HTMLIgcSplitPaneComponentElement, ev: IgcSplitPaneComponentCustomEvent<HTMLIgcSplitPaneComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcSplitPaneComponentElementEventMap>(type: K, listener: (this: HTMLIgcSplitPaneComponentElement, ev: IgcSplitPaneComponentCustomEvent<HTMLIgcSplitPaneComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcSplitPaneComponentElement: {
        prototype: HTMLIgcSplitPaneComponentElement;
        new (): HTMLIgcSplitPaneComponentElement;
    };
    interface HTMLIgcSplitterComponentElementEventMap {
        "resizeStart": any;
        "resizeEnd": number;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcSplitterComponentElement extends Components.IgcSplitterComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcSplitterComponentElementEventMap>(type: K, listener: (this: HTMLIgcSplitterComponentElement, ev: IgcSplitterComponentCustomEvent<HTMLIgcSplitterComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcSplitterComponentElementEventMap>(type: K, listener: (this: HTMLIgcSplitterComponentElement, ev: IgcSplitterComponentCustomEvent<HTMLIgcSplitterComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcSplitterComponentElement: {
        prototype: HTMLIgcSplitterComponentElement;
        new (): HTMLIgcSplitterComponentElement;
    };
    interface HTMLIgcTabHeaderComponentElementEventMap {
        "dragStarted": IgcDragStartEventArguments;
        "dragMoved": IgcDragMoveEventArguments;
        "dragEnded": IgcDragEventArguments;
        "tabMouseDown": any;
        "iconClicked": any;
        "iconKeyDown": KeyboardEvent;
        "elementConnected": HTMLIgcTabHeaderComponentElement;
        "elementDisconnected": HTMLIgcTabHeaderComponentElement;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcTabHeaderComponentElement extends Components.IgcTabHeaderComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcTabHeaderComponentElementEventMap>(type: K, listener: (this: HTMLIgcTabHeaderComponentElement, ev: IgcTabHeaderComponentCustomEvent<HTMLIgcTabHeaderComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcTabHeaderComponentElementEventMap>(type: K, listener: (this: HTMLIgcTabHeaderComponentElement, ev: IgcTabHeaderComponentCustomEvent<HTMLIgcTabHeaderComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcTabHeaderComponentElement: {
        prototype: HTMLIgcTabHeaderComponentElement;
        new (): HTMLIgcTabHeaderComponentElement;
    };
    interface HTMLIgcTabPanelComponentElementEventMap {
        "selectedChanged": boolean;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcTabPanelComponentElement extends Components.IgcTabPanelComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcTabPanelComponentElementEventMap>(type: K, listener: (this: HTMLIgcTabPanelComponentElement, ev: IgcTabPanelComponentCustomEvent<HTMLIgcTabPanelComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcTabPanelComponentElementEventMap>(type: K, listener: (this: HTMLIgcTabPanelComponentElement, ev: IgcTabPanelComponentCustomEvent<HTMLIgcTabPanelComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcTabPanelComponentElement: {
        prototype: HTMLIgcTabPanelComponentElement;
        new (): HTMLIgcTabPanelComponentElement;
    };
    interface HTMLIgcTabsComponentElementEventMap {
        "maximize": any;
        "maximizeMinimizeFocus": any;
        "selectedIndexChanged": number;
        "hiddenTabSelected": number;
        "selectedTabOutOfView": number;
        "rendered": HTMLIgcTabsComponentElement;
    }
    /**
     * @hidden 
     */
    interface HTMLIgcTabsComponentElement extends Components.IgcTabsComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIgcTabsComponentElementEventMap>(type: K, listener: (this: HTMLIgcTabsComponentElement, ev: IgcTabsComponentCustomEvent<HTMLIgcTabsComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIgcTabsComponentElementEventMap>(type: K, listener: (this: HTMLIgcTabsComponentElement, ev: IgcTabsComponentCustomEvent<HTMLIgcTabsComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIgcTabsComponentElement: {
        prototype: HTMLIgcTabsComponentElement;
        new (): HTMLIgcTabsComponentElement;
    };
    /**
     * @hidden 
     */
    interface HTMLIgcUnpinnedPaneHeaderComponentElement extends Components.IgcUnpinnedPaneHeaderComponent, HTMLStencilElement {
    }
    var HTMLIgcUnpinnedPaneHeaderComponentElement: {
        prototype: HTMLIgcUnpinnedPaneHeaderComponentElement;
        new (): HTMLIgcUnpinnedPaneHeaderComponentElement;
    };
    /**
     * @hidden 
     */
    interface HTMLSampleComponentElement extends Components.SampleComponent, HTMLStencilElement {
    }
    var HTMLSampleComponentElement: {
        prototype: HTMLSampleComponentElement;
        new (): HTMLSampleComponentElement;
    };
    interface HTMLElementTagNameMap {
        "igc-button-component": HTMLIgcButtonComponentElement;
        "igc-content-pane-component": HTMLIgcContentPaneComponentElement;
        "igc-context-menu-component": HTMLIgcContextMenuComponentElement;
        "igc-dockmanager": HTMLIgcDockmanagerElement;
        "igc-document-host-component": HTMLIgcDocumentHostComponentElement;
        "igc-floating-pane-component": HTMLIgcFloatingPaneComponentElement;
        "igc-icon-component": HTMLIgcIconComponentElement;
        "igc-joystick-icon-component": HTMLIgcJoystickIconComponentElement;
        "igc-joystick-indicator-component": HTMLIgcJoystickIndicatorComponentElement;
        "igc-pane-header-component": HTMLIgcPaneHeaderComponentElement;
        "igc-pane-navigator-component": HTMLIgcPaneNavigatorComponentElement;
        "igc-resizer-component": HTMLIgcResizerComponentElement;
        "igc-root-docking-indicator-component": HTMLIgcRootDockingIndicatorComponentElement;
        "igc-split-pane-component": HTMLIgcSplitPaneComponentElement;
        "igc-splitter-component": HTMLIgcSplitterComponentElement;
        "igc-tab-header-component": HTMLIgcTabHeaderComponentElement;
        "igc-tab-panel-component": HTMLIgcTabPanelComponentElement;
        "igc-tabs-component": HTMLIgcTabsComponentElement;
        "igc-unpinned-pane-header-component": HTMLIgcUnpinnedPaneHeaderComponentElement;
        "sample-component": HTMLSampleComponentElement;
    }
}
declare namespace LocalJSX {
    /**
     * @hidden 
     */
    interface IgcButtonComponent {
        "disabled"?: boolean;
        "name"?: string;
        "type"?: string;
        "value"?: string;
    }
    /**
     * @hidden 
     */
    interface IgcContentPaneComponent {
        "contentId"?: string;
        "disabled"?: boolean;
        "header"?: string;
        "isFlyout"?: boolean;
        "isSingleFloating"?: boolean;
        "onRendered"?: (event: IgcContentPaneComponentCustomEvent<HTMLIgcContentPaneComponentElement>) => void;
        "size"?: number;
        "unpinnedSize"?: number;
    }
    /**
     * @hidden 
     */
    interface IgcContextMenuComponent {
        "activeIndex"?: number;
        "items"?: IgcContextMenuItem[];
        "onMenuClosed"?: (event: IgcContextMenuComponentCustomEvent<any>) => void;
        "orientation"?: IgcContextMenuOrientation;
        "position"?: IgcContextMenuPosition;
        "target"?: HTMLElement;
    }
    /**
     * @hidden 
     */
    interface IgcDockmanager {
        "activePane"?: IgcContentPane;
        "allowFloatingPanesResize"?: boolean;
        "allowInnerDock"?: boolean;
        "allowMaximize"?: boolean;
        "containedInBoundaries"?: boolean;
        "contextMenuPosition"?: IgcContextMenuPosition;
        "disableKeyboardNavigation"?: boolean;
        "draggedPane"?: IgcContentPane | IgcSplitPane | IgcTabGroupPane;
        "dropPosition"?: IgcDockManagerPoint;
        /**
          * The layout configuration of the Dock Manager.
         */
        "layout"?: IgcDockManagerLayout;
        "maximizedPane"?: IgcContentPane | IgcSplitPane | IgcTabGroupPane;
        "navigationPaneMeta"?: IgcPaneNavigatorMetadata;
        "onActivePaneChanged"?: (event: IgcDockmanagerCustomEvent<IgcActivePaneEventArgs>) => void;
        "onFloatingPaneResizeEnd"?: (event: IgcDockmanagerCustomEvent<IgcFloatingPaneResizeEventArgs>) => void;
        "onFloatingPaneResizeMove"?: (event: IgcDockmanagerCustomEvent<IgcFloatingPaneResizeMoveEventArgs>) => void;
        "onFloatingPaneResizeStart"?: (event: IgcDockmanagerCustomEvent<IgcFloatingPaneResizeEventArgs>) => void;
        "onLayoutChange"?: (event: IgcDockmanagerCustomEvent<any>) => void;
        "onPaneClose"?: (event: IgcDockmanagerCustomEvent<IgcPaneCloseEventArgs>) => void;
        "onPaneDragEnd"?: (event: IgcDockmanagerCustomEvent<IgcPaneDragEndEventArgs>) => void;
        "onPaneDragOver"?: (event: IgcDockmanagerCustomEvent<IgcPaneDragOverEventArgs>) => void;
        "onPaneDragStart"?: (event: IgcDockmanagerCustomEvent<IgcPaneDragStartEventArgs>) => void;
        "onPaneHeaderConnected"?: (event: IgcDockmanagerCustomEvent<IgcPaneHeaderConnectionEventArgs>) => void;
        "onPaneHeaderDisconnected"?: (event: IgcDockmanagerCustomEvent<IgcPaneHeaderConnectionEventArgs>) => void;
        "onPanePinnedToggle"?: (event: IgcDockmanagerCustomEvent<IgcPanePinnedEventArgs>) => void;
        "onPaneScroll"?: (event: IgcDockmanagerCustomEvent<IgcPaneScrollEventArgs>) => void;
        "onSplitterResizeEnd"?: (event: IgcDockmanagerCustomEvent<IgcSplitterResizeEventArgs>) => void;
        "onSplitterResizeStart"?: (event: IgcDockmanagerCustomEvent<IgcSplitterResizeEventArgs>) => void;
        "onTabHeaderConnected"?: (event: IgcDockmanagerCustomEvent<IgcTabHeaderConnectionEventArgs>) => void;
        "onTabHeaderDisconnected"?: (event: IgcDockmanagerCustomEvent<IgcTabHeaderConnectionEventArgs>) => void;
        "proximityDock"?: boolean;
        "resourceStrings"?: IgcDockManagerResourceStrings;
        "showHeaderIconOnHover"?: 'closeOnly' | 'moreOptionsOnly' | 'all';
        "showPaneHeaders"?: 'onHoverOnly' | 'always';
    }
    /**
     * @hidden 
     */
    interface IgcDocumentHostComponent {
        "size"?: number;
    }
    /**
     * @hidden 
     */
    interface IgcFloatingPaneComponent {
        "allowResize"?: boolean;
        "floatingHeight"?: number;
        "floatingId"?: string;
        "floatingLocation"?: IgcDockManagerPoint;
        "floatingMinHeight"?: number;
        "floatingMinWidth"?: number;
        "floatingWidth"?: number;
        "hasHeader"?: boolean;
        "maximized"?: boolean;
        "onWndResizeEnd"?: (event: IgcFloatingPaneComponentCustomEvent<IgcDragResizeEventArguments>) => void;
        "onWndResizeMove"?: (event: IgcFloatingPaneComponentCustomEvent<IgcDragResizeEventArguments>) => void;
        "onWndResizeStart"?: (event: IgcFloatingPaneComponentCustomEvent<IgcDragResizeEventArguments>) => void;
    }
    /**
     * @hidden 
     */
    interface IgcIconComponent {
        "name"?: string;
    }
    /**
     * @hidden 
     */
    interface IgcJoystickIconComponent {
        "direction"?: string;
        "empty"?: boolean;
        "isDocHost"?: boolean;
        "position"?: IgcDockingIndicatorPosition;
    }
    /**
     * @hidden 
     */
    interface IgcJoystickIndicatorComponent {
        "allowCenterDock"?: boolean;
        "documentOnlyDrag"?: boolean;
        "dropTargetPaneInfo"?: IgcDropTargetPaneInfo;
    }
    /**
     * @hidden 
     */
    interface IgcPaneHeaderComponent {
        "allowClose"?: boolean;
        "allowMaximize"?: boolean;
        "allowPinning"?: boolean;
        "disabled"?: boolean;
        "dragService"?: IgcDragService;
        "forcedDrag"?: boolean;
        "isActive"?: boolean;
        "isFloating"?: boolean;
        "isFloatingPaneHeader"?: boolean;
        "maximized"?: boolean;
        "onClose"?: (event: IgcPaneHeaderComponentCustomEvent<any>) => void;
        "onDragEnded"?: (event: IgcPaneHeaderComponentCustomEvent<IgcDragEventArguments>) => void;
        "onDragMoved"?: (event: IgcPaneHeaderComponentCustomEvent<IgcDragMoveEventArguments>) => void;
        "onDragStarted"?: (event: IgcPaneHeaderComponentCustomEvent<IgcDragStartEventArguments>) => void;
        "onElementConnected"?: (event: IgcPaneHeaderComponentCustomEvent<HTMLIgcPaneHeaderComponentElement>) => void;
        "onElementDisconnected"?: (event: IgcPaneHeaderComponentCustomEvent<HTMLIgcPaneHeaderComponentElement>) => void;
        "onMaximize"?: (event: IgcPaneHeaderComponentCustomEvent<any>) => void;
        "onPinToggle"?: (event: IgcPaneHeaderComponentCustomEvent<any>) => void;
        "pane"?: IgcContentPane;
        "pinned"?: boolean;
        "resourceStrings"?: IgcDockManagerResourceStrings;
    }
    /**
     * @hidden 
     */
    interface IgcPaneNavigatorComponent {
        "activeDocuments"?: IgcContentPane[];
        "activePanes"?: IgcContentPane[];
        "onClosed"?: (event: IgcPaneNavigatorComponentCustomEvent<IgcContentPane>) => void;
        "previousActivePaneIndex"?: number;
        "resourceStrings"?: IgcDockManagerResourceStrings;
        "selectedIndex"?: number;
    }
    /**
     * @hidden 
     */
    interface IgcResizerComponent {
        "onResizerDragEnd"?: (event: IgcResizerComponentCustomEvent<IgcDragEventArguments>) => void;
        "onResizerDragStart"?: (event: IgcResizerComponentCustomEvent<IgcDragStartEventArguments>) => void;
        "onResizerMoved"?: (event: IgcResizerComponentCustomEvent<IgcDragMoveEventArguments>) => void;
        "orientation"?: IgcResizerLocation;
    }
    /**
     * @hidden 
     */
    interface IgcRootDockingIndicatorComponent {
        "position"?: IgcDockingIndicatorPosition;
    }
    /**
     * @hidden 
     */
    interface IgcSplitPaneComponent {
        "onRendered"?: (event: IgcSplitPaneComponentCustomEvent<HTMLIgcSplitPaneComponentElement>) => void;
        "orientation"?: IgcSplitPaneOrientation;
        "size"?: number;
    }
    /**
     * @hidden 
     */
    interface IgcSplitterComponent {
        "flyoutLocation"?: IgcUnpinnedLocation;
        "onResizeEnd"?: (event: IgcSplitterComponentCustomEvent<number>) => void;
        "onResizeStart"?: (event: IgcSplitterComponentCustomEvent<any>) => void;
        "showDragGhost"?: boolean;
        "splitPaneOrientation"?: IgcSplitPaneOrientation;
    }
    /**
     * @hidden 
     */
    interface IgcTabHeaderComponent {
        "disabled"?: boolean;
        "dragService"?: IgcDragService;
        "forcedDrag"?: boolean;
        "header"?: string;
        "hovered"?: boolean;
        "iconName"?: string;
        "isActive"?: boolean;
        "onDragEnded"?: (event: IgcTabHeaderComponentCustomEvent<IgcDragEventArguments>) => void;
        "onDragMoved"?: (event: IgcTabHeaderComponentCustomEvent<IgcDragMoveEventArguments>) => void;
        "onDragStarted"?: (event: IgcTabHeaderComponentCustomEvent<IgcDragStartEventArguments>) => void;
        "onElementConnected"?: (event: IgcTabHeaderComponentCustomEvent<HTMLIgcTabHeaderComponentElement>) => void;
        "onElementDisconnected"?: (event: IgcTabHeaderComponentCustomEvent<HTMLIgcTabHeaderComponentElement>) => void;
        "onIconClicked"?: (event: IgcTabHeaderComponentCustomEvent<any>) => void;
        "onIconKeyDown"?: (event: IgcTabHeaderComponentCustomEvent<KeyboardEvent>) => void;
        "onTabMouseDown"?: (event: IgcTabHeaderComponentCustomEvent<any>) => void;
        "position"?: IgcTabHeadersPosition;
        "resourceStrings"?: IgcDockManagerResourceStrings;
        "selected"?: boolean;
        "showHeaderIconOnHover"?: 'closeOnly' | 'moreOptionsOnly' | 'all';
    }
    /**
     * @hidden 
     */
    interface IgcTabPanelComponent {
        "disabled"?: boolean;
        "onSelectedChanged"?: (event: IgcTabPanelComponentCustomEvent<boolean>) => void;
        "selected"?: boolean;
    }
    /**
     * @hidden 
     */
    interface IgcTabsComponent {
        "allowMaximize"?: boolean;
        "contentIds"?: string[];
        "hasHeaders"?: boolean;
        "maximized"?: boolean;
        "onHiddenTabSelected"?: (event: IgcTabsComponentCustomEvent<number>) => void;
        "onMaximize"?: (event: IgcTabsComponentCustomEvent<any>) => void;
        "onMaximizeMinimizeFocus"?: (event: IgcTabsComponentCustomEvent<any>) => void;
        "onRendered"?: (event: IgcTabsComponentCustomEvent<HTMLIgcTabsComponentElement>) => void;
        "onSelectedIndexChanged"?: (event: IgcTabsComponentCustomEvent<number>) => void;
        "onSelectedTabOutOfView"?: (event: IgcTabsComponentCustomEvent<number>) => void;
        "resourceStrings"?: IgcDockManagerResourceStrings;
        "selectedIndex"?: number;
        "showHiddenTabsMenu"?: boolean;
        "size"?: number;
        "tabHeadersPosition"?: IgcTabHeadersPosition;
    }
    /**
     * @hidden 
     */
    interface IgcUnpinnedPaneHeaderComponent {
        "disabled"?: boolean;
        "isActive"?: boolean;
        "location"?: IgcUnpinnedLocation;
    }
    /**
     * @hidden 
     */
    interface SampleComponent {
        "hiddenPanes"?: IgcContentPane[];
    }
    interface IntrinsicElements {
        "igc-button-component": IgcButtonComponent;
        "igc-content-pane-component": IgcContentPaneComponent;
        "igc-context-menu-component": IgcContextMenuComponent;
        "igc-dockmanager": IgcDockmanager;
        "igc-document-host-component": IgcDocumentHostComponent;
        "igc-floating-pane-component": IgcFloatingPaneComponent;
        "igc-icon-component": IgcIconComponent;
        "igc-joystick-icon-component": IgcJoystickIconComponent;
        "igc-joystick-indicator-component": IgcJoystickIndicatorComponent;
        "igc-pane-header-component": IgcPaneHeaderComponent;
        "igc-pane-navigator-component": IgcPaneNavigatorComponent;
        "igc-resizer-component": IgcResizerComponent;
        "igc-root-docking-indicator-component": IgcRootDockingIndicatorComponent;
        "igc-split-pane-component": IgcSplitPaneComponent;
        "igc-splitter-component": IgcSplitterComponent;
        "igc-tab-header-component": IgcTabHeaderComponent;
        "igc-tab-panel-component": IgcTabPanelComponent;
        "igc-tabs-component": IgcTabsComponent;
        "igc-unpinned-pane-header-component": IgcUnpinnedPaneHeaderComponent;
        "sample-component": SampleComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * @hidden 
             */
            "igc-button-component": LocalJSX.IgcButtonComponent & JSXBase.HTMLAttributes<HTMLIgcButtonComponentElement>;
            /**
             * @hidden 
             */
            "igc-content-pane-component": LocalJSX.IgcContentPaneComponent & JSXBase.HTMLAttributes<HTMLIgcContentPaneComponentElement>;
            /**
             * @hidden 
             */
            "igc-context-menu-component": LocalJSX.IgcContextMenuComponent & JSXBase.HTMLAttributes<HTMLIgcContextMenuComponentElement>;
            /**
             * @hidden 
             */
            "igc-dockmanager": LocalJSX.IgcDockmanager & JSXBase.HTMLAttributes<HTMLIgcDockmanagerElement>;
            /**
             * @hidden 
             */
            "igc-document-host-component": LocalJSX.IgcDocumentHostComponent & JSXBase.HTMLAttributes<HTMLIgcDocumentHostComponentElement>;
            /**
             * @hidden 
             */
            "igc-floating-pane-component": LocalJSX.IgcFloatingPaneComponent & JSXBase.HTMLAttributes<HTMLIgcFloatingPaneComponentElement>;
            /**
             * @hidden 
             */
            "igc-icon-component": LocalJSX.IgcIconComponent & JSXBase.HTMLAttributes<HTMLIgcIconComponentElement>;
            /**
             * @hidden 
             */
            "igc-joystick-icon-component": LocalJSX.IgcJoystickIconComponent & JSXBase.HTMLAttributes<HTMLIgcJoystickIconComponentElement>;
            /**
             * @hidden 
             */
            "igc-joystick-indicator-component": LocalJSX.IgcJoystickIndicatorComponent & JSXBase.HTMLAttributes<HTMLIgcJoystickIndicatorComponentElement>;
            /**
             * @hidden 
             */
            "igc-pane-header-component": LocalJSX.IgcPaneHeaderComponent & JSXBase.HTMLAttributes<HTMLIgcPaneHeaderComponentElement>;
            /**
             * @hidden 
             */
            "igc-pane-navigator-component": LocalJSX.IgcPaneNavigatorComponent & JSXBase.HTMLAttributes<HTMLIgcPaneNavigatorComponentElement>;
            /**
             * @hidden 
             */
            "igc-resizer-component": LocalJSX.IgcResizerComponent & JSXBase.HTMLAttributes<HTMLIgcResizerComponentElement>;
            /**
             * @hidden 
             */
            "igc-root-docking-indicator-component": LocalJSX.IgcRootDockingIndicatorComponent & JSXBase.HTMLAttributes<HTMLIgcRootDockingIndicatorComponentElement>;
            /**
             * @hidden 
             */
            "igc-split-pane-component": LocalJSX.IgcSplitPaneComponent & JSXBase.HTMLAttributes<HTMLIgcSplitPaneComponentElement>;
            /**
             * @hidden 
             */
            "igc-splitter-component": LocalJSX.IgcSplitterComponent & JSXBase.HTMLAttributes<HTMLIgcSplitterComponentElement>;
            /**
             * @hidden 
             */
            "igc-tab-header-component": LocalJSX.IgcTabHeaderComponent & JSXBase.HTMLAttributes<HTMLIgcTabHeaderComponentElement>;
            /**
             * @hidden 
             */
            "igc-tab-panel-component": LocalJSX.IgcTabPanelComponent & JSXBase.HTMLAttributes<HTMLIgcTabPanelComponentElement>;
            /**
             * @hidden 
             */
            "igc-tabs-component": LocalJSX.IgcTabsComponent & JSXBase.HTMLAttributes<HTMLIgcTabsComponentElement>;
            /**
             * @hidden 
             */
            "igc-unpinned-pane-header-component": LocalJSX.IgcUnpinnedPaneHeaderComponent & JSXBase.HTMLAttributes<HTMLIgcUnpinnedPaneHeaderComponentElement>;
            /**
             * @hidden 
             */
            "sample-component": LocalJSX.SampleComponent & JSXBase.HTMLAttributes<HTMLSampleComponentElement>;
        }
    }
}
