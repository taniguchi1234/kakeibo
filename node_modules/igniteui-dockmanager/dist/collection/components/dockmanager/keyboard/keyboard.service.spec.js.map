{"version":3,"file":"keyboard.service.spec.js","sourceRoot":"","sources":["../../../../src/components/dockmanager/keyboard/keyboard.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { IgcDockManagerComponentMock } from '../../../utils/test-utils';\r\nimport { Utils } from '../../../utils/utils';\r\nimport {\r\n  IgcContentPane, IgcDockManagerPaneType, IgcDockingIndicatorPosition, IgcDocumentHost, IgcSplitPane, IgcSplitPaneOrientation, IgcTabGroupPane\r\n} from '../dockmanager.public-interfaces';\r\nimport { IgcDockManagerService } from '../dockmanager.service';\r\n\r\nimport { IgcDockManagerKeyboardService } from './keyboard.service';\r\n\r\ndescribe('Keyboard Service', () => {\r\n  let dockManager: IgcDockManagerComponentMock;\r\n  let service: IgcDockManagerService;\r\n  let keyboardService: IgcDockManagerKeyboardService;\r\n\r\n  beforeAll(() => {\r\n    jest.spyOn(IgcDockManagerService.prototype, 'focusNextContentPane').mockImplementation(() => undefined);\r\n    jest.spyOn(IgcDockManagerService.prototype, 'focusPrevContentPane').mockImplementation(() => undefined);\r\n    jest.spyOn(IgcDockManagerService.prototype, 'dockPane').mockImplementation(() => undefined);\r\n    jest.spyOn(IgcDockManagerService.prototype, 'rootDockPane').mockImplementation(() => undefined);\r\n    jest.spyOn(IgcDockManagerService.prototype, 'closePane').mockImplementation(() => undefined);\r\n  });\r\n\r\n  afterAll(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  beforeEach(() => {\r\n    dockManager = new IgcDockManagerComponentMock();\r\n    service = dockManager.service;\r\n    keyboardService = dockManager.keyboardService;\r\n  });\r\n\r\n  describe('Focusing', () => {\r\n    describe('ALT', () => {\r\n      beforeAll(() => {\r\n        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => true);\r\n        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);\r\n      });\r\n\r\n      it('no navigation is performed when disableKeyboardNavigation is set to true', () => {\r\n        dockManager.disableKeyboardNavigation = true;\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6' });\r\n        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusNextSpy).not.toHaveBeenCalled();\r\n      });\r\n\r\n      it('ALT + F6 focuses next content pane', () => {\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6' });\r\n        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusNextSpy).toHaveBeenCalledWith(false);\r\n      });\r\n\r\n      it('ALT + ARROW RIGHT focuses next content pane', () => {\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowRight' });\r\n        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusNextSpy).toHaveBeenCalledWith(false);\r\n      });\r\n\r\n      it('ALT + SHIFT + F6 focuses previous content pane', () => {\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6', shiftKey: true });\r\n        const focusPrevSpy = jest.spyOn(service, 'focusPrevContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusPrevSpy).toHaveBeenCalledWith(false);\r\n      });\r\n\r\n      it('ALT + ARROW LEFT focuses previous content pane', () => {\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowLeft' });\r\n        const focusPrevSpy = jest.spyOn(service, 'focusPrevContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusPrevSpy).toHaveBeenCalledWith(false);\r\n      });\r\n    });\r\n\r\n    describe('CMD/CTRL', () => {\r\n      beforeAll(() => {\r\n        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => false);\r\n        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => true);\r\n      });\r\n\r\n      it('CMD/CTRL + F6 focuses next content pane in document host', () => {\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6' });\r\n        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusNextSpy).toHaveBeenCalledWith(true);\r\n      });\r\n\r\n      it('CMD/CTRL + ARROW RIGHT focuses next content pane in document host', () => {\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowRight' });\r\n        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusNextSpy).toHaveBeenCalledWith(true);\r\n      });\r\n\r\n      it('CMD/CTRL + SHIFT + F6 focuses previous content pane in document host', () => {\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6', shiftKey: true });\r\n        const focusPrevSpy = jest.spyOn(service, 'focusPrevContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusPrevSpy).toHaveBeenCalledWith(true);\r\n      });\r\n\r\n      it('CMD/CTRL + ARROW LEFT focuses previous content pane in document host', () => {\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowLeft' });\r\n        const focusPrevSpy = jest.spyOn(service, 'focusPrevContentPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusPrevSpy).toHaveBeenCalledWith(true);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Docking & Closing', () => {\r\n    let rootPane: IgcSplitPane;\r\n    let docHost: IgcDocumentHost;\r\n    let pane1: IgcContentPane;\r\n    let pane2: IgcContentPane;\r\n\r\n    beforeEach(() => {\r\n      pane1 = {\r\n        type: IgcDockManagerPaneType.contentPane,\r\n        contentId: '1',\r\n        header: 'Header'\r\n      };\r\n      pane2 = {\r\n        type: IgcDockManagerPaneType.contentPane,\r\n        contentId: '2',\r\n        header: 'Header'\r\n      };\r\n\r\n      docHost = {\r\n        type: IgcDockManagerPaneType.documentHost,\r\n        rootPane: {\r\n          type: IgcDockManagerPaneType.splitPane,\r\n          orientation: IgcSplitPaneOrientation.horizontal,\r\n          panes: [\r\n            {\r\n              type: IgcDockManagerPaneType.tabGroupPane,\r\n              panes: [pane1, pane2]\r\n            }\r\n          ]\r\n        }\r\n      };\r\n\r\n      rootPane = {\r\n        type: IgcDockManagerPaneType.splitPane,\r\n        orientation: IgcSplitPaneOrientation.horizontal,\r\n        panes: [\r\n          docHost\r\n        ]\r\n      };\r\n\r\n      dockManager.layout = {\r\n        rootPane\r\n      };\r\n    });\r\n\r\n    beforeAll(() => {\r\n      jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => false);\r\n      jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);\r\n    });\r\n\r\n    it('does not dock when there is no active pane', () => {\r\n      dockManager.activePane = null;\r\n\r\n      const dockPaneSpy = jest.spyOn(service, 'dockPane');\r\n      const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');\r\n      let keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });\r\n      keyboardService.handleKeydown(keyboardEvent);\r\n      expect(dockPaneSpy).not.toHaveBeenCalled();\r\n      expect(rootDockPaneSpy).not.toHaveBeenCalled();\r\n\r\n      jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => true);\r\n      keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });\r\n      keyboardService.handleKeydown(keyboardEvent);\r\n      expect(dockPaneSpy).not.toHaveBeenCalled();\r\n      expect(rootDockPaneSpy).not.toHaveBeenCalled();\r\n      jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);\r\n      expect(service.keyboardDockPane).toBeNull();\r\n    });\r\n\r\n    it('does not dock when there is only one tab in a tab group', () => {\r\n      dockManager.activePane = pane1;\r\n      (docHost.rootPane.panes[0] as IgcTabGroupPane).panes.splice(1, 1);\r\n\r\n      const dockPaneSpy = jest.spyOn(service, 'dockPane');\r\n      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });\r\n      keyboardService.handleKeydown(keyboardEvent);\r\n      expect(dockPaneSpy).not.toHaveBeenCalled();\r\n      expect(service.keyboardDockPane).toBeNull();\r\n    });\r\n\r\n    it('SHIFT + ARROW UP docks tab above', () => {\r\n      dockManager.activePane = pane1;\r\n\r\n      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });\r\n      const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n      const dockPaneSpy = jest.spyOn(service, 'dockPane');\r\n      keyboardService.handleKeydown(keyboardEvent);\r\n      expect(focusElementSpy).toHaveBeenCalled();\r\n      expect(dockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.top);\r\n      expect(service.keyboardDockPane).toEqual(pane1);\r\n    });\r\n\r\n    it('SHIFT + ARROW DOWN docks tab below', () => {\r\n      dockManager.activePane = pane1;\r\n\r\n      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowDown', shiftKey: true });\r\n      const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n      const dockPaneSpy = jest.spyOn(service, 'dockPane');\r\n      keyboardService.handleKeydown(keyboardEvent);\r\n      expect(focusElementSpy).toHaveBeenCalled();\r\n      expect(dockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.bottom);\r\n      expect(service.keyboardDockPane).toEqual(pane1);\r\n    });\r\n\r\n    it('SHIFT + ARROW LEFT docks tab left', () => {\r\n      dockManager.activePane = pane1;\r\n\r\n      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowLeft', shiftKey: true });\r\n      const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n      const dockPaneSpy = jest.spyOn(service, 'dockPane');\r\n      keyboardService.handleKeydown(keyboardEvent);\r\n      expect(focusElementSpy).toHaveBeenCalled();\r\n      expect(dockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.left);\r\n      expect(service.keyboardDockPane).toEqual(pane1);\r\n    });\r\n\r\n    it('SHIFT + ARROW RIGHT docks tab right', () => {\r\n      dockManager.activePane = pane1;\r\n\r\n      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowRight', shiftKey: true });\r\n      const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n      const dockPaneSpy = jest.spyOn(service, 'dockPane');\r\n      keyboardService.handleKeydown(keyboardEvent);\r\n      expect(focusElementSpy).toHaveBeenCalled();\r\n      expect(dockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.right);\r\n      expect(service.keyboardDockPane).toEqual(pane1);\r\n    });\r\n\r\n    describe('CMD/CTRL', () => {\r\n      beforeAll(() => {\r\n        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => false);\r\n        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => true);\r\n      });\r\n\r\n      it('CMD/CTRL + SHIFT + ARROW UP docks global top', () => {\r\n        dockManager.activePane = pane1;\r\n\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });\r\n        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n        const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusElementSpy).toHaveBeenCalled();\r\n        expect(rootDockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.top);\r\n        expect(service.keyboardDockPane).toEqual(pane1);\r\n      });\r\n\r\n      it('CMD/CTRL + SHIFT + ARROW DOWN docks global bottom', () => {\r\n        dockManager.activePane = pane1;\r\n\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowDown', shiftKey: true });\r\n        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n        const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusElementSpy).toHaveBeenCalled();\r\n        expect(rootDockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.bottom);\r\n        expect(service.keyboardDockPane).toEqual(pane1);\r\n      });\r\n\r\n      it('CMD/CTRL + SHIFT + ARROW LEFT docks global left', () => {\r\n        dockManager.activePane = pane1;\r\n\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowLeft', shiftKey: true });\r\n        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n        const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusElementSpy).toHaveBeenCalled();\r\n        expect(rootDockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.left);\r\n        expect(service.keyboardDockPane).toEqual(pane1);\r\n      });\r\n\r\n      it('CMD/CTRL + SHIFT + ARROW RIGHT docks global right', () => {\r\n        dockManager.activePane = pane1;\r\n\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowRight', shiftKey: true });\r\n        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n        const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusElementSpy).toHaveBeenCalled();\r\n        expect(rootDockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.right);\r\n        expect(service.keyboardDockPane).toEqual(pane1);\r\n      });\r\n    });\r\n\r\n    describe('ALT', () => {\r\n      beforeAll(() => {\r\n        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => true);\r\n        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);\r\n      });\r\n\r\n      it('ALT + F3 closes active pane', () => {\r\n        dockManager.activePane = pane1;\r\n\r\n        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F3' });\r\n        const closePaneSpy = jest.spyOn(service, 'closePane');\r\n        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');\r\n        keyboardService.handleKeydown(keyboardEvent);\r\n        expect(focusElementSpy).toHaveBeenCalled();\r\n        expect(closePaneSpy).toHaveBeenCalledWith(dockManager.activePane);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('PaneNavigator', () => {\r\n    let rootPane: IgcSplitPane;\r\n    let docHost: IgcDocumentHost;\r\n    const contentPanes: IgcContentPane[] = [];\r\n\r\n    beforeEach(() => {\r\n      for (let i = 0; i < 6; ++i) {\r\n        contentPanes.push({\r\n          type: IgcDockManagerPaneType.contentPane,\r\n          contentId: i.toString(),\r\n          header: `Header${i}`\r\n        });\r\n      }\r\n\r\n      docHost = {\r\n        type: IgcDockManagerPaneType.documentHost,\r\n        rootPane: {\r\n          type: IgcDockManagerPaneType.splitPane,\r\n          orientation: IgcSplitPaneOrientation.horizontal,\r\n          panes: [\r\n            {\r\n              type: IgcDockManagerPaneType.tabGroupPane,\r\n              panes: [contentPanes[0], contentPanes[1]]\r\n            }\r\n          ]\r\n        }\r\n      };\r\n\r\n      rootPane = {\r\n        type: IgcDockManagerPaneType.splitPane,\r\n        orientation: IgcSplitPaneOrientation.horizontal,\r\n        panes: [\r\n          docHost,\r\n          contentPanes[2],\r\n          contentPanes[3],\r\n          contentPanes[4]\r\n        ]\r\n      };\r\n\r\n      dockManager.layout = {\r\n        rootPane\r\n      };\r\n    });\r\n\r\n    describe('CMD/CTRL', () => {\r\n      beforeAll(() => {\r\n        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => false);\r\n        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => true);\r\n      });\r\n\r\n      it('CMD/CTRL + F7 Sets pane navigator metadata', () => {\r\n        const keyDownEvent = new KeyboardEvent('keydown', { key: 'F7' });\r\n        keyboardService.handleKeydown(keyDownEvent);\r\n\r\n        // Check the navigationPaneMeta props\r\n        checkNavigatorPaneItems(3);\r\n      });\r\n\r\n      it('CMD/CTRL + SHIFT + F7 Sets pane navigator metadata', () => {\r\n        const keyDownEvent = new KeyboardEvent('keydown', { key: 'F7', shiftKey: true });\r\n        keyboardService.handleKeydown(keyDownEvent);\r\n\r\n        // Check the navigationPaneMeta props\r\n        checkNavigatorPaneItems(4);\r\n      });\r\n    });\r\n\r\n    describe('ALT', () => {\r\n      beforeAll(() => {\r\n        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => true);\r\n        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);\r\n      });\r\n\r\n      it('ALT + F7 Sets pane navigator metadata', () => {\r\n        const keyDownEvent = new KeyboardEvent('keydown', { key: 'F7' });\r\n        keyboardService.handleKeydown(keyDownEvent);\r\n\r\n        // Check the navigationPaneMeta props\r\n        checkNavigatorPaneItems(0);\r\n      });\r\n\r\n      it('ALT + SHIFT + F7 Sets pane navigator metadata', () => {\r\n        const keyDownEvent = new KeyboardEvent('keydown', { key: 'F7', shiftKey: true });\r\n        keyboardService.handleKeydown(keyDownEvent);\r\n\r\n        // Check the navigationPaneMeta props\r\n        checkNavigatorPaneItems(2);\r\n      });\r\n    });\r\n\r\n    function checkNavigatorPaneItems(index: number) {\r\n      expect(dockManager.navigationPaneMeta.initialIndex).toEqual(index);\r\n      expect(dockManager.navigationPaneMeta.activeDocuments).toEqual([contentPanes[0], contentPanes[1]]);\r\n      expect(dockManager.navigationPaneMeta.activePanes).toEqual([contentPanes[2], contentPanes[3], contentPanes[4]]);\r\n    }\r\n  });\r\n});\r\n"]}