import { IgcDockManagerComponentMock } from "../../../utils/test-utils";
import { Utils } from "../../../utils/utils";
import { IgcDockManagerPaneType, IgcDockingIndicatorPosition, IgcSplitPaneOrientation } from "../dockmanager.public-interfaces";
import { IgcDockManagerService } from "../dockmanager.service";
describe('Keyboard Service', () => {
  let dockManager;
  let service;
  let keyboardService;
  beforeAll(() => {
    jest.spyOn(IgcDockManagerService.prototype, 'focusNextContentPane').mockImplementation(() => undefined);
    jest.spyOn(IgcDockManagerService.prototype, 'focusPrevContentPane').mockImplementation(() => undefined);
    jest.spyOn(IgcDockManagerService.prototype, 'dockPane').mockImplementation(() => undefined);
    jest.spyOn(IgcDockManagerService.prototype, 'rootDockPane').mockImplementation(() => undefined);
    jest.spyOn(IgcDockManagerService.prototype, 'closePane').mockImplementation(() => undefined);
  });
  afterAll(() => {
    jest.restoreAllMocks();
  });
  beforeEach(() => {
    dockManager = new IgcDockManagerComponentMock();
    service = dockManager.service;
    keyboardService = dockManager.keyboardService;
  });
  describe('Focusing', () => {
    describe('ALT', () => {
      beforeAll(() => {
        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => true);
        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);
      });
      it('no navigation is performed when disableKeyboardNavigation is set to true', () => {
        dockManager.disableKeyboardNavigation = true;
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6' });
        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusNextSpy).not.toHaveBeenCalled();
      });
      it('ALT + F6 focuses next content pane', () => {
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6' });
        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusNextSpy).toHaveBeenCalledWith(false);
      });
      it('ALT + ARROW RIGHT focuses next content pane', () => {
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowRight' });
        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusNextSpy).toHaveBeenCalledWith(false);
      });
      it('ALT + SHIFT + F6 focuses previous content pane', () => {
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6', shiftKey: true });
        const focusPrevSpy = jest.spyOn(service, 'focusPrevContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusPrevSpy).toHaveBeenCalledWith(false);
      });
      it('ALT + ARROW LEFT focuses previous content pane', () => {
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowLeft' });
        const focusPrevSpy = jest.spyOn(service, 'focusPrevContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusPrevSpy).toHaveBeenCalledWith(false);
      });
    });
    describe('CMD/CTRL', () => {
      beforeAll(() => {
        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => false);
        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => true);
      });
      it('CMD/CTRL + F6 focuses next content pane in document host', () => {
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6' });
        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusNextSpy).toHaveBeenCalledWith(true);
      });
      it('CMD/CTRL + ARROW RIGHT focuses next content pane in document host', () => {
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowRight' });
        const focusNextSpy = jest.spyOn(service, 'focusNextContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusNextSpy).toHaveBeenCalledWith(true);
      });
      it('CMD/CTRL + SHIFT + F6 focuses previous content pane in document host', () => {
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F6', shiftKey: true });
        const focusPrevSpy = jest.spyOn(service, 'focusPrevContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusPrevSpy).toHaveBeenCalledWith(true);
      });
      it('CMD/CTRL + ARROW LEFT focuses previous content pane in document host', () => {
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowLeft' });
        const focusPrevSpy = jest.spyOn(service, 'focusPrevContentPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusPrevSpy).toHaveBeenCalledWith(true);
      });
    });
  });
  describe('Docking & Closing', () => {
    let rootPane;
    let docHost;
    let pane1;
    let pane2;
    beforeEach(() => {
      pane1 = {
        type: IgcDockManagerPaneType.contentPane,
        contentId: '1',
        header: 'Header'
      };
      pane2 = {
        type: IgcDockManagerPaneType.contentPane,
        contentId: '2',
        header: 'Header'
      };
      docHost = {
        type: IgcDockManagerPaneType.documentHost,
        rootPane: {
          type: IgcDockManagerPaneType.splitPane,
          orientation: IgcSplitPaneOrientation.horizontal,
          panes: [
            {
              type: IgcDockManagerPaneType.tabGroupPane,
              panes: [pane1, pane2]
            }
          ]
        }
      };
      rootPane = {
        type: IgcDockManagerPaneType.splitPane,
        orientation: IgcSplitPaneOrientation.horizontal,
        panes: [
          docHost
        ]
      };
      dockManager.layout = {
        rootPane
      };
    });
    beforeAll(() => {
      jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => false);
      jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);
    });
    it('does not dock when there is no active pane', () => {
      dockManager.activePane = null;
      const dockPaneSpy = jest.spyOn(service, 'dockPane');
      const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');
      let keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });
      keyboardService.handleKeydown(keyboardEvent);
      expect(dockPaneSpy).not.toHaveBeenCalled();
      expect(rootDockPaneSpy).not.toHaveBeenCalled();
      jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => true);
      keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });
      keyboardService.handleKeydown(keyboardEvent);
      expect(dockPaneSpy).not.toHaveBeenCalled();
      expect(rootDockPaneSpy).not.toHaveBeenCalled();
      jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);
      expect(service.keyboardDockPane).toBeNull();
    });
    it('does not dock when there is only one tab in a tab group', () => {
      dockManager.activePane = pane1;
      docHost.rootPane.panes[0].panes.splice(1, 1);
      const dockPaneSpy = jest.spyOn(service, 'dockPane');
      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });
      keyboardService.handleKeydown(keyboardEvent);
      expect(dockPaneSpy).not.toHaveBeenCalled();
      expect(service.keyboardDockPane).toBeNull();
    });
    it('SHIFT + ARROW UP docks tab above', () => {
      dockManager.activePane = pane1;
      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });
      const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
      const dockPaneSpy = jest.spyOn(service, 'dockPane');
      keyboardService.handleKeydown(keyboardEvent);
      expect(focusElementSpy).toHaveBeenCalled();
      expect(dockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.top);
      expect(service.keyboardDockPane).toEqual(pane1);
    });
    it('SHIFT + ARROW DOWN docks tab below', () => {
      dockManager.activePane = pane1;
      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowDown', shiftKey: true });
      const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
      const dockPaneSpy = jest.spyOn(service, 'dockPane');
      keyboardService.handleKeydown(keyboardEvent);
      expect(focusElementSpy).toHaveBeenCalled();
      expect(dockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.bottom);
      expect(service.keyboardDockPane).toEqual(pane1);
    });
    it('SHIFT + ARROW LEFT docks tab left', () => {
      dockManager.activePane = pane1;
      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowLeft', shiftKey: true });
      const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
      const dockPaneSpy = jest.spyOn(service, 'dockPane');
      keyboardService.handleKeydown(keyboardEvent);
      expect(focusElementSpy).toHaveBeenCalled();
      expect(dockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.left);
      expect(service.keyboardDockPane).toEqual(pane1);
    });
    it('SHIFT + ARROW RIGHT docks tab right', () => {
      dockManager.activePane = pane1;
      const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowRight', shiftKey: true });
      const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
      const dockPaneSpy = jest.spyOn(service, 'dockPane');
      keyboardService.handleKeydown(keyboardEvent);
      expect(focusElementSpy).toHaveBeenCalled();
      expect(dockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.right);
      expect(service.keyboardDockPane).toEqual(pane1);
    });
    describe('CMD/CTRL', () => {
      beforeAll(() => {
        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => false);
        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => true);
      });
      it('CMD/CTRL + SHIFT + ARROW UP docks global top', () => {
        dockManager.activePane = pane1;
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowUp', shiftKey: true });
        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
        const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusElementSpy).toHaveBeenCalled();
        expect(rootDockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.top);
        expect(service.keyboardDockPane).toEqual(pane1);
      });
      it('CMD/CTRL + SHIFT + ARROW DOWN docks global bottom', () => {
        dockManager.activePane = pane1;
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowDown', shiftKey: true });
        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
        const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusElementSpy).toHaveBeenCalled();
        expect(rootDockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.bottom);
        expect(service.keyboardDockPane).toEqual(pane1);
      });
      it('CMD/CTRL + SHIFT + ARROW LEFT docks global left', () => {
        dockManager.activePane = pane1;
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowLeft', shiftKey: true });
        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
        const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusElementSpy).toHaveBeenCalled();
        expect(rootDockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.left);
        expect(service.keyboardDockPane).toEqual(pane1);
      });
      it('CMD/CTRL + SHIFT + ARROW RIGHT docks global right', () => {
        dockManager.activePane = pane1;
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'ArrowRight', shiftKey: true });
        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
        const rootDockPaneSpy = jest.spyOn(service, 'rootDockPane');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusElementSpy).toHaveBeenCalled();
        expect(rootDockPaneSpy).toHaveBeenCalledWith(IgcDockingIndicatorPosition.right);
        expect(service.keyboardDockPane).toEqual(pane1);
      });
    });
    describe('ALT', () => {
      beforeAll(() => {
        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => true);
        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);
      });
      it('ALT + F3 closes active pane', () => {
        dockManager.activePane = pane1;
        const keyboardEvent = new KeyboardEvent('keydown', { key: 'F3' });
        const closePaneSpy = jest.spyOn(service, 'closePane');
        const focusElementSpy = jest.spyOn(service.dockManager, 'focusElement');
        keyboardService.handleKeydown(keyboardEvent);
        expect(focusElementSpy).toHaveBeenCalled();
        expect(closePaneSpy).toHaveBeenCalledWith(dockManager.activePane);
      });
    });
  });
  describe('PaneNavigator', () => {
    let rootPane;
    let docHost;
    const contentPanes = [];
    beforeEach(() => {
      for (let i = 0; i < 6; ++i) {
        contentPanes.push({
          type: IgcDockManagerPaneType.contentPane,
          contentId: i.toString(),
          header: `Header${i}`
        });
      }
      docHost = {
        type: IgcDockManagerPaneType.documentHost,
        rootPane: {
          type: IgcDockManagerPaneType.splitPane,
          orientation: IgcSplitPaneOrientation.horizontal,
          panes: [
            {
              type: IgcDockManagerPaneType.tabGroupPane,
              panes: [contentPanes[0], contentPanes[1]]
            }
          ]
        }
      };
      rootPane = {
        type: IgcDockManagerPaneType.splitPane,
        orientation: IgcSplitPaneOrientation.horizontal,
        panes: [
          docHost,
          contentPanes[2],
          contentPanes[3],
          contentPanes[4]
        ]
      };
      dockManager.layout = {
        rootPane
      };
    });
    describe('CMD/CTRL', () => {
      beforeAll(() => {
        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => false);
        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => true);
      });
      it('CMD/CTRL + F7 Sets pane navigator metadata', () => {
        const keyDownEvent = new KeyboardEvent('keydown', { key: 'F7' });
        keyboardService.handleKeydown(keyDownEvent);
        // Check the navigationPaneMeta props
        checkNavigatorPaneItems(3);
      });
      it('CMD/CTRL + SHIFT + F7 Sets pane navigator metadata', () => {
        const keyDownEvent = new KeyboardEvent('keydown', { key: 'F7', shiftKey: true });
        keyboardService.handleKeydown(keyDownEvent);
        // Check the navigationPaneMeta props
        checkNavigatorPaneItems(4);
      });
    });
    describe('ALT', () => {
      beforeAll(() => {
        jest.spyOn(Utils, 'isAltPressed').mockImplementation(() => true);
        jest.spyOn(Utils, 'isControlOrMetaPressed').mockImplementation(() => false);
      });
      it('ALT + F7 Sets pane navigator metadata', () => {
        const keyDownEvent = new KeyboardEvent('keydown', { key: 'F7' });
        keyboardService.handleKeydown(keyDownEvent);
        // Check the navigationPaneMeta props
        checkNavigatorPaneItems(0);
      });
      it('ALT + SHIFT + F7 Sets pane navigator metadata', () => {
        const keyDownEvent = new KeyboardEvent('keydown', { key: 'F7', shiftKey: true });
        keyboardService.handleKeydown(keyDownEvent);
        // Check the navigationPaneMeta props
        checkNavigatorPaneItems(2);
      });
    });
    function checkNavigatorPaneItems(index) {
      expect(dockManager.navigationPaneMeta.initialIndex).toEqual(index);
      expect(dockManager.navigationPaneMeta.activeDocuments).toEqual([contentPanes[0], contentPanes[1]]);
      expect(dockManager.navigationPaneMeta.activePanes).toEqual([contentPanes[2], contentPanes[3], contentPanes[4]]);
    }
  });
});
//# sourceMappingURL=keyboard.service.spec.js.map
