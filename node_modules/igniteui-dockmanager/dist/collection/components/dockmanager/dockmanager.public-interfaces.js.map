{"version":3,"file":"dockmanager.public-interfaces.js","sourceRoot":"","sources":["../../../src/components/dockmanager/dockmanager.public-interfaces.ts"],"names":[],"mappings":"AAEA,MAAM,CAAN,IAAY,sBAKX;AALD,WAAY,sBAAsB;EAChC,iDAAuB,CAAA;EACvB,qDAA2B,CAAA;EAC3B,uDAA6B,CAAA;EAC7B,uDAA6B,CAAA;AAC/B,CAAC,EALW,sBAAsB,KAAtB,sBAAsB,QAKjC;AAED,MAAM,CAAN,IAAY,uBAGX;AAHD,WAAY,uBAAuB;EACjC,oDAAyB,CAAA;EACzB,gDAAqB,CAAA;AACvB,CAAC,EAHW,uBAAuB,KAAvB,uBAAuB,QAGlC;AAED,MAAM,CAAN,IAAY,mBAKX;AALD,WAAY,mBAAmB;EAC7B,kCAAW,CAAA;EACX,wCAAiB,CAAA;EACjB,oCAAa,CAAA;EACb,sCAAe,CAAA;AACjB,CAAC,EALW,mBAAmB,KAAnB,mBAAmB,QAK9B;AAkBD,MAAM,CAAN,IAAY,2BAUX;AAVD,WAAY,2BAA2B;EACrC,4CAAa,CAAA;EACb,sDAAuB,CAAA;EACvB,8CAAe,CAAA;EACf,wDAAyB,CAAA;EACzB,0CAAW,CAAA;EACX,oDAAqB,CAAA;EACrB,gDAAiB,CAAA;EACjB,0DAA2B,CAAA;EAC3B,gDAAiB,CAAA;AACnB,CAAC,EAVW,2BAA2B,KAA3B,2BAA2B,QAUtC;AA+FD,MAAM,CAAN,IAAY,qBAKX;AALD,WAAY,qBAAqB;EAC/B,gDAAuB,CAAA;EACvB,8DAAqC,CAAA;EACrC,8CAAqB,CAAA;EACrB,4CAAmB,CAAA;AACrB,CAAC,EALW,qBAAqB,KAArB,qBAAqB,QAKhC;AA4WD;;GAEG;AACH,mDAAmD;AACnD,6CAA6C;AAC7C,2CAA2C;AAC3C,8CAA8C;AAC9C,8CAA8C;AAC9C,kDAAkD;AAClD,kCAAkC;AAClC,MAAM,OAAO,uBAAwB,SAAQ,WAAW;EA4DtD;;;KAGG;EACH,QAAQ;IACN,OAAO,IAAI,CAAC;EACd,CAAC;EACD;;KAEG;EACH,UAAU,CAAC,IAAwB;IACjC,IAAI,GAAG,IAAI,CAAC;IACZ,OAAO,IAAI,CAAC;EACd,CAAC;EACD;;KAEG;EACH,SAAS,CAAC,SAAiB;IACzB,SAAS,GAAG,SAAS,CAAC;IACtB,OAAO,IAAI,CAAC;EACd,CAAC;EAID,gBAAgB,KAAW,CAAC;EAG5B,mBAAmB,KAAW,CAAC;CAChC;AAqCD,MAAM,CAAN,IAAY,kBASX;AATD,WAAY,kBAAkB;EAC5B,iCAAW,CAAA;EACX,uCAAiB,CAAA;EACjB,mCAAa,CAAA;EACb,qCAAe,CAAA;EACf,yCAAmB,CAAA;EACnB,2CAAqB,CAAA;EACrB,+CAAyB,CAAA;EACzB,iDAA2B,CAAA;AAC7B,CAAC,EATW,kBAAkB,KAAlB,kBAAkB,QAS7B","sourcesContent":["import { IgcDragService } from '../drag-drop/drag.service';\r\n\r\nexport enum IgcDockManagerPaneType {\r\n  splitPane = 'splitPane',\r\n  contentPane = 'contentPane',\r\n  tabGroupPane = 'tabGroupPane',\r\n  documentHost = 'documentHost'\r\n}\r\n\r\nexport enum IgcSplitPaneOrientation {\r\n  horizontal = 'horizontal',\r\n  vertical = 'vertical'\r\n}\r\n\r\nexport enum IgcUnpinnedLocation {\r\n  top = 'top',\r\n  bottom = 'bottom',\r\n  left = 'left',\r\n  right = 'right',\r\n}\r\n\r\nexport interface IgcDockManagerPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IgcActivePaneEventArgs {\r\n  /**\r\n   * Gets the new active pane.\r\n   */\r\n  readonly newPane: IgcContentPane;\r\n  /**\r\n   * Gets the old active pane.\r\n   */\r\n  readonly oldPane: IgcContentPane;\r\n}\r\n\r\nexport enum IgcDockingIndicatorPosition {\r\n  left = 'left',\r\n  outerLeft = 'outerLeft',\r\n  right = 'right',\r\n  outerRight = 'outerRight',\r\n  top = 'top',\r\n  outerTop = 'outerTop',\r\n  bottom = 'bottom',\r\n  outerBottom = 'outerBottom',\r\n  center = 'center'\r\n}\r\n\r\nexport interface IgcDockingIndicator {\r\n  /**\r\n   * Gets the position of the docking indicator.\r\n   */\r\n  readonly position: IgcDockingIndicatorPosition;\r\n  /**\r\n   * Gets a value indicating whether the docking indicator is a root one.\r\n   */\r\n  readonly isRoot: boolean;\r\n  /**\r\n   * Gets a value indicating the direction of the docking indicator.\r\n   */\r\n  readonly direction?: string;\r\n}\r\n\r\nexport interface IgcPaneHeaderConnectionEventArgs {\r\n  /**\r\n   * The pane whose header is being connected/disconnected.\r\n   */\r\n  readonly pane: IgcContentPane;\r\n  /**\r\n   * The header element that is being connected/disconnected.\r\n   */\r\n  readonly element: IgcPaneHeaderElement;\r\n}\r\n\r\nexport interface IgcTabHeaderConnectionEventArgs {\r\n  /**\r\n   * The pane whose tab header is being connected/disconnected.\r\n   */\r\n  readonly pane: IgcContentPane;\r\n  /**\r\n   * The tab header element that is being connected/disconnected.\r\n   */\r\n  readonly element: IgcTabHeaderElement;\r\n}\r\n\r\nexport interface IgcPaneCloseEventArgs {\r\n  /**\r\n   * Get the source pane that triggers the close.\r\n   */\r\n  readonly sourcePane: IgcDockManagerPane;\r\n  /**\r\n   * Gets/sets the panes that are about to close.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  panes: IgcContentPane[];\r\n}\r\n\r\nexport interface IgcPaneScrollEventArgs {\r\n  /**\r\n   * Gets the content pane that is scrolled.\r\n   */\r\n  readonly pane: IgcContentPane;\r\n  /**\r\n   * Gets the content element that is scrolled.\r\n   */\r\n  /* blazorSuppress */\r\n  readonly contentElement: HTMLElement;\r\n}\r\n\r\nexport interface IgcPanePinnedEventArgs {\r\n  /**\r\n   * Gets the source pane that triggers the pinned state change.\r\n   */\r\n  readonly sourcePane: IgcContentPane;\r\n  /**\r\n   * Gets/sets the panes that are about to get pinned/unpinned.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  panes: IgcContentPane[];\r\n  /**\r\n   * Gets the new pinned value.\r\n   */\r\n  readonly newValue: boolean;\r\n  /**\r\n   * Gets the unpinned location.\r\n   */\r\n  readonly location: IgcUnpinnedLocation;\r\n}\r\n\r\nexport interface IgcPaneDragStartEventArgs {\r\n  /**\r\n   * Gets the source pane that triggers the drag start.\r\n   */\r\n  readonly sourcePane: IgcSplitPane | IgcContentPane;\r\n  /**\r\n   * Gets the panes that are about to get dragged.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  readonly panes: IgcContentPane[];\r\n}\r\n\r\nexport enum IgcPaneDragActionType {\r\n  floatPane = 'floatPane',\r\n  moveFloatingPane = 'moveFloatingPane',\r\n  dockPane = 'dockPane',\r\n  moveTab = 'moveTab'\r\n}\r\n\r\nexport interface IgcFloatPaneAction {\r\n  /* alternateName: actionType */\r\n  readonly type: IgcPaneDragActionType.floatPane;\r\n  readonly location: IgcDockManagerPoint;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IgcMoveFloatingPaneAction {\r\n  /* alternateName: actionType */\r\n  readonly type: IgcPaneDragActionType.moveFloatingPane;\r\n  readonly oldLocation: IgcDockManagerPoint;\r\n  readonly newLocation: IgcDockManagerPoint;\r\n}\r\n\r\nexport interface IgcDockPaneAction {\r\n  /* alternateName: actionType */\r\n  readonly type: IgcPaneDragActionType.dockPane;\r\n  readonly dockingIndicator: IgcDockingIndicator;\r\n  readonly targetPane: IgcDockManagerPane;\r\n}\r\n\r\nexport interface IgcMoveTabAction {\r\n  /* alternateName: actionType */\r\n  readonly type: IgcPaneDragActionType.moveTab;\r\n  readonly oldIndex: number;\r\n  readonly newIndex: number;\r\n}\r\n\r\nexport type IgcPaneDragAction = IgcFloatPaneAction | IgcMoveFloatingPaneAction | IgcDockPaneAction | IgcMoveTabAction;\r\n\r\nexport interface IgcPaneDragOverEventArgs {\r\n  /**\r\n   * Gets the source pane that triggers the drag over.\r\n   */\r\n  readonly sourcePane: IgcSplitPane | IgcTabGroupPane | IgcContentPane;\r\n  /**\r\n   * Gets the panes that are dragged over.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  readonly panes: IgcContentPane[];\r\n  /**\r\n   * Gets information about the action being performed.\r\n   */\r\n  readonly action: IgcPaneDragAction;\r\n  /**\r\n   * Gets/sets whether the action is valid.\r\n   */\r\n  isValid: boolean;\r\n}\r\n\r\nexport interface IgcPaneDragEndEventArgs {\r\n  /**\r\n   * Gets the source pane that ends dragging.\r\n   */\r\n  readonly sourcePane: IgcSplitPane | IgcTabGroupPane | IgcContentPane;\r\n  /**\r\n   * Gets the panes that end dragging.\r\n   */\r\n  /* alternateType: ContentPaneCollection */\r\n  readonly panes: IgcContentPane[];\r\n}\r\n\r\n/* marshalByValue */\r\nexport interface IgcContentPane {\r\n  /**\r\n   * The id of the pane. If not set the Dock Manager generates it automatically.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The type of the pane.\r\n   */\r\n  /* alternateName: paneType */\r\n  type: IgcDockManagerPaneType.contentPane;\r\n  /**\r\n   * The slot attribute's value of the content element.\r\n   */\r\n  contentId: string;\r\n  /**\r\n   * The text header of the content pane. Even if header slot templates are used, the text header is used for aria label.\r\n   */\r\n  header: string;\r\n  /**\r\n   * The slot attribute's value of the content pane header element. If not set, the `header` property value is used.\r\n   */\r\n  headerId?: string;\r\n  /**\r\n   * The slot attribute's value of the tab header element. If not set, the `header` property value is used.\r\n   */\r\n  tabHeaderId?: string;\r\n  /**\r\n   * The slot attribute's value of the unpinned header element. If not set, the `header` property value is used.\r\n   */\r\n  unpinnedHeaderId?: string;\r\n  /**\r\n   * The slot attribute's value of the floating header element. If not set, the `headerId` property value is used.\r\n   */\r\n  floatingHeaderId?: string;\r\n  /**\r\n   * The size of the pane relative to its sibling panes' sizes. Defaults to 100.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * Determines whether the end user is allowed to close the pane. Defaults to true.\r\n   */\r\n  allowClose?: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to maximize the pane.\r\n   */\r\n  allowMaximize?: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to pin/unpin the pane. Defaults to true.\r\n   */\r\n  allowPinning?: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to dock the pane. Defaults to true.\r\n   */\r\n  allowDocking?: boolean;\r\n  /**\r\n   * Determines whether the end user can inner dock another pane in this one. Defaults to true.\r\n   */\r\n  acceptsInnerDock?: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to make the pane floating. Defaults to true.\r\n   */\r\n  allowFloating?: boolean;\r\n  /**\r\n   * The absolute size of the pane in an unpinned state. Defaults to 200.\r\n   */\r\n  unpinnedSize?: number;\r\n  /**\r\n   * Determines whether a content pane is pinned or not. Defaults to true.\r\n   */\r\n  isPinned?: boolean;\r\n  /**\r\n   * Determines whether a content pane is maximized or not. Defaults to false.\r\n   */\r\n  isMaximized?: boolean;\r\n  /**\r\n   * The desired unpinned location of the content pane.\r\n   *\r\n   * If not set the Dock Manager automatically calculates it based on the location of the pane relatively to the document host.\r\n   * If more than one document host is presented, the closest one in the pane hierarchy will be used for the calculation.\r\n   * If there is no document host, the default location is left.\r\n   */\r\n  unpinnedLocation?: IgcUnpinnedLocation;\r\n  /**\r\n   * Determines whether a pane is hidden in the UI. Defaults to false.\r\n   */\r\n  hidden?: boolean;\r\n  /**\r\n   * Determines whether a pane is disabled. Defaults to false.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Marks that a content pane can be docked only inside a document host.\r\n   */\r\n  documentOnly?: boolean;\r\n}\r\n\r\n/* marshalByValue */\r\nexport interface IgcSplitPane {\r\n  /**\r\n   * The id of the pane. If not set the Dock Manager generates it automatically.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The type of the pane.\r\n   */\r\n  /* alternateName: paneType */\r\n  type: IgcDockManagerPaneType.splitPane;\r\n  /**\r\n   * The orientation of the split pane.\r\n   */\r\n  orientation: IgcSplitPaneOrientation;\r\n  /**\r\n   * The child panes of the split pane.\r\n   */\r\n  /* blazorCollectionName: DockManagerPaneCollection */\r\n  /* blazorTreatAsCollection */\r\n  panes: IgcDockManagerPane[];\r\n  /**\r\n   * The size of the pane relative to its sibling panes' sizes. Defaults to 100.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * The absolute location point of the pane. Applies only for floating panes.\r\n   */\r\n  floatingLocation?: IgcDockManagerPoint;\r\n  /**\r\n   * The absolute width of the pane. Applies only for floating panes. Defaults to 100.\r\n   */\r\n  floatingWidth?: number;\r\n  /**\r\n   * The absolute height of the pane. Applies only for floating panes. Defaults to 100.\r\n   */\r\n  floatingHeight?: number;\r\n  /**\r\n   * Determines whether floating pane resizing is allowed. Applies only for floating panes.\r\n   */\r\n  floatingResizable?: boolean;\r\n  /**\r\n   * Determines whether the pane should present in the UI when empty.\r\n   */\r\n  allowEmpty?: boolean;\r\n  /**\r\n   * Determines whether a split pane is maximized or not. Defaults to false.\r\n   * @deprecated\r\n   * Having isMaximized set to true on a split pane level has no real effect as split panes serve as containers only, meaning they have no actual content to be shown maximized.\r\n   * Deprecated in 1.14.4 (pending removal in 1.15.0)\r\n   * The 'isMaximized' property of IgcTabGroupPane and/or IgcContentPane should be used instead.\r\n   */\r\n  isMaximized?: boolean;\r\n}\r\n\r\n/* marshalByValue */\r\nexport interface IgcTabGroupPane {\r\n  /**\r\n   * The id of the pane. If not set the Dock Manager generates it automatically.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The type of the pane.\r\n   */\r\n  /* alternateName: paneType */\r\n  type: IgcDockManagerPaneType.tabGroupPane;\r\n  /**\r\n   * The child content panes of the tab group.\r\n   */\r\n  /* blazorCollectionName: ContentPaneCollection */\r\n  /* blazorTreatAsCollection */\r\n  panes: IgcContentPane[];\r\n  /**\r\n   * The size of the pane relative to its sibling panes' sizes. Defaults to 100.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * The index of the selected tab.\r\n   */\r\n  selectedIndex?: number;\r\n  /**\r\n   * Determines whether the pane should present in the UI when empty.\r\n   */\r\n  allowEmpty?: boolean;\r\n  /**\r\n   *  Determines whether a tab group is maximized or not. Defaults to false.\r\n   */\r\n  isMaximized?: boolean;\r\n}\r\n\r\n/* marshalByValue */\r\nexport interface IgcDocumentHost {\r\n  /**\r\n   * The id of the pane. If not set the Dock Manager generates it automatically.\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The type of the pane.\r\n   */\r\n  /* alternateName: paneType */\r\n  type: IgcDockManagerPaneType.documentHost;\r\n  /**\r\n   * The root split pane of the document host.\r\n   */\r\n  rootPane: IgcSplitPane;\r\n  /**\r\n   * The size of the pane relative to its sibling panes' sizes. Defaults to 100.\r\n   */\r\n  size?: number;\r\n}\r\n\r\nexport type IgcDockManagerPane = IgcContentPane | IgcSplitPane | IgcTabGroupPane | IgcDocumentHost;\r\n\r\n/**\r\n * Describes a Dock Manager layout.\r\n */\r\n/* marshalByValue */\r\nexport interface IgcDockManagerLayout {\r\n  /**\r\n   * The root split pane of the layout.\r\n   */\r\n  rootPane: IgcSplitPane;\r\n  /**\r\n   * The floating panes of the layout.\r\n   */\r\n  /* blazorCollectionName: SplitPaneCollection */\r\n  /* blazorTreatAsCollection */\r\n  floatingPanes?: IgcSplitPane[];\r\n}\r\n\r\nexport interface IgcDockManagerEventMap extends HTMLElementEventMap {\r\n  /**\r\n   * An event raised when a splitter resizing starts.\r\n   */\r\n  'splitterResizeStart': CustomEvent;\r\n  /**\r\n   * An event raised when a splitter resizing ends.\r\n   */\r\n  'splitterResizeEnd': CustomEvent;\r\n  /**\r\n   * An event raised when a pane header element is connected.\r\n   */\r\n  'paneHeaderConnected': CustomEvent<IgcPaneHeaderConnectionEventArgs>;\r\n  /**\r\n   * An event raised when a pane header element is disconnected.\r\n   */\r\n  'paneHeaderDisconnected': CustomEvent<IgcPaneHeaderConnectionEventArgs>;\r\n  /**\r\n   * An event raised when a tab header element is connected.\r\n   */\r\n  'tabHeaderConnected': CustomEvent<IgcTabHeaderConnectionEventArgs>;\r\n  /**\r\n   * An event raised when a tab header element is disconnected.\r\n   */\r\n  'tabHeaderDisconnected': CustomEvent<IgcTabHeaderConnectionEventArgs>;\r\n  /**\r\n   * An event raised when panes are about to close.\r\n   */\r\n  'paneClose': CustomEvent<IgcPaneCloseEventArgs>;\r\n  /**\r\n   * An event raised when pane is scrolled.\r\n   */\r\n  'paneScroll': CustomEvent<IgcPaneScrollEventArgs>;\r\n  /**\r\n   * An event raised when panes are about to get pinned/unpinned.\r\n   */\r\n  'panePinnedToggle': CustomEvent<IgcPanePinnedEventArgs>;\r\n  /**\r\n   * An event raised when a pane drag starts.\r\n   */\r\n  'paneDragStart': CustomEvent<IgcPaneDragStartEventArgs>;\r\n  /**\r\n   * An event raised when a pane is dragged over.\r\n   */\r\n  'paneDragOver': CustomEvent<IgcPaneDragOverEventArgs>;\r\n  /**\r\n   * An event raised when a pane drag ends.\r\n   */\r\n  'paneDragEnd': CustomEvent<IgcPaneDragEndEventArgs>;\r\n\r\n  /**\r\n   * An event raised when a pane is selected/activated\r\n   */\r\n  'activePaneChanged': CustomEvent<IgcActivePaneEventArgs>;\r\n  /**\r\n   * An event raised when a floating pane resize operation ends.\r\n   */\r\n  'floatingPaneResizeEnd': CustomEvent<IgcFloatingPaneResizeEventArgs>;\r\n  /**\r\n   * An event raised when a floating pane resizing operation starts.\r\n   */\r\n  'floatingPaneResizeStart': CustomEvent<IgcFloatingPaneResizeEventArgs>;\r\n  /**\r\n   * An event raised when a floating pane resizing operation is in progress.\r\n   */\r\n  'floatingPaneResizeMove': CustomEvent<IgcFloatingPaneResizeMoveEventArgs>;\r\n  /**\r\n   * An event raised when the layout changes.\r\n   */\r\n  'layoutChange': CustomEvent;\r\n}\r\n\r\n/**\r\n * Describes a Dock Manager component.\r\n */\r\n/* blazorAdditionalDependency: DockManagerLayout */\r\n/* blazorAdditionalDependency: ContentPane */\r\n/* blazorAdditionalDependency: SplitPane */\r\n/* blazorAdditionalDependency: DocumentHost */\r\n/* blazorAdditionalDependency: TabGroupPane */\r\n/* blazorAdditionalDependency: TabHeaderElement */\r\n/* blazorSupportsVisualChildren */\r\nexport class IgcDockManagerComponent extends HTMLElement {\r\n  /* @tsTwoWayProperty (true, \"LayoutChange\", \"Detail\", false) */\r\n  /**\r\n   * Gets/sets the layout configuration of the Dock Manager.\r\n   */\r\n  layout: IgcDockManagerLayout;\r\n  /**\r\n   * Gets/sets the currently dragged pane.\r\n   */\r\n  draggedPane: IgcContentPane | IgcSplitPane | IgcTabGroupPane;\r\n  /**\r\n   * Gets/sets the current drop position when performing custom drag/drop.\r\n   */\r\n  dropPosition: IgcDockManagerPoint;\r\n  /**\r\n   * Gets/sets the active pane of the Dock Manager.\r\n   */\r\n  activePane: IgcContentPane;\r\n  /**\r\n   * Determines whether the end user is allowed to maximize panes. Defaults to true.\r\n   */\r\n  allowMaximize: boolean;\r\n  /**\r\n   * Determines whether the floating panes are kept inside the Dock Manager boundaries. Defaults to false.\r\n   */\r\n  containedInBoundaries: boolean;\r\n  /**\r\n   * Determines which tab header icons should show when hovering over the tab with the mouse. Defaults to undefined.\r\n   */\r\n  showHeaderIconOnHover: 'closeOnly' | 'moreOptionsOnly' | 'all';\r\n  /**\r\n   * Gets/sets the maximized pane.\r\n   */\r\n  maximizedPane: IgcContentPane | IgcSplitPane | IgcTabGroupPane;\r\n  /**\r\n   * Gets/sets the resource strings.\r\n   */\r\n  resourceStrings: IgcDockManagerResourceStrings;\r\n  /**\r\n   * Determines whether the end user is allowed to resize floating panes. Defaults to true.\r\n   */\r\n  allowFloatingPanesResize: boolean;\r\n  /**\r\n   * Disables the built-in keyboard shortcuts for pane navigation. Defaults to false.\r\n   */\r\n  disableKeyboardNavigation: boolean;\r\n  /**\r\n   * Determines whether the end user is allowed to inner dock panes. Defaults to true.\r\n   */\r\n  allowInnerDock?: boolean;\r\n  /**\r\n   * Determines whether pane headers are only shown on hover or always visible. Defaults to 'always'.\r\n   */\r\n  showPaneHeaders: 'onHoverOnly' | 'always';\r\n  /**\r\n   * Determines whether the end user can dock the dragged pane by dragging it close to the target pane edges.\r\n   * If enabled, docking indicators are not visible. Defaults to false.\r\n   */\r\n  proximityDock?: boolean;\r\n\r\n  /**\r\n   * Performs drop of the `draggedPane` into the specified `dropPosition`.\r\n   * Returns true if the pane has been docked otherwise returns false.\r\n   */\r\n  dropPane(): Promise<boolean> {\r\n    return null;\r\n  }\r\n  /**\r\n   * Removes a pane from the layout.\r\n   */\r\n  removePane(pane: IgcDockManagerPane): Promise<void> {\r\n    pane = pane;\r\n    return null;\r\n  }\r\n  /**\r\n   * Focuses a pane from the layout.\r\n   */\r\n  focusPane(contentId: string): Promise<void> {\r\n    contentId = contentId;\r\n    return null;\r\n  }\r\n\r\n  addEventListener<K extends keyof IgcDockManagerEventMap>(type: K, listener: (this: HTMLElement, ev: IgcDockManagerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n  addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\r\n  addEventListener(): void { }\r\n  removeEventListener<K extends keyof IgcDockManagerEventMap>(type: K, listener: (this: HTMLElement, ev: IgcDockManagerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n  removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\r\n  removeEventListener(): void { }\r\n}\r\n\r\n/**\r\n * Describes a pane header element.\r\n */\r\nexport interface IgcPaneHeaderElement extends HTMLElement {\r\n  /**\r\n   * Gets/sets the drag service.\r\n   */\r\n  dragService: IgcDragService;\r\n}\r\n\r\n/**\r\n * Describes a tab header element.\r\n */\r\nexport interface IgcTabHeaderElement extends HTMLElement {\r\n  /**\r\n   * Gets/sets the drag service.\r\n   */\r\n  dragService: IgcDragService;\r\n}\r\n\r\n/**\r\n * Describes dock manager resource strings.\r\n */\r\nexport interface IgcDockManagerResourceStrings {\r\n  close?: string;\r\n  pin?: string;\r\n  unpin?: string;\r\n  maximize?: string;\r\n  minimize?: string;\r\n  moreOptions?: string;\r\n  moreTabs?: string;\r\n  panes?: string;\r\n  documents?: string;\r\n}\r\n\r\nexport enum IgcResizerLocation {\r\n  top = 'top',\r\n  bottom = 'bottom',\r\n  left = 'left',\r\n  right = 'right',\r\n  topLeft = 'topLeft',\r\n  topRight = 'topRight',\r\n  bottomLeft = 'bottomLeft',\r\n  bottomRight = 'bottomRight'\r\n}\r\n\r\nexport interface IgcSplitterResizeEventArgs {\r\n  /**\r\n   * Gets the pane being resized with the splitter.\r\n   */\r\n  readonly pane: IgcDockManagerPane;\r\n  /**\r\n   * Gets the pane's orientation.\r\n   */\r\n  readonly orientation: IgcSplitPaneOrientation;\r\n  /**\r\n   * Gets the pane's width.\r\n   */\r\n  readonly paneWidth: number;\r\n  /**\r\n   * Gets the pane's height.\r\n   */\r\n  readonly paneHeight: number;\r\n}\r\n\r\nexport interface IgcFloatingPaneResizeEventArgs {\r\n  /**\r\n   * Gets the source pane that triggers the resize operation.\r\n   */\r\n  readonly sourcePane: IgcSplitPane;\r\n  /**\r\n   * Gets the edge/corner that is being dragged.\r\n   */\r\n  readonly resizerLocation: IgcResizerLocation;\r\n}\r\n\r\nexport interface IgcFloatingPaneResizeMoveEventArgs extends IgcFloatingPaneResizeEventArgs {\r\n  /**\r\n   * Gets the pane's width before the resizing operation.\r\n   */\r\n  readonly oldWidth: number;\r\n  /**\r\n   * Gets the pane's width after the resizing operation.\r\n   */\r\n  newWidth: number;\r\n  /**\r\n   * Gets the pane's height before the resizing operation.\r\n   */\r\n  readonly oldHeight: number;\r\n  /**\r\n   * Gets the pane's height after the resizing operation.\r\n   */\r\n  newHeight: number;\r\n  /**\r\n   * Gets the pane's floating location before the resizing operation.\r\n   */\r\n  readonly oldLocation: IgcDockManagerPoint;\r\n  /**\r\n   * Gets the pane's floating location after the resizing operation.\r\n   */\r\n  newLocation: IgcDockManagerPoint;\r\n}\r\n"]}