{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,uBAAuB,EAAE,MAAM,IAAI,CAAC;AAE3D,OAAO,EAAE,2BAA2B,EAAE,MAAM,yDAAyD,CAAC;AAEtG;;GAEG;AACH,MAAM,OAAO,KAAK;EAChB,MAAM,CAAC,0BAA0B,CAAC,QAAqC;IACrE,OAAO,QAAQ,KAAK,2BAA2B,CAAC,GAAG;MACjD,QAAQ,KAAK,2BAA2B,CAAC,MAAM;MAC/C,QAAQ,KAAK,2BAA2B,CAAC,QAAQ;MACjD,QAAQ,KAAK,2BAA2B,CAAC,WAAW,CAAC;EACzD,CAAC;EAED,MAAM,CAAC,wBAAwB,CAAC,QAAqC;IACnE,OAAO,QAAQ,KAAK,2BAA2B,CAAC,GAAG;MACjD,QAAQ,KAAK,2BAA2B,CAAC,IAAI;MAC7C,QAAQ,KAAK,2BAA2B,CAAC,QAAQ;MACjD,QAAQ,KAAK,2BAA2B,CAAC,SAAS,CAAC;EACvD,CAAC;EAED,MAAM,CAAC,2BAA2B,CAAC,QAAqC;IACtE,OAAO,QAAQ,KAAK,2BAA2B,CAAC,GAAG;MACjD,QAAQ,KAAK,2BAA2B,CAAC,KAAK;MAC9C,QAAQ,KAAK,2BAA2B,CAAC,QAAQ;MACjD,QAAQ,KAAK,2BAA2B,CAAC,UAAU,CAAC;EACxD,CAAC;EAED,MAAM,CAAC,uBAAuB,CAAC,QAAqC;IAClE,OAAO,QAAQ,KAAK,2BAA2B,CAAC,SAAS;MACvD,QAAQ,KAAK,2BAA2B,CAAC,UAAU;MACnD,QAAQ,KAAK,2BAA2B,CAAC,QAAQ;MACjD,QAAQ,KAAK,2BAA2B,CAAC,WAAW,CAAC;EACzD,CAAC;EAED,MAAM,CAAC,mBAAmB,CAAC,SAAuB;IAChD,OAAO,SAAS,CAAC,WAAW,KAAK,uBAAuB,CAAC,QAAQ,CAAC;EACpE,CAAC;EAED,MAAM,CAAC,YAAY,CAAC,KAAoB;IACtC,OAAO,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;EAC7F,CAAC;EAED,MAAM,CAAC,sBAAsB,CAAC,KAAoB;IAChD,OAAO,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;EAC1G,CAAC;EAED,MAAM,CAAC,WAAW,CAAC,YAA0B,EAAE,SAAS,GAAG,GAAG;IAC5D,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;EACpF,CAAC;EAED,MAAM,CAAC,YAAY,CAAC,OAAY;IAC9B,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAI,OAAO,CAAC,GAAG,KAAK,EAAE,EAAE;MACtB,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC;KACzB;SAAM;MACL,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC;MACnC,OAAO,MAAM,EAAE;QACb,IAAI,MAAM,CAAC,GAAG,KAAK,EAAE,EAAE;UACrB,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC;UACvB,MAAM;SACP;QACD,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC;OAC/B;KACF;IACD,OAAO,SAAS,CAAC;EACnB,CAAC;CACF","sourcesContent":["import { IgcSplitPane, IgcSplitPaneOrientation } from '..';\r\nimport { PartNameInfo } from '../components/dockmanager/dockmanager.interfaces';\r\nimport { IgcDockingIndicatorPosition } from '../components/dockmanager/dockmanager.public-interfaces';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class Utils {\r\n  static isDockingIndicatorVertical(position: IgcDockingIndicatorPosition): boolean {\r\n    return position === IgcDockingIndicatorPosition.top ||\r\n      position === IgcDockingIndicatorPosition.bottom ||\r\n      position === IgcDockingIndicatorPosition.outerTop ||\r\n      position === IgcDockingIndicatorPosition.outerBottom;\r\n  }\r\n\r\n  static isDockingIndicatorBefore(position: IgcDockingIndicatorPosition): boolean {\r\n    return position === IgcDockingIndicatorPosition.top ||\r\n      position === IgcDockingIndicatorPosition.left ||\r\n      position === IgcDockingIndicatorPosition.outerTop ||\r\n      position === IgcDockingIndicatorPosition.outerLeft;\r\n  }\r\n\r\n  static isDockingIndicatorBeforeRTL(position: IgcDockingIndicatorPosition): boolean {\r\n    return position === IgcDockingIndicatorPosition.top ||\r\n      position === IgcDockingIndicatorPosition.right ||\r\n      position === IgcDockingIndicatorPosition.outerTop ||\r\n      position === IgcDockingIndicatorPosition.outerRight;\r\n  }\r\n\r\n  static isDockingIndicatorOuter(position: IgcDockingIndicatorPosition): boolean {\r\n    return position === IgcDockingIndicatorPosition.outerLeft ||\r\n      position === IgcDockingIndicatorPosition.outerRight ||\r\n      position === IgcDockingIndicatorPosition.outerTop ||\r\n      position === IgcDockingIndicatorPosition.outerBottom;\r\n  }\r\n\r\n  static isSplitPaneVertical(splitPane: IgcSplitPane): boolean {\r\n    return splitPane.orientation === IgcSplitPaneOrientation.vertical;\r\n  }\r\n\r\n  static isAltPressed(event: KeyboardEvent): boolean {\r\n    return event.altKey || event.getModifierState('Alt') || event.getModifierState('AltGraph');\r\n  }\r\n\r\n  static isControlOrMetaPressed(event: KeyboardEvent): boolean {\r\n    return event.ctrlKey || event.metaKey || event.getModifierState('Meta') || event.getModifierState('OS');\r\n  }\r\n\r\n  static partNameMap(partNameInfo: PartNameInfo, delimiter = ' ') {\r\n    return Object.keys(partNameInfo).filter(key => partNameInfo[key]).join(delimiter);\r\n  }\r\n\r\n  static getDirection(element: any): string {\r\n    let direction = '';\r\n    if (element.dir !== '') {\r\n      direction = element.dir;\r\n    } else {\r\n      let parent = element.parentElement;\r\n      while (parent) {\r\n        if (parent.dir !== '') {\r\n          direction = parent.dir;\r\n          break;\r\n        }\r\n        parent = parent.parentElement;\r\n      }\r\n    }\r\n    return direction;\r\n  }\r\n}\r\n"]}