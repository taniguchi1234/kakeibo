{"version":3,"file":"test-utils.js","sourceRoot":"","sources":["../../src/utils/test-utils.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,qBAAqB,EAAE,MAAM,+CAA+C,CAAC;AACtF,OAAO,EAAE,6BAA6B,EAAE,MAAM,qDAAqD,CAAC;AAEpG;;GAEG;AACH,MAAM,gBAAgB;EAGpB,gBAAgB,CAAC,QAAyC;IACxD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC3B,CAAC;EAED,IAAI,CAAC,IAAO;IACV,MAAM,KAAK,GAAG,IAAI,WAAW,CAAI,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAE3D,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACtB;IAED,OAAO,KAAK,CAAC;EACf,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,2BAA2B;EAAxC;IAME,qBAAgB,GAAG,KAAK,CAAC;IACzB,gBAAW,GAAG,IAAI,CAAC;IACnB,kBAAa,GAAG,IAAI,CAAC;IACrB,0BAAqB,GAAG,KAAK,CAAC;IAC9B,8BAAyB,GAAG,KAAK,CAAC;IAIlC,QAAG,GAAG,EAAE,CAAC;IACT,cAAS,GAAG,IAAI,gBAAgB,EAAyB,CAAC;IAC1D,eAAU,GAAG,IAAI,gBAAgB,EAA0B,CAAC;IAC5D,qBAAgB,GAAG,IAAI,gBAAgB,EAA0B,CAAC;IAClE,kBAAa,GAAG,IAAI,gBAAgB,EAA6B,CAAC;IAClE,iBAAY,GAAG,IAAI,gBAAgB,EAA4B,CAAC;IAChE,gBAAW,GAAG,IAAI,gBAAgB,EAAE,CAAC;IACrC,4BAAuB,GAAG,IAAI,GAAG,EAAwB,CAAC;IAE1D,4BAAuB,GAAG,IAAI,gBAAgB,EAAkC,CAAC;IACjF,2BAAsB,GAAG,IAAI,gBAAgB,EAAsC,CAAC;IACpF,0BAAqB,GAAG,IAAI,gBAAgB,EAAkC,CAAC;IAC/E,iBAAY,GAAG,IAAI,gBAAgB,EAAE,CAAC;IAMtC,YAAO,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAC1C,oBAAe,GAAG,IAAI,6BAA6B,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;EAapE,CAAC;EAjBC,6BAA6B;EAC7B,YAAY;EACZ,CAAC;EAMD,IAAI,MAAM;IACR,OAAO,IAAI,CAAC,OAAO,CAAC;EACtB,CAAC;EAED,IAAI,MAAM,CAAC,KAA2B;IACpC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;IAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAChC,CAAC;CACF","sourcesContent":["import { EventEmitter } from '@stencil/core';\r\n\r\nimport { IgcDockManagerComponentBase, IgcDropTargetPaneInfo, IgcPaneNavigatorMetadata } from '../components/dockmanager/dockmanager.interfaces';\r\nimport { IgcContentPane, IgcDockManagerLayout, IgcDockManagerResourceStrings, IgcFloatingPaneResizeEventArgs, IgcFloatingPaneResizeMoveEventArgs, IgcPaneCloseEventArgs, IgcPaneDragOverEventArgs, IgcPaneDragStartEventArgs, IgcPanePinnedEventArgs, IgcPaneScrollEventArgs, IgcSplitPane, IgcTabGroupPane } from '../components/dockmanager/dockmanager.public-interfaces';\r\nimport { IgcDockManagerService } from '../components/dockmanager/dockmanager.service';\r\nimport { IgcDockManagerKeyboardService } from '../components/dockmanager/keyboard/keyboard.service';\r\n\r\n/**\r\n * @hidden\r\n */\r\nclass EventEmitterMock<T = any> implements EventEmitter {\r\n  private callback: (event: CustomEvent<T>) => void;\r\n\r\n  addEventListener(callback: (event: CustomEvent<T>) => void) {\r\n    this.callback = callback;\r\n  }\r\n\r\n  emit(data: T): CustomEvent<T> {\r\n    const event = new CustomEvent<T>('mock', { detail: data });\r\n\r\n    if (this.callback) {\r\n      this.callback(event);\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class IgcDockManagerComponentMock implements IgcDockManagerComponentBase {\r\n  proximityDock: boolean;\r\n  activePane: IgcContentPane;\r\n  draggedPane: IgcContentPane | IgcSplitPane | IgcTabGroupPane;\r\n  dropTargetPaneInfo: IgcDropTargetPaneInfo;\r\n  dropShadowRect: DOMRect;\r\n  documentOnlyDrag = false;\r\n  isValidDrop = true;\r\n  allowMaximize = true;\r\n  containedInBoundaries = false;\r\n  disableKeyboardNavigation = false;\r\n  flyoutPane: IgcContentPane;\r\n  maximizedPane: IgcContentPane | IgcSplitPane | IgcTabGroupPane;\r\n  navigationPaneMeta: IgcPaneNavigatorMetadata;\r\n  dir = '';\r\n  paneClose = new EventEmitterMock<IgcPaneCloseEventArgs>();\r\n  paneScroll = new EventEmitterMock<IgcPaneScrollEventArgs>();\r\n  panePinnedToggle = new EventEmitterMock<IgcPanePinnedEventArgs>();\r\n  paneDragStart = new EventEmitterMock<IgcPaneDragStartEventArgs>();\r\n  paneDragOver = new EventEmitterMock<IgcPaneDragOverEventArgs>();\r\n  paneDragEnd = new EventEmitterMock();\r\n  floatingPaneZIndicesMap = new Map<IgcSplitPane, number>();\r\n  resourceStrings: IgcDockManagerResourceStrings;\r\n  floatingPaneResizeStart = new EventEmitterMock<IgcFloatingPaneResizeEventArgs>();\r\n  floatingPaneResizeMove = new EventEmitterMock<IgcFloatingPaneResizeMoveEventArgs>();\r\n  floatingPaneResizeEnd = new EventEmitterMock<IgcFloatingPaneResizeEventArgs>();\r\n  layoutChange = new EventEmitterMock();\r\n  direction: string;\r\n  allowInnerDock: boolean;\r\n  /* tslint:disable:no-empty */\r\n  focusElement() {\r\n  }\r\n  service = new IgcDockManagerService(this);\r\n  keyboardService = new IgcDockManagerKeyboardService(this.service);\r\n\r\n  private _layout: IgcDockManagerLayout;\r\n\r\n  get layout(): IgcDockManagerLayout {\r\n    return this._layout;\r\n  }\r\n\r\n  set layout(value: IgcDockManagerLayout) {\r\n    this._layout = value;\r\n    this.service.processLayout();\r\n    this.layoutChange.emit(value);\r\n  }\r\n}\r\n"]}