import { LitElement } from 'lit';
import type { Constructor } from '../common/mixins/constructor.js';
export interface CheckboxChangeEventArgs {
    checked: boolean;
    value?: string;
}
export interface IgcCheckboxEventMap {
    igcChange: CustomEvent<CheckboxChangeEventArgs>;
    focus: FocusEvent;
    blur: FocusEvent;
}
declare const IgcCheckboxBaseComponent_base: Constructor<import("../common/mixins/forms/types.js").FormRequiredInterface & import("../common/mixins/forms/types.js").FormAssociatedCheckboxElementInterface> & Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcCheckboxEventMap>> & Constructor<LitElement>;
export declare class IgcCheckboxBaseComponent extends IgcCheckboxBaseComponent_base {
    protected get __validators(): import("../common/validators.js").Validator<IgcCheckboxBaseComponent>[];
    protected _kbFocus: import("../common/controllers/focus-ring.js").KeyboardFocusRingController;
    protected _value: string;
    protected _checked: boolean;
    protected input: HTMLInputElement;
    protected label: Array<Node>;
    protected hideLabel: boolean;
    /**
     * The value attribute of the control.
     * @attr
     */
    set value(value: string);
    get value(): string;
    /**
     * The checked state of the control.
     * @attr
     */
    set checked(value: boolean);
    get checked(): boolean;
    /**
     * The label position of the control.
     * @attr label-position
     */
    labelPosition: 'before' | 'after';
    protected createRenderRoot(): DocumentFragment | HTMLElement;
    /** Simulates a click on the control. */
    click(): void;
    /** Sets focus on the control. */
    focus(options?: FocusOptions): void;
    /** Removes focus from the control. */
    blur(): void;
    protected handleClick(): void;
    protected handleBlur(): void;
    protected handleFocus(): void;
}
export {};
