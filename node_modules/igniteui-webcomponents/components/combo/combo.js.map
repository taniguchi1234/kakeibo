{"version":3,"file":"combo.js","sourceRoot":"","sources":["../../../src/components/combo/combo.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, type TemplateResult, html } from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  state,\n} from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\n\nimport { themes } from '../../theming/theming-decorator.js';\nimport { addRootClickHandler } from '../common/controllers/root-click.js';\nimport { blazorAdditionalDependencies } from '../common/decorators/blazorAdditionalDependencies.js';\nimport { blazorIndirectRender } from '../common/decorators/blazorIndirectRender.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport type { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { FormAssociatedRequiredMixin } from '../common/mixins/forms/associated-required.js';\nimport { findElementFromEventPath, partNameMap } from '../common/util.js';\nimport IgcIconComponent from '../icon/icon.js';\nimport IgcInputComponent from '../input/input.js';\nimport IgcPopoverComponent from '../popover/popover.js';\nimport IgcComboHeaderComponent from './combo-header.js';\nimport IgcComboItemComponent from './combo-item.js';\nimport IgcComboListComponent from './combo-list.js';\nimport { DataController } from './controllers/data.js';\nimport { NavigationController } from './controllers/navigation.js';\nimport { SelectionController } from './controllers/selection.js';\nimport { styles } from './themes/combo.base.css.js';\nimport { styles as shared } from './themes/shared/combo.common.css.js';\nimport { all } from './themes/themes.js';\nimport type {\n  ComboItemTemplate,\n  ComboRecord,\n  ComboRenderFunction,\n  ComboValue,\n  FilteringOptions,\n  GroupingDirection,\n  IgcComboEventMap,\n  Item,\n  Keys,\n} from './types.js';\nimport { comboValidators } from './validators.js';\n\n/* blazorSupportsVisualChildren */\n/**\n * The Combo component is similar to the Select component in that it provides a list of options from which the user can make a selection.\n * In contrast to the Select component, the Combo component displays all options in a virtualized list of items,\n * meaning the combo box can simultaneously show thousands of options, where one or more options can be selected.\n * Additionally, users can create custom item templates, allowing for robust data visualization.\n * The Combo component features case-sensitive filtering, grouping, complex data binding, dynamic addition of values and more.\n *\n * @element igc-combo\n *\n * @slot prefix - Renders content before the input of the combo.\n * @slot suffix - Renders content after the input of the combo.\n * @slot header - Renders a container before the list of options of the combo.\n * @slot footer - Renders a container after the list of options of the combo.\n * @slot helper-text - Renders content below the input of the combo.\n * @slot toggle-icon - Renders content inside the suffix container of the combo.\n * @slot clear-icon - Renders content inside the suffix container of the combo.\n *\n * @fires igcChange - Emitted when the control's selection has changed.\n * @fires igcOpening - Emitted just before the list of options is opened.\n * @fires igcOpened - Emitted after the list of options is opened.\n * @fires igcClosing - Emitter just before the list of options is closed.\n * @fires igcClosed - Emitted after the list of options is closed.\n *\n * @csspart label - The encapsulated text label of the combo.\n * @csspart input - The main input field of the combo.\n * @csspart native-input - The native input of the main input field of the combo.\n * @csspart prefix - The prefix wrapper of the combo.\n * @csspart suffix - The suffix wrapper of the combo.\n * @csspart toggle-icon - The toggle icon wrapper of the combo.\n * @csspart clear-icon - The clear icon wrapper of the combo.\n * @csspart case-icon - The case icon wrapper of the combo.\n * @csspart helper-text - The helper text wrapper of the combo.\n * @csspart search-input - The search input field of the combo.\n * @csspart list-wrapper - The list of options wrapper of the combo.\n * @csspart list - The list of options box of the combo.\n * @csspart item - Represents each item in the list of options of the combo.\n * @csspart group-header - Represents each header in the list of options of the combo.\n * @csspart active - Appended to the item parts list when the item is active of the combo.\n * @csspart selected - Appended to the item parts list when the item is selected of the combo.\n * @csspart checkbox - Represents each checkbox of each list item of the combo.\n * @csspart checkbox-indicator - Represents the checkbox indicator of each list item of the combo.\n * @csspart checked - Appended to checkbox parts list when checkbox is checked in the combo.\n * @csspart header - The container holding the header content of the combo.\n * @csspart footer - The container holding the footer content of the combo.\n * @csspart empty - The container holding the empty content of the combo.\n */\n@themes(all)\n@blazorAdditionalDependencies('IgcIconComponent, IgcInputComponent')\n@blazorIndirectRender\nexport default class IgcComboComponent<\n  T extends object = any,\n> extends FormAssociatedRequiredMixin(\n  EventEmitterMixin<IgcComboEventMap, Constructor<LitElement>>(LitElement)\n) {\n  public static readonly tagName = 'igc-combo';\n  public static styles = [styles, shared];\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(\n      IgcComboComponent,\n      IgcIconComponent,\n      IgcComboListComponent,\n      IgcComboItemComponent,\n      IgcComboHeaderComponent,\n      IgcInputComponent,\n      IgcPopoverComponent\n    );\n  }\n\n  private _value: ComboValue<T>[] = [];\n\n  @state()\n  private _activeDescendant!: string;\n\n  @state()\n  private _displayValue = '';\n\n  private _filteringOptions: FilteringOptions<T> = {\n    filterKey: this.displayKey,\n    caseSensitive: false,\n    matchDiacritics: false,\n  };\n\n  protected override get __validators() {\n    return comboValidators;\n  }\n\n  protected navigationController = new NavigationController<T>(this);\n  protected selectionController = new SelectionController<T>(this);\n  protected dataController = new DataController<T>(this);\n\n  @queryAssignedElements({ slot: 'helper-text' })\n  protected helperText!: Array<HTMLElement>;\n\n  @queryAssignedElements({ slot: 'suffix' })\n  protected inputSuffix!: Array<HTMLElement>;\n\n  @queryAssignedElements({ slot: 'prefix' })\n  protected inputPrefix!: Array<HTMLElement>;\n\n  @query('[part=\"search-input\"]')\n  protected input!: IgcInputComponent;\n\n  @query('igc-input#target')\n  private target!: IgcInputComponent;\n\n  @query('igc-combo-list')\n  private list!: IgcComboListComponent;\n\n  /** The data source used to generate the list of options. */\n  /* treatAsRef */\n  @property({ attribute: false })\n  public data: Array<T> = [];\n\n  /**\n   * The outlined attribute of the control.\n   * @attr outlined\n   */\n  @property({ reflect: true, type: Boolean })\n  public outlined = false;\n\n  /**\n   * Enables single selection mode and moves item filtering to the main input.\n   * @attr single-select\n   */\n  @property({ attribute: 'single-select', reflect: true, type: Boolean })\n  public singleSelect = false;\n\n  /**\n   * The autofocus attribute of the control.\n   * @attr autofocus\n   */\n  @property({ type: Boolean })\n  public override autofocus!: boolean;\n\n  /**\n   * Focuses the list of options when the menu opens.\n   * @attr autofocus-list\n   */\n  @property({ attribute: 'autofocus-list', type: Boolean })\n  public autofocusList = false;\n\n  /**\n   * The label attribute of the control.\n   * @attr label\n   */\n  @property({ type: String })\n  public label!: string;\n\n  /**\n   * The placeholder attribute of the control.\n   * @attr placeholder\n   */\n  @property({ type: String })\n  public placeholder!: string;\n\n  /**\n   * The placeholder attribute of the search input.\n   * @attr placeholder-search\n   */\n  @property({ attribute: 'placeholder-search', type: String })\n  public placeholderSearch = 'Search';\n\n  /**\n   * Sets the open state of the component.\n   * @attr open\n   */\n  @property({ type: Boolean })\n  public open = false;\n\n  /**\n   * The key in the data source used when selecting items.\n   * @attr value-key\n   */\n  @property({ attribute: 'value-key', reflect: false })\n  public valueKey?: Keys<T>;\n\n  /**\n   * The key in the data source used to display items in the list.\n   * @attr display-key\n   */\n  @property({ attribute: 'display-key', reflect: false })\n  public displayKey?: Keys<T> = this.valueKey;\n\n  /**\n   * The key in the data source used to group items in the list.\n   * @attr group-key\n   */\n  @property({ attribute: 'group-key', reflect: false })\n  public groupKey?: Keys<T> = this.displayKey;\n\n  /**\n   * Sorts the items in each group by ascending or descending order.\n   * @attr group-sorting\n   * @type {\"asc\" | \"desc\" | \"none\"}\n   */\n  @property({ attribute: 'group-sorting', reflect: false })\n  public groupSorting: GroupingDirection = 'asc';\n\n  /**\n   * An object that configures the filtering of the combo.\n   * @attr filtering-options\n   * @type {FilteringOptions<T>}\n   * @param filterKey - The key in the data source used when filtering the list of options.\n   * @param caseSensitive - Determines whether the filtering operation should be case sensitive.\n   * @param matchDiacritics -If true, the filter distinguishes between accented letters and their base letters.\n   */\n  @property({ attribute: 'filtering-options', type: Object })\n  public get filteringOptions(): FilteringOptions<T> {\n    return this._filteringOptions;\n  }\n\n  public set filteringOptions(value: Partial<FilteringOptions<T>>) {\n    this._filteringOptions = { ...this._filteringOptions, ...value };\n    this.requestUpdate('pipeline');\n  }\n\n  /**\n   * Enables the case sensitive search icon in the filtering input.\n   * @attr case-sensitive-icon\n   */\n  @property({ type: Boolean, attribute: 'case-sensitive-icon', reflect: false })\n  public caseSensitiveIcon = false;\n\n  /**\n   * Disables the filtering of the list of options.\n   * @attr disable-filtering\n   */\n  @property({ type: Boolean, attribute: 'disable-filtering', reflect: false })\n  public disableFiltering = false;\n\n  /* blazorSuppress */\n  /**\n   * The template used for the content of each combo item.\n   * @type {ComboItemTemplate<T>}\n   */\n  @property({ attribute: false })\n  public itemTemplate: ComboItemTemplate<T> = ({ item }) => {\n    const template = this.displayKey ? `${item[this.displayKey]}` : `${item}`;\n    return html`${template}`;\n  };\n\n  /* blazorSuppress */\n  /**\n   * The template used for the content of each combo group header.\n   * @type {ComboItemTemplate<T>}\n   */\n  @property({ attribute: false })\n  public groupHeaderTemplate: ComboItemTemplate<T> = ({ item }) => {\n    return html`${this.groupKey && item[this.groupKey]}`;\n  };\n\n  @state()\n  protected dataState: Array<ComboRecord<T>> = [];\n\n  @watch('data')\n  protected dataChanged() {\n    if (this.data.length === 0) return;\n    this.dataState = structuredClone(this.data) as ComboRecord<T>[];\n\n    if (this.hasUpdated) {\n      this.pipeline();\n    }\n\n    this.requestUpdate('value');\n  }\n\n  @watch('valueKey')\n  protected updateDisplayKey() {\n    this.displayKey = this.displayKey ?? this.valueKey;\n  }\n\n  @watch('displayKey')\n  protected updateFilterKey() {\n    if (!this.filteringOptions.filterKey) {\n      this.filteringOptions = { filterKey: this.displayKey };\n    }\n  }\n\n  @watch('groupKey')\n  @watch('groupSorting')\n  @watch('pipeline')\n  protected async pipeline() {\n    this.dataState = await this.dataController.apply([...this.data]);\n  }\n\n  @watch('open')\n  protected toggleDirectiveChange() {\n    this._rootClickController.update();\n  }\n\n  @watch('disableFiltering')\n  protected updateOnDisableFiltering() {\n    this.resetSearchTerm();\n    this.pipeline();\n  }\n\n  private _rootClickController = addRootClickHandler(this, {\n    hideCallback: async () => {\n      if (!this.handleClosing()) return;\n      this.open = false;\n\n      await this.updateComplete;\n      this.emitEvent('igcClosed');\n    },\n  });\n\n  constructor() {\n    super();\n\n    this.addEventListener('blur', () => {\n      const { selected } = this.selectionController;\n\n      if (selected.size === 0) {\n        this._displayValue = '';\n        this.resetSearchTerm();\n      }\n\n      this.invalid = !this.checkValidity();\n    });\n\n    this.addEventListener(\n      'keydown',\n      this.navigationController.navigateHost.bind(this.navigationController)\n    );\n  }\n\n  protected resetSearchTerm() {\n    this.dataController.searchTerm = '';\n  }\n\n  @watch('singleSelect', { waitUntilFirstUpdate: true })\n  protected resetState() {\n    this.selectionController.selected.clear();\n    this.updateValue();\n    this.resetSearchTerm();\n    this.navigationController.active = -1;\n  }\n\n  @watch('value')\n  protected selectItems() {\n    if (!this._value || this.value.length === 0) {\n      this.selectionController.deselect([]);\n    } else {\n      this.selectionController.deselect([]);\n      this.selectionController.select(this._value as Item<T>[]);\n    }\n\n    this.updateValue();\n  }\n\n  /**\n   * Sets the value (selected items). The passed value must be a valid JSON array.\n   * If the data source is an array of complex objects, the `valueKey` attribute must be set.\n   * Note that when `displayKey` is not explicitly set, it will fall back to the value of `valueKey`.\n   *\n   * @attr value\n   *\n   * @example\n   * ```tsx\n   * <igc-combo\n   *  .data=${[\n   *    {\n   *      id: 'BG01',\n   *      name: 'Sofia'\n   *    },\n   *    {\n   *      id: 'BG02',\n   *      name: 'Plovdiv'\n   *    }\n   *  ]}\n   *  display-key='name'\n   *  value-key='id'\n   *  value='[\"BG01\", \"BG02\"]'>\n   *  </igc-combo>\n   * ```\n   */\n  /* blazorPrimitiveValue */\n  /* blazorByValueArray */\n  /* blazorGenericType */\n  /* @tsTwoWayProperty (true, \"Change\", \"Detail.NewValue\", false) */\n  public set value(items: ComboValue<T>[]) {\n    const oldValue = this._value;\n    this._value = items;\n    this.requestUpdate('value', oldValue);\n  }\n\n  /**\n   * Returns the current selection as a list of comma separated values,\n   * represented by the value key, when provided.\n   */\n  @property({ attribute: true, type: Array })\n  public get value(): ComboValue<T>[] {\n    return this._value;\n  }\n\n  protected override _setDefaultValue(\n    _: string | null,\n    current: string | null\n  ): void {\n    this._defaultValue = JSON.parse(current ?? '[]');\n  }\n\n  protected override _setFormValue(): void {\n    if (!this.name) {\n      return;\n    }\n\n    const items = this._value;\n\n    if (items.length < 1) {\n      super._setFormValue(null);\n      return;\n    }\n\n    const data = new FormData();\n\n    if (this.singleSelect) {\n      data.set(this.name, `${items[0]}`);\n    } else {\n      for (const item of items) {\n        data.append(this.name, `${item}`);\n      }\n    }\n\n    super._setFormValue(data);\n  }\n\n  protected async updateValue() {\n    if (this.data.length === 0) return;\n    const selected = Array.from(this.selectionController.selected);\n\n    this._value = this.selectionController.getValue(selected, this.valueKey!);\n    this._displayValue = this.selectionController\n      .getValue(selected, this.displayKey!)\n      .join(', ');\n\n    if (this.target && this.singleSelect) {\n      this.target.value = this._displayValue;\n    }\n\n    this._setFormValue();\n    this._validate();\n\n    await this.updateComplete;\n    this.list.requestUpdate();\n  }\n\n  /* alternateName: focusComponent */\n  /** Sets focus on the component. */\n  public override focus(options?: FocusOptions) {\n    this.target.focus(options);\n  }\n\n  /* alternateName: blurComponent */\n  /** Removes focus from the component. */\n  public override blur() {\n    this.target.blur();\n    super.blur();\n  }\n\n  protected normalizeSelection(items: Item<T> | Item<T>[] = []): Item<T>[] {\n    return Array.isArray(items) ? items : [items];\n  }\n\n  /**\n   * Returns the current selection as an array of objects as provided in the `data` source.\n   */\n  public get selection(): Array<T> {\n    return Array.from(this.selectionController.selected.values());\n  }\n\n  /**\n   * Selects option(s) in the list by either reference or valueKey.\n   * If not argument is provided all items will be selected.\n   * @param { Item<T> | Items<T> } items - One or more items to be selected. Multiple items should be passed as an array.\n   * When valueKey is specified, the corresponding value should be used in place of the item reference.\n   * @example\n   * ```typescript\n   * const combo<IgcComboComponent<T>> = document.querySelector('igc-combo');\n   *\n   * // Select one item at a time by reference when valueKey is not specified.\n   * combo.select(combo.data[0]);\n   *\n   * // Select multiple items at a time by reference when valueKey is not specified.\n   * combo.select([combo.data[0], combo.data[1]]);\n   *\n   * // Select one item at a time when valueKey is specified.\n   * combo.select('BG01');\n   *\n   * // Select multiple items at a time when valueKey is specified.\n   * combo.select(['BG01', 'BG02']);\n   * ```\n   */\n  public select(items?: Item<T> | Item<T>[]) {\n    const _items = this.normalizeSelection(items);\n    this.selectionController.select(_items, false);\n    this.updateValue();\n  }\n\n  /**\n   * Deselects option(s) in the list by either reference or valueKey.\n   * If not argument is provided all items will be deselected.\n   * @param { Item<T> | Items<T> } items - One or more items to be deselected. Multiple items should be passed as an array.\n   * When valueKey is specified, the corresponding value should be used in place of the item reference.\n   * @example\n   * ```typescript\n   * const combo<IgcComboComponent<T>> = document.querySelector('igc-combo');\n   *\n   * // Deselect one item at a time by reference when valueKey is not specified.\n   * combo.deselect(combo.data[0]);\n   *\n   * // Deselect multiple items at a time by reference when valueKey is not specified.\n   * combo.deselect([combo.data[0], combo.data[1]]);\n   *\n   * // Deselect one item at a time when valueKey is specified.\n   * combo.deselect('BG01');\n   *\n   * // Deselect multiple items at a time when valueKey is specified.\n   * combo.deselect(['BG01', 'BG02']);\n   * ```\n   */\n  public deselect(items?: Item<T> | Item<T>[]) {\n    const _items = this.normalizeSelection(items);\n    this.selectionController.deselect(_items, false);\n    this.updateValue();\n  }\n\n  protected async handleMainInput(e: CustomEvent) {\n    this._show();\n    this.dataController.searchTerm = e.detail;\n\n    // wait for the dataState to update after filtering\n    await this.updateComplete;\n\n    const matchIndex = this.dataState.findIndex((i) => !i.header);\n    this.navigationController.active = e.detail.length > 0 ? matchIndex : -1;\n\n    // update the list after changing the active item\n    this.list.requestUpdate();\n\n    // clear the selection upon typing\n    this.clearSingleSelection();\n  }\n\n  protected handleSearchInput(e: CustomEvent) {\n    this.dataController.searchTerm = e.detail;\n  }\n\n  protected handleOpening() {\n    return this.emitEvent('igcOpening', { cancelable: true });\n  }\n\n  protected handleClosing(): boolean {\n    return this.emitEvent('igcClosing', { cancelable: true });\n  }\n\n  protected async _show(emitEvent = true) {\n    if (this.open || (emitEvent && !this.handleOpening())) {\n      return false;\n    }\n\n    this.open = true;\n    await this.updateComplete;\n\n    if (emitEvent) {\n      this.emitEvent('igcOpened');\n    }\n\n    if (!this.singleSelect) {\n      this.list.focus();\n    }\n\n    if (!this.autofocusList) {\n      this.input.focus();\n    }\n\n    return true;\n  }\n\n  /** Shows the list of options. */\n  public async show(): Promise<boolean> {\n    return this._show(false);\n  }\n\n  protected async _hide(emitEvent = true) {\n    if (!this.open || (emitEvent && !this.handleClosing())) {\n      return false;\n    }\n\n    this.open = false;\n    await this.updateComplete;\n\n    if (emitEvent) {\n      this.emitEvent('igcClosed');\n    }\n    this.navigationController.active = -1;\n    return true;\n  }\n\n  /** Hides the list of options. */\n  public async hide(): Promise<boolean> {\n    return this._hide(false);\n  }\n\n  protected _toggle(emit = true) {\n    return this.open ? this._hide(emit) : this._show(emit);\n  }\n\n  /** Toggles the list of options. */\n  public async toggle(): Promise<boolean> {\n    return this._toggle(false);\n  }\n\n  protected itemRenderer: ComboRenderFunction<T> = (\n    item: ComboRecord<T>,\n    index: number\n  ): TemplateResult => {\n    const record = item;\n    const dataItem = this.data.at(record.dataIndex);\n    const active = this.navigationController.active === index;\n    const selected = this.selectionController.selected.has(dataItem!);\n    const headerTemplate = html`<igc-combo-header part=\"group-header\"\n      >${this.groupHeaderTemplate({ item: record.value })}</igc-combo-header\n    >`;\n\n    const itemPosition = index + 1;\n    const itemId = this.id\n      ? `${this.id}-item-${itemPosition}`\n      : `item-${itemPosition}`;\n\n    if (active) {\n      this._activeDescendant = itemId;\n    }\n\n    const itemTemplate = html`<igc-combo-item\n      id=${itemId}\n      part=${partNameMap({ item: true, selected, active })}\n      aria-setsize=${this.dataState.length}\n      aria-posinset=${itemPosition}\n      exportparts=\"checkbox, checkbox-indicator, checked\"\n      @click=${this.itemClickHandler.bind(this)}\n      .index=${index}\n      ?active=${active}\n      ?selected=${selected}\n      ?hide-checkbox=${this.singleSelect}\n      >${this.itemTemplate({ item: record.value })}</igc-combo-item\n    >`;\n\n    return html`${this.groupKey && record.header\n      ? headerTemplate\n      : itemTemplate}`;\n  };\n\n  protected listKeydownHandler(event: KeyboardEvent) {\n    const target = event\n      .composedPath()\n      .find(\n        (el) => el instanceof IgcComboListComponent\n      ) as IgcComboListComponent;\n\n    if (target) {\n      this.navigationController.navigateList(event, target);\n    }\n  }\n\n  protected itemClickHandler(event: MouseEvent) {\n    const input = this.singleSelect ? this.target : this.input;\n    const target = findElementFromEventPath<IgcComboItemComponent>(\n      IgcComboItemComponent.tagName,\n      event\n    )!;\n\n    this.toggleSelect(target.index);\n    input.focus();\n\n    if (this.singleSelect) {\n      this._hide();\n    }\n  }\n\n  protected toggleSelect(index: number) {\n    const { dataIndex } = this.dataState.at(index)!;\n\n    this.selectionController.changeSelection(dataIndex);\n    this.navigationController.active = index;\n    this.updateValue();\n  }\n\n  protected selectByIndex(index: number) {\n    const { dataIndex } = this.dataState.at(index)!;\n\n    this.selectionController.selectByIndex(dataIndex);\n    this.navigationController.active = index;\n    this.updateValue();\n  }\n\n  protected navigateTo(item: T) {\n    this.navigationController.navigateTo(item, this.list);\n  }\n\n  protected clearSingleSelection() {\n    const { selected } = this.selectionController;\n    const selection = selected.values().next().value;\n\n    if (selection) {\n      const item = this.valueKey ? selection[this.valueKey] : selection;\n      this.selectionController.deselect([item], selected.size > 0);\n      this._value = [];\n    }\n  }\n\n  protected handleClearIconClick(e: MouseEvent) {\n    e.stopPropagation();\n\n    if (this.singleSelect) {\n      this.resetSearchTerm();\n      this.clearSingleSelection();\n    } else {\n      this.selectionController.deselect([], true);\n    }\n\n    this.updateValue();\n    this.navigationController.active = -1;\n  }\n\n  protected handleMainInputKeydown(e: KeyboardEvent) {\n    this.navigationController.navigateMainInput(e, this.list);\n  }\n\n  protected handleSearchInputKeydown(e: KeyboardEvent) {\n    this.navigationController.navigateSearchInput(e, this.list);\n  }\n\n  protected toggleCaseSensitivity() {\n    this.filteringOptions = {\n      caseSensitive: !this.filteringOptions.caseSensitive,\n    };\n  }\n\n  protected get hasPrefixes() {\n    return this.inputPrefix.length > 0;\n  }\n\n  protected get hasSuffixes() {\n    return this.inputSuffix.length > 0;\n  }\n\n  private _stopPropagation(e: Event) {\n    e.stopPropagation();\n  }\n\n  private renderToggleIcon() {\n    return html`\n      <span\n        slot=\"suffix\"\n        part=\"${partNameMap({\n          'toggle-icon': true,\n          filled: this.value.length > 0,\n        })}\"\n      >\n        <slot name=\"toggle-icon\">\n          <igc-icon\n            name=${this.open ? 'input_collapse' : 'input_expand'}\n            collection=\"default\"\n            aria-hidden=\"true\"\n          ></igc-icon>\n        </slot>\n      </span>\n    `;\n  }\n\n  private renderClearIcon() {\n    const { selected } = this.selectionController;\n\n    return html`<span\n      slot=\"suffix\"\n      part=\"clear-icon\"\n      @click=${this.handleClearIconClick}\n      ?hidden=${selected.size === 0}\n    >\n      <slot name=\"clear-icon\">\n        <igc-icon\n          name=\"input_clear\"\n          collection=\"default\"\n          aria-hidden=\"true\"\n        ></igc-icon>\n      </slot>\n    </span>`;\n  }\n\n  private renderMainInput() {\n    return html`<igc-input\n      id=\"target\"\n      slot=\"anchor\"\n      role=\"combobox\"\n      aria-controls=\"dropdown\"\n      aria-owns=\"dropdown\"\n      aria-expanded=${this.open ? 'true' : 'false'}\n      aria-describedby=\"helper-text\"\n      aria-disabled=${this.disabled}\n      exportparts=\"container: input, input: native-input, label, prefix, suffix\"\n      @click=${(e: MouseEvent) => {\n        e.preventDefault();\n        this._toggle(true);\n      }}\n      placeholder=${ifDefined(this.placeholder)}\n      label=${ifDefined(this.label)}\n      @igcChange=${this._stopPropagation}\n      @focus=${() => {\n        requestAnimationFrame(() => {\n          this.target.select();\n        });\n      }}\n      @igcInput=${this.handleMainInput}\n      @keydown=${this.handleMainInputKeydown}\n      .value=${this._displayValue}\n      .disabled=${this.disabled}\n      .required=${this.required}\n      .invalid=${live(this.invalid)}\n      .outlined=${this.outlined}\n      .autofocus=${this.autofocus}\n      ?readonly=${!this.singleSelect}\n    >\n      <span slot=${this.hasPrefixes && 'prefix'}>\n        <slot name=\"prefix\"></slot>\n      </span>\n      ${this.renderClearIcon()}\n      <span slot=${this.hasSuffixes && 'suffix'}>\n        <slot name=\"suffix\"></slot>\n      </span>\n      ${this.renderToggleIcon()}\n    </igc-input>`;\n  }\n\n  private renderSearchInput() {\n    return html`<div\n      part=\"filter-input\"\n      ?hidden=${this.disableFiltering || this.singleSelect}\n    >\n      <igc-input\n        .value=${this.dataController.searchTerm}\n        part=\"search-input\"\n        placeholder=${this.placeholderSearch}\n        exportparts=\"input: search-input\"\n        @igcInput=${this.handleSearchInput}\n        @keydown=${this.handleSearchInputKeydown}\n      >\n        <igc-icon\n          slot=${this.caseSensitiveIcon && 'suffix'}\n          name=\"case_sensitive\"\n          collection=\"default\"\n          part=${partNameMap({\n            'case-icon': true,\n            active: this.filteringOptions.caseSensitive ?? false,\n          })}\n          @click=${this.toggleCaseSensitivity}\n        ></igc-icon>\n      </igc-input>\n    </div>`;\n  }\n\n  private renderEmptyTemplate() {\n    return html`<div part=\"empty\" ?hidden=${this.dataState.length > 0}>\n      <slot name=\"empty\">The list is empty</slot>\n    </div>`;\n  }\n\n  private renderList() {\n    const hasItems = this.dataState.length > 0;\n\n    return html`<div\n      .inert=${!this.open}\n      @keydown=${this.listKeydownHandler}\n      part=\"list-wrapper\"\n    >\n      ${this.renderSearchInput()}\n      <div part=\"header\">\n        <slot name=\"header\"></slot>\n      </div>\n      <igc-combo-list\n        aria-multiselectable=${!this.singleSelect}\n        id=\"dropdown\"\n        part=\"list\"\n        role=\"listbox\"\n        tabindex=\"0\"\n        aria-labelledby=\"target\"\n        aria-activedescendant=${ifDefined(this._activeDescendant)}\n        .items=${this.dataState}\n        .renderItem=${this.itemRenderer}\n        ?hidden=${!hasItems}\n      >\n      </igc-combo-list>\n      ${this.renderEmptyTemplate()}\n      <div part=\"footer\">\n        <slot name=\"footer\"></slot>\n      </div>\n    </div>`;\n  }\n\n  private renderHelperText() {\n    return html`<div\n      id=\"helper-text\"\n      part=\"helper-text\"\n      ?hidden=\"${this.helperText.length === 0}\"\n    >\n      <slot name=\"helper-text\"></slot>\n    </div>`;\n  }\n\n  protected override render() {\n    return html`\n      <igc-popover ?open=${this.open} flip shift same-width>\n        ${this.renderMainInput()} ${this.renderList()}\n      </igc-popover>\n      ${this.renderHelperText()}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-combo': IgcComboComponent<object>;\n  }\n}\n"]}