{"version":3,"file":"icon-state.broadcast.js","sourceRoot":"","sources":["../../../src/components/icon/icon-state.broadcast.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAOjE,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAEjD,MAAM,OAAO,mBAAmB;IAK9B,YACE,WAAqC,EACrC,cAAyC;QAEzC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,oBAAoB,GAAG,IAAI,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;QAC3E,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC9D,CAAC;IAEM,IAAI,CAAC,IAAiC;QAC3C,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAEM,WAAW,CAAC,EAAE,IAAI,EAA6C;QACpE,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,SAAS,EAAE,CAAC;YAC7C,OAAO;QACT,CAAC;QAED,IAAI,CAAC,IAAI,CAAC;YACR,UAAU,EAAE,UAAU,CAAC,SAAS;YAChC,WAAW,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE;YAChE,UAAU,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,EAAE;SACpE,CAAC,CAAC;IACL,CAAC;IAEO,qBAAqB,CAAC,WAAsC;QAClE,MAAM,YAAY,GAAG,oBAAoB,EAAoB,CAAC;QAC9D,KAAK,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC;YAChE,KAAK,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC;gBACnD,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAClB,YAAY,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC7D,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,oBAAoB,CAAC,WAAqC;QAChE,MAAM,YAAY,GAAG,oBAAoB,EAAmB,CAAC;QAE7D,KAAK,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC;YAChE,IAAI,aAAa,KAAK,UAAU,EAAE,CAAC;gBACjC,SAAS;YACX,CAAC;YACD,KAAK,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC;gBACnD,YAAY,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;CACF","sourcesContent":["import { createIconDefaultMap } from './registry/default-map.js';\nimport type {\n  BroadcastIconsChangeMessage,\n  IconMeta,\n  IconsCollection,\n  SvgIcon,\n} from './registry/types.js';\nimport { ActionType } from './registry/types.js';\n\nexport class IconsStateBroadcast {\n  private iconBroadcastChannel: BroadcastChannel;\n  private collections: IconsCollection<SvgIcon>;\n  private refsCollection: IconsCollection<IconMeta>;\n\n  constructor(\n    collections: IconsCollection<SvgIcon>,\n    refsCollection: IconsCollection<IconMeta>\n  ) {\n    this.collections = collections;\n    this.refsCollection = refsCollection;\n    this.iconBroadcastChannel = new BroadcastChannel('ignite-ui-icon-channel');\n    this.iconBroadcastChannel.addEventListener('message', this);\n  }\n\n  public send(data: BroadcastIconsChangeMessage) {\n    this.iconBroadcastChannel.postMessage(data);\n  }\n\n  public handleEvent({ data }: MessageEvent<BroadcastIconsChangeMessage>) {\n    if (data.actionType !== ActionType.SyncState) {\n      return;\n    }\n\n    this.send({\n      actionType: ActionType.SyncState,\n      collections: this.getUserSetCollection(this.collections).toMap(),\n      references: this.getUserRefsCollection(this.refsCollection).toMap(),\n    });\n  }\n\n  private getUserRefsCollection(collections: IconsCollection<IconMeta>) {\n    const userSetIcons = createIconDefaultMap<string, IconMeta>();\n    for (const [collectionKey, collection] of collections.entries()) {\n      for (const [iconKey, icon] of collection.entries()) {\n        if (icon.external) {\n          userSetIcons.getOrCreate(collectionKey).set(iconKey, icon);\n        }\n      }\n    }\n    return userSetIcons;\n  }\n\n  private getUserSetCollection(collections: IconsCollection<SvgIcon>) {\n    const userSetIcons = createIconDefaultMap<string, SvgIcon>();\n\n    for (const [collectionKey, collection] of collections.entries()) {\n      if (collectionKey === 'internal') {\n        continue;\n      }\n      for (const [iconKey, icon] of collection.entries()) {\n        userSetIcons.getOrCreate(collectionKey).set(iconKey, icon);\n      }\n    }\n    return userSetIcons;\n  }\n}\n"]}