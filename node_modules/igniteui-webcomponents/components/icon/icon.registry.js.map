{"version":3,"file":"icon.registry.js","sourceRoot":"","sources":["../../../src/components/icon/icon.registry.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Theme } from '../../theming/types.js';\nimport { sameObject } from '../common/util.js';\nimport { iconReferences } from './icon-references.js';\nimport { IconsStateBroadcast } from './icon-state.broadcast.js';\nimport { internalIcons } from './internal-icons-lib.js';\nimport { createIconDefaultMap } from './registry/default-map.js';\nimport { SvgIconParser } from './registry/parser.js';\nimport type {\n  IconCallback,\n  IconMeta,\n  IconReferencePair,\n  SvgIcon,\n} from './registry/types.js';\nimport { ActionType } from './registry/types.js';\n\nclass IconsRegistry {\n  private parser: SvgIconParser;\n  private collections = createIconDefaultMap<string, SvgIcon>();\n  private references = createIconDefaultMap<string, IconMeta>();\n  private listeners = new Set<IconCallback>();\n  private theme!: Theme;\n  private broadcast: IconsStateBroadcast;\n\n  constructor() {\n    this.parser = new SvgIconParser();\n    this.broadcast = new IconsStateBroadcast(this.collections, this.references);\n\n    this.collections.set('internal', internalIcons);\n  }\n\n  public register(name: string, iconText: string, collection = 'default') {\n    const svgIcon = this.parser.parse(iconText);\n    this.collections.getOrCreate(collection).set(name, svgIcon);\n\n    const icons = createIconDefaultMap<string, SvgIcon>();\n    icons.getOrCreate(collection).set(name, svgIcon);\n\n    this.broadcast.send({\n      actionType: ActionType.RegisterIcon,\n      collections: icons.toMap(),\n    });\n\n    this.notifyAll(name, collection);\n  }\n\n  public subscribe(callback: IconCallback) {\n    this.listeners.add(callback);\n  }\n\n  public unsubscribe(callback: IconCallback) {\n    this.listeners.delete(callback);\n  }\n\n  public setRefsByTheme(theme: Theme) {\n    if (this.theme !== theme) {\n      this.theme = theme;\n\n      for (const { alias, target } of iconReferences) {\n        const external = this.references\n          .get(alias.collection)\n          ?.get(alias.name)?.external;\n\n        const _ref = this.references.get('default')?.get(alias.name) ?? {};\n        const _target = target.get(this.theme) ?? target.get('default')!;\n\n        this.setIconRef({\n          alias,\n          target: _target,\n          overwrite: !external && !sameObject(_ref, _target),\n        });\n      }\n    }\n  }\n\n  public setIconRef(options: IconReferencePair) {\n    const { alias, target, overwrite } = options;\n    const reference = this.references.getOrCreate(alias.collection);\n\n    if (overwrite) {\n      reference.set(alias.name, {\n        name: target.name,\n        collection: target.collection,\n        external: target.external,\n      });\n      this.notifyAll(alias.name, alias.collection);\n    }\n    if (target.external) {\n      const refs = createIconDefaultMap<string, IconMeta>();\n      refs.getOrCreate(alias.collection).set(alias.name, {\n        name: target.name,\n        collection: target.collection,\n      });\n\n      this.broadcast.send({\n        actionType: ActionType.UpdateIconReference,\n        references: refs.toMap(),\n      });\n    }\n  }\n\n  public getIconRef(name: string, collection: string): IconMeta {\n    const icon = this.references.get(collection)?.get(name);\n\n    return {\n      name: icon?.name ?? name,\n      collection: icon?.collection ?? collection,\n    };\n  }\n\n  public get(name: string, collection = 'default') {\n    return this.collections.get(collection)?.get(name);\n  }\n\n  private notifyAll(name: string, collection: string) {\n    for (const listener of this.listeners) {\n      listener(name, collection);\n    }\n  }\n}\n\nconst registry = Symbol.for('igc.icons-registry.instance');\n\ntype IgcIconRegistry = typeof globalThis & {\n  [registry]?: IconsRegistry;\n};\n\nexport function getIconRegistry() {\n  const _global = globalThis as IgcIconRegistry;\n  if (!_global[registry]) {\n    _global[registry] = new IconsRegistry();\n  }\n  return _global[registry];\n}\n\nexport async function registerIcon(\n  name: string,\n  url: string,\n  collection = 'default'\n) {\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const value = await response.text();\n    getIconRegistry().register(name, value, collection);\n  } else {\n    throw new Error(`Icon request failed. Status: ${response.status}.`);\n  }\n}\n\nexport function registerIconFromText(\n  name: string,\n  iconText: string,\n  collection = 'default'\n) {\n  getIconRegistry().register(name, iconText, collection);\n}\n\nexport function setIconRef(name: string, collection: string, icon: IconMeta) {\n  getIconRegistry().setIconRef({\n    alias: { name, collection },\n    target: {\n      name: icon.name,\n      collection: icon.collection,\n      external: true,\n    },\n    overwrite: true,\n  });\n}\n"]}