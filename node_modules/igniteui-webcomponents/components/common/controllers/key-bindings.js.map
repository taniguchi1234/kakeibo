{"version":3,"file":"key-bindings.js","sourceRoot":"","sources":["../../../../src/components/common/controllers/key-bindings.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveControllerHost } from 'lit';\nimport type { Ref } from 'lit/directives/ref.js';\n\nimport { findElementFromEventPath } from '../util.js';\n\n/* Common keys */\nexport const arrowLeft = 'ArrowLeft' as const;\nexport const arrowRight = 'ArrowRight' as const;\nexport const arrowUp = 'ArrowUp' as const;\nexport const arrowDown = 'ArrowDown' as const;\nexport const enterKey = 'Enter' as const;\nexport const spaceBar = ' ' as const;\nexport const escapeKey = 'Escape' as const;\nexport const homeKey = 'Home' as const;\nexport const endKey = 'End' as const;\nexport const pageUpKey = 'PageUp' as const;\nexport const pageDownKey = 'PageDown' as const;\nexport const tabKey = 'Tab' as const;\n\n/* Modifiers */\nexport const altKey = 'Alt' as const;\nexport const ctrlKey = 'Ctrl' as const;\nexport const metaKey = 'Meta' as const;\nexport const shiftKey = 'Shift' as const;\n\n/* Types */\nexport type KeyBindingHandler = (event: KeyboardEvent) => void;\nexport type KeyBindingObserverCleanup = { unsubscribe: () => void };\n\n/**\n * Whether the current event should be ignored by the controller.\n *\n * @param node - The event target\n * @param event - The event object\n *\n * When `true` is returned, the current event is ignored.\n */\nexport type KeyBindingSkipCallback = (\n  node: Element,\n  event: KeyboardEvent\n) => boolean;\n\n/**\n * The event type which will trigger the bound handler.\n *\n * @remarks\n * `keydownRepeat` is similar to `keydown` with the exception\n * that after the handler is invoked the pressed state of the key is reset\n * in the controller.\n */\nexport type KeyBindingTrigger = 'keydown' | 'keyup' | 'keydownRepeat';\n\n/**\n * Configuration object for the controller.\n * @ignore\n */\nexport interface KeyBindingControllerOptions {\n  /**\n   * By default, the controller listens for keypress events in the context of the host element.\n   * If you pass a `ref`, you can limit the observation to a certain DOM part of the host scope.\n   */\n  ref?: Ref;\n  /**\n   * Option to ignore key press events.\n   *\n   * If passed an array of CSS selectors, it will ignore key presses originating from elements in the event composed path\n   * that match one of the selectors.\n   * Otherwise you can pass a {@link KeyBindingSkipCallback} function.\n   *\n   * Defaults to `['input', 'textarea', 'select']`.\n   *\n   * @example\n   * ```ts\n   * {\n   *  // Skip events originating from elements with `readonly` attribute\n   *  skip: ['[readonly]']\n   * }\n   * ...\n   * {\n   * // Same as above but with a callback\n   *  skip: (node: Element) => node.hasAttribute('readonly')\n   * }\n   * ```\n   */\n  skip?: string[] | KeyBindingSkipCallback;\n  /**\n   * A set of KeyBindingOptions configuration which is applied to every handler\n   * that is added to the controller.\n   *\n   * Any additional KeyBindingOptions values passed when `set` is called\n   * will be merged with `bindingDefaults`.\n   */\n  bindingDefaults?: KeyBindingOptions;\n}\n\n/**\n * Configuration object for customizing the behavior of\n * the registered handler.\n */\nexport interface KeyBindingOptions {\n  /**\n   * The event type(s) on which the handler will be invoked.\n   *\n   * Defaults to `keydown` if not set.\n   */\n  triggers?: KeyBindingTrigger[];\n  /**\n   * Whether to call `preventDefault` on the target event before the handler is invoked.\n   */\n  preventDefault?: boolean;\n  /**\n   * Whether to call `stopPropagation` on the target event before the handler is invoked.\n   */\n  stopPropagation?: boolean;\n}\n\ninterface KeyBinding {\n  keys: string[];\n  handler: KeyBindingHandler;\n  options?: KeyBindingOptions;\n  modifiers?: string[];\n}\n\nconst Modifiers: Map<string, string> = new Map(\n  [altKey, ctrlKey, metaKey, shiftKey].map((key) => {\n    const mod = key.toLowerCase();\n    return key === ctrlKey ? ['control', mod] : [mod, mod];\n  })\n);\n\nconst defaultOptions: KeyBindingControllerOptions = {\n  skip: ['input', 'textarea', 'select'],\n};\n\nfunction normalizeKeys(keys: string | string[]) {\n  return (Array.isArray(keys) ? keys : [keys]).map((key) => key.toLowerCase());\n}\n\nfunction isKeydown(event: Event) {\n  return event.type === 'keydown';\n}\n\nfunction isKeyup(event: Event) {\n  return event.type === 'keyup';\n}\n\nfunction isKeydownTrigger(triggers?: KeyBindingTrigger[]) {\n  return triggers\n    ? triggers.includes('keydown') || isKeydownRepeatTrigger(triggers)\n    : false;\n}\n\nfunction isKeyupTrigger(triggers?: KeyBindingTrigger[]) {\n  return triggers ? triggers.includes('keyup') : false;\n}\n\nfunction isKeydownRepeatTrigger(triggers?: KeyBindingTrigger[]) {\n  return triggers ? triggers.includes('keydownRepeat') : false;\n}\n\nexport function parseKeys(keys: string | string[]) {\n  const parsed = normalizeKeys(keys);\n  return {\n    keys: parsed.filter((key) => !Modifiers.has(key)),\n    modifiers: parsed.filter((key) => Modifiers.has(key)),\n  };\n}\n\nfunction createCombinationKey(keys: string[], modifiers: string[]) {\n  return Array.from(Modifiers.values())\n    .filter((mod) => modifiers.includes(mod))\n    .concat(keys)\n    .join('+');\n}\n\nclass KeyBindingController implements ReactiveController {\n  protected _host: ReactiveControllerHost & Element;\n  protected _ref?: Ref;\n  protected _observedElement?: Element;\n  protected _options?: KeyBindingControllerOptions;\n  private bindings = new Map<string, KeyBinding>();\n  private pressedKeys = new Set<string>();\n\n  protected get _element() {\n    if (this._observedElement) {\n      return this._observedElement;\n    }\n    return this._ref ? this._ref.value : this._host;\n  }\n\n  /**\n   * Sets the controller to listen for keyboard events on an arbitrary `element` in the page context.\n   * All the configuration and event handlers are applied as well.\n   *\n   * Returns an object with an `unsubscribe` function which should be called when the observing of keyboard\n   * events on the `element` should cease.\n   */\n  public observeElement(element: Element): KeyBindingObserverCleanup {\n    element.addEventListener('keydown', this);\n    element.addEventListener('keyup', this);\n    this._observedElement = element;\n\n    return {\n      unsubscribe: () => {\n        this._observedElement?.removeEventListener('keydown', this);\n        this._observedElement?.removeEventListener('keyup', this);\n        this._observedElement = undefined;\n      },\n    };\n  }\n\n  constructor(\n    host: ReactiveControllerHost & Element,\n    options?: KeyBindingControllerOptions\n  ) {\n    this._host = host;\n    this._ref = options?.ref;\n    this._options = { ...defaultOptions, ...options };\n    host.addController(this);\n  }\n\n  /**\n   * Checks and executes any event modifiers that are present in the matched binding.\n   */\n  private eventModifiersMatch(binding: KeyBinding, event: KeyboardEvent) {\n    if (binding.options?.preventDefault) {\n      event.preventDefault();\n    }\n\n    if (binding.options?.stopPropagation) {\n      event.stopPropagation();\n    }\n  }\n\n  private bindingMatches(binding: KeyBinding, event: KeyboardEvent) {\n    const triggers = binding.options?.triggers ?? ['keydown'];\n\n    if (isKeydown(event) && isKeydownTrigger(triggers)) {\n      return true;\n    }\n\n    if (isKeyup(event) && isKeyupTrigger(triggers)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private shouldSkip(event: KeyboardEvent) {\n    const skip = this._options?.skip;\n\n    if (!findElementFromEventPath((e) => e === this._element, event)) {\n      return true;\n    }\n\n    if (!skip) {\n      return false;\n    }\n\n    return Array.isArray(skip)\n      ? findElementFromEventPath(skip.join(), event)\n      : skip.call(this._host, event.target as Element, event);\n  }\n\n  public handleEvent(event: KeyboardEvent) {\n    if (this.shouldSkip(event)) {\n      return;\n    }\n\n    const key = event.key.toLowerCase();\n    Modifiers.has(key) ? this.pressedKeys.clear() : this.pressedKeys.add(key);\n\n    const pendingKeys = Array.from(this.pressedKeys);\n    const modifiers = Array.from(Modifiers.values()).filter(\n      (mod) => event[`${mod}Key` as keyof KeyboardEvent]\n    );\n\n    const binding = this.bindings.get(\n      createCombinationKey(pendingKeys, modifiers)\n    );\n\n    if (binding && this.bindingMatches(binding, event)) {\n      this.eventModifiersMatch(binding, event);\n      binding.handler.call(this._host, event);\n\n      if (isKeydownRepeatTrigger(binding.options?.triggers)) {\n        this.pressedKeys.delete(key);\n      }\n    }\n\n    if (isKeyup(event) && !Modifiers.has(key)) {\n      this.pressedKeys.delete(key);\n    }\n  }\n\n  /**\n   * Registers a keybinding handler.\n   */\n  public set(\n    key: string | string[],\n    handler: KeyBindingHandler,\n    options?: KeyBindingOptions\n  ) {\n    const { keys, modifiers } = parseKeys(key);\n    const combination = createCombinationKey(keys, modifiers);\n    const _options = { ...this._options?.bindingDefaults, ...options };\n\n    this.bindings.set(combination, {\n      keys,\n      handler,\n      options: _options,\n      modifiers,\n    });\n\n    return this;\n  }\n\n  /**\n   * Register a handler function which is called when the target receives a key\n   * which \"activates\" it.\n   *\n   * In the browser context this is usually either an Enter and/or Space keypress.\n   */\n  public setActivateHandler(\n    handler: KeyBindingHandler,\n    options?: KeyBindingOptions\n  ) {\n    for (const key of [enterKey, spaceBar]) {\n      this.set(key, handler, options);\n    }\n\n    return this;\n  }\n\n  public hostConnected(): void {\n    this._host.addEventListener('keyup', this);\n    this._host.addEventListener('keydown', this);\n  }\n\n  public hostDisconnected(): void {\n    this._host.removeEventListener('keyup', this);\n    this._host.removeEventListener('keydown', this);\n  }\n}\n\n/**\n * Creates a keybinding controller and adds to it to the passed `element`\n * with the provided `options`.\n */\nexport function addKeybindings(\n  element: ReactiveControllerHost & Element,\n  options?: KeyBindingControllerOptions\n) {\n  return new KeyBindingController(element, options);\n}\n"]}