{"version":3,"file":"intl-formatters.js","sourceRoot":"","sources":["../../../../src/components/common/localization/intl-formatters.ts"],"names":[],"mappings":"AAIA,MAAM,MAAM,GAAG,IAAI,GAAG,EAA+B,CAAC;AAEtD,SAAS,gBAAgB,CAAC,OAAmC;IAC3D,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;SAC3B,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;SAC5B,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AAED,SAAS,YAAY,CAAC,MAAc,EAAE,OAAmC;IACvE,MAAM,GAAG,GAAG,GAAG,MAAM,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;IAErD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;QACrB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO,MAAM,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;AAC1B,CAAC;AAED,MAAM,kBAAkB;IAGd,OAAO,CAAC,aAAgB;QAC9B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC;YACzD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED,YACU,OAAe,EACf,cAAiB;QADjB,YAAO,GAAP,OAAO,CAAQ;QACf,mBAAc,GAAd,cAAc,CAAG;QAVnB,gBAAW,GAAG,IAAI,GAAG,EAAgC,CAAC;QAY5D,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC/B,CAAC;IAEM,GAAG,CAAC,IAAa;QACtB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;IACrC,CAAC;IAED,IAAW,aAAa;QACtB,OAAO,EAAE,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACpC,CAAC;IAED,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,IAAW,MAAM,CAAC,KAAa;QAC7B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC;IAEM,MAAM,CAAC,aAAyB;QACrC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC;IAClE,CAAC;CACF;AAED,MAAM,UAAU,wBAAwB,CACtC,MAAc,EACd,aAAgB;IAEhB,OAAO,IAAI,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AACvD,CAAC","sourcesContent":["type DateTimeFormatterConfig = {\n  [name: string]: Intl.DateTimeFormatOptions;\n};\n\nconst _cache = new Map<string, Intl.DateTimeFormat>();\n\nfunction stringifyOptions(options: Intl.DateTimeFormatOptions) {\n  return Object.entries(options)\n    .map(([k, v]) => `${k}:${v}`)\n    .join('::');\n}\n\nfunction getFormatter(locale: string, options: Intl.DateTimeFormatOptions) {\n  const key = `${locale}#${stringifyOptions(options)}`;\n\n  if (!_cache.has(key)) {\n    _cache.set(key, new Intl.DateTimeFormat(locale, options));\n  }\n\n  return _cache.get(key)!;\n}\n\nclass DateTimeFormatters<T extends DateTimeFormatterConfig> {\n  private _formatters = new Map<keyof T, Intl.DateTimeFormat>();\n\n  private _update(configuration: T) {\n    for (const [key, value] of Object.entries(configuration)) {\n      this._formatters.set(key, getFormatter(this._locale, value));\n    }\n  }\n\n  constructor(\n    private _locale: string,\n    private _configuration: T\n  ) {\n    this._update(_configuration);\n  }\n\n  public get(name: keyof T) {\n    return this._formatters.get(name)!;\n  }\n\n  public get configuration() {\n    return { ...this._configuration };\n  }\n\n  public get locale() {\n    return this._locale;\n  }\n\n  public set locale(value: string) {\n    this._locale = value;\n    this._update(this._configuration);\n  }\n\n  public update(configuration: Partial<T>) {\n    this._update(Object.assign(this._configuration, configuration));\n  }\n}\n\nexport function createDateTimeFormatters<T extends DateTimeFormatterConfig>(\n  locale: string,\n  configuration: T\n) {\n  return new DateTimeFormatters(locale, configuration);\n}\n"]}