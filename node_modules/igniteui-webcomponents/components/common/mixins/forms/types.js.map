{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../src/components/common/mixins/forms/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Validator } from '../../validators.js';\n\nexport type FormRestoreMode = 'autocomplete' | 'restore';\nexport type FormValueType = string | File | FormData | null;\n\ndeclare class BaseFormAssociatedElement {\n  public static readonly formAssociated: boolean;\n\n  private __internals: ElementInternals;\n\n  // Properties\n\n  protected _dirty: boolean;\n  protected _disabled: boolean;\n  protected _invalid: boolean;\n\n  protected get __validators(): Validator[];\n\n  /**\n   * The disabled state of the component.\n   * @attr\n   * @default false\n   */\n  public disabled: boolean;\n\n  /**\n   * Control the validity of the control.\n   * @attr\n   * @default false\n   */\n  public invalid: boolean;\n\n  /**\n   * The name attribute of the control.\n   * @attr\n   */\n  public name: string;\n\n  /** Returns the HTMLFormElement associated with this element. */\n  public get form(): HTMLFormElement | null;\n\n  /**\n   * Returns a ValidityState object which represents the different validity states\n   * the element can be in, with respect to constraint validation.\n   */\n  public get validity(): ValidityState;\n\n  /** A string containing the validation message of this element. */\n  public get validationMessage(): string;\n\n  /**\n   * A boolean value which returns true if the element is a submittable element\n   * that is a candidate for constraint validation.\n   */\n  public get willValidate(): boolean;\n\n  // Methods\n\n  /**\n   * Invoked on the first `connectedCallback` run before the component has been through the\n   * firstUpdate lifecycle hook. Sets the default value to the **property** state of the value/checked member.\n   */\n  protected _setInitialDefaultValue(): void;\n\n  /**\n   * Sets the default value of the component.\n   * Called in `attributeChangedCallback`(i.e. when the `value` attribute of the control is set).\n   */\n  protected _setDefaultValue(prev: string | null, current: string | null): void;\n\n  /**\n   * Called when the associated parent form is reset.\n   */\n  protected _restoreDefaultValue(): void;\n\n  /**\n   * Executes the {@link BaseFormAssociatedElement._updateValidity | `_updateValidity()`} hook and then applies\n   * the {@link BaseFormAssociatedElement.invalid | `invalid`} attribute on the control and the associated styles\n   * if the element has completed the first update cycle or it has been interacted with by the user.\n   */\n  protected _validate(message?: string): void;\n\n  /**\n   * Executes the component's validators and updates the internal validity state.\n   */\n  protected _updateValidity(message?: string): void;\n\n  /**\n   * Sets the component's submission value and state.\n   */\n  protected _setFormValue(value: FormValueType, state?: FormValueType): void;\n\n  /**\n   * Called by the browser when it associates/disassociates the component with/from a given form element.\n   * Receives the form element as a parameter.\n   *\n   * @remarks\n   * This is not implemented currently.\n   */\n  protected formAssociatedCallback(form: HTMLFormElement): void;\n\n  /**\n   * Called whenever the component or a parent `fieldset` elements are disabled.\n   * Receives the current disabled state.\n   */\n  protected formDisabledCallback(state: boolean): void;\n\n  /**\n   * Called when the form is reset.\n   * Resets the component value/checked state to the default one, internal state and validation.\n   *\n   * @remarks\n   * The default implementation calls {@link BaseFormAssociatedElement._restoreDefaultValue | `_restoreDefaultValue`}.\n   * If additional customization is needed, it is better to override that method instead of this callback.\n   */\n  protected formResetCallback(): void;\n\n  /**\n   * Called when the browser attempts to automatically fill out the component.\n   *\n   * @remarks\n   * This is not implemented currently.\n   */\n  protected formStateRestoreCallback(\n    state: FormValueType,\n    mode: FormRestoreMode\n  ): void;\n\n  /** Checks for validity of the control and emits the invalid event if it invalid. */\n  public checkValidity(): boolean;\n\n  /** Checks for validity of the control and shows the browser message if it invalid. */\n  public reportValidity(): boolean;\n\n  /**\n   * Sets a custom validation message for the control.\n   * As long as `message` is not empty, the control is considered invalid.\n   */\n  public setCustomValidity(message: string): void;\n}\n\nexport declare class FormAssociatedElementInterface extends BaseFormAssociatedElement {\n  protected _defaultValue: unknown;\n}\n\nexport declare class FormAssociatedCheckboxElementInterface extends BaseFormAssociatedElement {\n  protected _defaultChecked: boolean;\n}\n\nexport declare class FormRequiredInterface {\n  protected _required: boolean;\n\n  /**\n   * When set, makes the component a required field for validation.\n   * @attr\n   * @default false\n   */\n  public set required(value: boolean);\n  public get required(): boolean;\n}\n"]}