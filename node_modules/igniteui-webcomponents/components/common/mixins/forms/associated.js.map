{"version":3,"file":"associated.js","sourceRoot":"","sources":["../../../../../src/components/common/mixins/forms/associated.ts"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAU7C,SAAS,kBAAkB,CAAoC,IAAO;IACpE,MAAM,yBAA0B,SAAQ,IAAI;QAS1C,IAAc,YAAY;YACxB,OAAO,EAAE,CAAC;QACZ,CAAC;QAeD,IAAW,QAAQ,CAAC,KAAc;YAChC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC5D,CAAC;QAED,IAAW,QAAQ;YACjB,OAAO,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;QAQD,IAAW,OAAO,CAAC,KAAc;YAC/B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1D,CAAC;QAED,IAAW,OAAO;YAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QAGD,IAAW,IAAI;YACb,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QAC/B,CAAC;QAMD,IAAW,QAAQ;YACjB,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;QACnC,CAAC;QAGD,IAAW,iBAAiB;YAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC;QAC5C,CAAC;QAMD,IAAW,YAAY;YACrB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;QACvC,CAAC;QAED,YAAY,GAAG,IAAW;YACxB,KAAK,CAAC,IAAI,CAAC,CAAC;YAxEJ,cAAS,GAAG,KAAK,CAAC;YAClB,aAAQ,GAAG,KAAK,CAAC;YACjB,WAAM,GAAG,KAAK,CAAC;YAuEvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAC1C,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACxD,CAAC;QAEe,iBAAiB;YAC/B,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,eAAe,EAAE,CAAC;YAEvB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACrB,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACjC,CAAC;QACH,CAAC;QAEO,cAAc,CAAC,KAAY;YACjC,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC;QAEO,gBAAgB;YACtB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBACnC,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACvC,CAAC;QACH,CAAC;QAGS,uBAAuB,KAAU,CAAC;QAGlC,gBAAgB,CACxB,KAAoB,EACpB,QAAuB,IAChB,CAAC;QAGA,oBAAoB,KAAU,CAAC;QAE/B,SAAS,CAAC,OAAgB;YAClC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAC9B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;QAES,eAAe,CAAC,OAAgB;YACxC,MAAM,QAAQ,GAAuB,EAAE,CAAC;YACxC,IAAI,iBAAiB,GAAG,EAAE,CAAC;YAE3B,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBAC1C,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAExC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;gBAEnC,IAAI,CAAC,OAAO,EAAE,CAAC;oBACb,iBAAiB;wBACf,OAAO,SAAS,CAAC,OAAO,KAAK,UAAU;4BACrC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC;4BACzB,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC;gBAC1B,CAAC;YACH,CAAC;YAED,IAAI,OAAO,EAAE,CAAC;gBACZ,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC5B,iBAAiB,GAAG,OAAO,CAAC;YAC9B,CAAC;YAED,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAC5D,CAAC;QAES,aAAa,CAAC,KAAoB,EAAE,KAAqB;YACjE,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAC;QAES,sBAAsB,CAAC,KAAsB,IAAS,CAAC;QAEvD,oBAAoB,CAAC,KAAc;YAC3C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;QAES,iBAAiB;YACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC;QAGS,wBAAwB,CAChC,MAAqB,EACrB,KAAsB,IACf,CAAC;QAGH,cAAc;YACnB,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;QAC3C,CAAC;QAGM,aAAa;YAClB,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;QAC1C,CAAC;QAMM,iBAAiB,CAAC,OAAe;YACtC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAC9B,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QACvC,CAAC;;IAzLsB,wCAAc,GAAG,IAAI,AAAP,CAAQ;IAiBtC;QADN,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;2DACP;IAQrB;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;6DAI1C;IAYD;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4DAI1C;IAgJH,OAAO,yBACJ,CAAC;AACN,CAAC;AAKD,MAAM,UAAU,mBAAmB,CACjC,IAAO;IAEP,MAAM,qBAAsB,SAAQ,kBAAkB,CAAC,IAAI,CAAC;QAG1C,wBAAwB,CACtC,IAAY,EACZ,IAAmB,EACnB,OAAsB;YAEtB,KAAK,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACpD,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;gBACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACvC,CAAC;QACH,CAAC;QAEkB,gBAAgB,CACjC,CAAgB,EAChB,OAAsB;YAEtB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC/B,CAAC;QAEkB,oBAAoB;YACrC,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;YAClC,CAAC;QACH,CAAC;QAEkB,uBAAuB;YACxC,IAAI,QAAQ,IAAI,IAAI,EAAE,CAAC;gBACrB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;YACnC,CAAC;QACH,CAAC;KACF;IAED,OAAO,qBACJ,CAAC;AACN,CAAC;AAKD,MAAM,UAAU,2BAA2B,CACzC,IAAO;IAEP,MAAM,6BAA8B,SAAQ,kBAAkB,CAAC,IAAI,CAAC;QAApE;;YACY,oBAAe,GAAG,KAAK,CAAC;QA+BpC,CAAC;QA7BiB,wBAAwB,CACtC,IAAY,EACZ,IAAmB,EACnB,OAAsB;YAEtB,KAAK,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACpD,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;gBACvB,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACvC,CAAC;QACH,CAAC;QAEkB,gBAAgB,CACjC,CAAgB,EAChB,OAAsB;YAEtB,IAAI,CAAC,eAAe,GAAG,OAAO,KAAK,IAAI,CAAC;QAC1C,CAAC;QAEkB,oBAAoB;YACrC,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;gBACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;YACtC,CAAC;QACH,CAAC;QAEkB,uBAAuB;YACxC,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;gBACtB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAkB,CAAC;YACjD,CAAC;QACH,CAAC;KACF;IAED,OAAO,6BACJ,CAAC;AACN,CAAC","sourcesContent":["import type { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport type { Validator } from '../../validators.js';\nimport type { Constructor } from '../constructor.js';\nimport type {\n  FormAssociatedCheckboxElementInterface,\n  FormAssociatedElementInterface,\n  FormRestoreMode,\n  FormValueType,\n} from './types.js';\n\nfunction BaseFormAssociated<T extends Constructor<LitElement>>(base: T) {\n  class BaseFormAssociatedElement extends base {\n    public static readonly formAssociated = true;\n\n    private __internals: ElementInternals;\n\n    protected _disabled = false;\n    protected _invalid = false;\n    protected _dirty = false;\n\n    protected get __validators(): Validator[] {\n      return [];\n    }\n\n    /**\n     * The name attribute of the control.\n     * @attr\n     */\n    @property({ reflect: true })\n    public name!: string;\n\n    /**\n     * The disabled state of the component.\n     * @attr\n     * @default false\n     */\n    @property({ type: Boolean, reflect: true })\n    public set disabled(value: boolean) {\n      this._disabled = value;\n      this.toggleAttribute('disabled', Boolean(this._disabled));\n    }\n\n    public get disabled(): boolean {\n      return this._disabled;\n    }\n\n    /**\n     * Control the validity of the control.\n     * @attr\n     * @default false\n     */\n    @property({ type: Boolean, reflect: true })\n    public set invalid(value: boolean) {\n      this._invalid = value;\n      this.toggleAttribute('invalid', Boolean(this._invalid));\n    }\n\n    public get invalid(): boolean {\n      return this._invalid;\n    }\n\n    /** Returns the HTMLFormElement associated with this element. */\n    public get form(): HTMLFormElement | null {\n      return this.__internals.form;\n    }\n\n    /**\n     * Returns a ValidityState object which represents the different validity states\n     * the element can be in, with respect to constraint validation.\n     */\n    public get validity(): ValidityState {\n      return this.__internals.validity;\n    }\n\n    /** A string containing the validation message of this element. */\n    public get validationMessage(): string {\n      return this.__internals.validationMessage;\n    }\n\n    /**\n     * A boolean value which returns true if the element is a submittable element\n     * that is a candidate for constraint validation.\n     */\n    public get willValidate(): boolean {\n      return this.__internals.willValidate;\n    }\n\n    constructor(...args: any[]) {\n      super(args);\n      this.__internals = this.attachInternals();\n      this.addEventListener('invalid', this._handleInvalid);\n    }\n\n    public override connectedCallback(): void {\n      super.connectedCallback();\n      this._dirty = false;\n      this._updateValidity();\n\n      if (!this.hasUpdated) {\n        this._setInitialDefaultValue();\n      }\n    }\n\n    private _handleInvalid(event: Event) {\n      event.preventDefault();\n      this.invalid = true;\n    }\n\n    private _setInvalidState(): void {\n      if (this.hasUpdated || this._dirty) {\n        this.invalid = !this.checkValidity();\n      }\n    }\n\n    /* c8 ignore next 1 */\n    protected _setInitialDefaultValue(): void {}\n\n    /* c8 ignore next 4 */\n    protected _setDefaultValue(\n      _prev: string | null,\n      _current: string | null\n    ): void {}\n\n    /* c8 ignore next 1 */\n    protected _restoreDefaultValue(): void {}\n\n    protected _validate(message?: string): void {\n      this._updateValidity(message);\n      this._setInvalidState();\n    }\n\n    protected _updateValidity(message?: string) {\n      const validity: ValidityStateFlags = {};\n      let validationMessage = '';\n\n      for (const validator of this.__validators) {\n        const isValid = validator.isValid(this);\n\n        validity[validator.key] = !isValid;\n\n        if (!isValid) {\n          validationMessage =\n            typeof validator.message === 'function'\n              ? validator.message(this)\n              : validator.message;\n        }\n      }\n\n      if (message) {\n        validity.customError = true;\n        validationMessage = message;\n      }\n\n      this.__internals.setValidity(validity, validationMessage);\n    }\n\n    protected _setFormValue(value: FormValueType, state?: FormValueType): void {\n      this.__internals.setFormValue(value, state);\n    }\n\n    protected formAssociatedCallback(_form: HTMLFormElement): void {}\n\n    protected formDisabledCallback(state: boolean): void {\n      this._disabled = state;\n      this.requestUpdate();\n    }\n\n    protected formResetCallback(): void {\n      this._restoreDefaultValue();\n      this._dirty = false;\n      this.performUpdate();\n      this.invalid = false;\n    }\n\n    /* c8 ignore next 4 */\n    protected formStateRestoreCallback(\n      _state: FormValueType,\n      _mode: FormRestoreMode\n    ): void {}\n\n    /** Checks for validity of the control and shows the browser message if it invalid. */\n    public reportValidity() {\n      return this.__internals.reportValidity();\n    }\n\n    /** Checks for validity of the control and emits the invalid event if it invalid. */\n    public checkValidity() {\n      return this.__internals.checkValidity();\n    }\n\n    /**\n     * Sets a custom validation message for the control.\n     * As long as `message` is not empty, the control is considered invalid.\n     */\n    public setCustomValidity(message: string) {\n      this._updateValidity(message);\n      this.invalid = !this.checkValidity();\n    }\n  }\n  return BaseFormAssociatedElement as Constructor<BaseFormAssociatedElement> &\n    T;\n}\n\n/**\n * Mixes the passed in class and turns it into a form associated custom element.\n */\nexport function FormAssociatedMixin<T extends Constructor<LitElement>>(\n  base: T\n) {\n  class FormAssociatedElement extends BaseFormAssociated(base) {\n    protected _defaultValue: unknown;\n\n    public override attributeChangedCallback(\n      name: string,\n      prev: string | null,\n      current: string | null\n    ): void {\n      super.attributeChangedCallback(name, prev, current);\n      if (name === 'value') {\n        this._setDefaultValue(prev, current);\n      }\n    }\n\n    protected override _setDefaultValue(\n      _: string | null,\n      current: string | null\n    ): void {\n      this._defaultValue = current;\n    }\n\n    protected override _restoreDefaultValue(): void {\n      if ('value' in this) {\n        this.value = this._defaultValue;\n      }\n    }\n\n    protected override _setInitialDefaultValue() {\n      if ('_value' in this) {\n        this._defaultValue = this._value;\n      }\n    }\n  }\n\n  return FormAssociatedElement as unknown as Constructor<FormAssociatedElementInterface> &\n    T;\n}\n\n/**\n * Mixes the passed in class and turns it into a form associated custom element.\n */\nexport function FormAssociatedCheckboxMixin<T extends Constructor<LitElement>>(\n  base: T\n) {\n  class FormAssociatedCheckboxElement extends BaseFormAssociated(base) {\n    protected _defaultChecked = false;\n\n    public override attributeChangedCallback(\n      name: string,\n      prev: string | null,\n      current: string | null\n    ): void {\n      super.attributeChangedCallback(name, prev, current);\n      if (name === 'checked') {\n        this._setDefaultValue(prev, current);\n      }\n    }\n\n    protected override _setDefaultValue(\n      _: string | null,\n      current: string | null\n    ): void {\n      this._defaultChecked = current !== null;\n    }\n\n    protected override _restoreDefaultValue(): void {\n      if ('checked' in this) {\n        this.checked = this._defaultChecked;\n      }\n    }\n\n    protected override _setInitialDefaultValue() {\n      if ('checked' in this) {\n        this._defaultChecked = this.checked as boolean;\n      }\n    }\n  }\n\n  return FormAssociatedCheckboxElement as unknown as Constructor<FormAssociatedCheckboxElementInterface> &\n    T;\n}\n"]}