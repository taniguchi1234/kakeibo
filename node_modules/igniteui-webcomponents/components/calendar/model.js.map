{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../src/components/calendar/model.ts"],"names":[],"mappings":"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","sourcesContent":["export type DayParameter = CalendarDay | Date;\n\nexport type CalendarRangeParams = {\n  start: DayParameter;\n  end: DayParameter | number;\n  unit?: DayInterval;\n};\n\ntype DayInterval = 'year' | 'quarter' | 'month' | 'week' | 'day';\n\ntype CalendarDayParams = {\n  year: number;\n  month: number;\n  date?: number;\n};\n\nexport const daysInWeek = 7;\nconst millisecondsInDay = 86400000;\n\nexport function toCalendarDay(date: DayParameter) {\n  return date instanceof Date ? CalendarDay.from(date) : date;\n}\n\nfunction checkRollover(original: CalendarDay, modified: CalendarDay) {\n  return original.date !== modified.date ? modified.set({ date: 0 }) : modified;\n}\n\n/* blazorSuppress */\nexport class CalendarDay {\n  private _date!: Date;\n\n  /** Constructs and returns the current day. */\n  public static get today() {\n    return CalendarDay.from(new Date());\n  }\n\n  /** Constructs a new CalendarDay instance from a Date object. */\n  public static from(date: Date) {\n    return new CalendarDay({\n      year: date.getFullYear(),\n      month: date.getMonth(),\n      date: date.getDate(),\n    });\n  }\n\n  constructor(args: CalendarDayParams) {\n    this._date = new Date(args.year, args.month, args.date ?? 1);\n  }\n\n  /** Returns a copy of this instance. */\n  public clone() {\n    return CalendarDay.from(this._date);\n  }\n\n  /**\n   * Returns a new instance with values replaced.\n   */\n  public set(args: Partial<CalendarDayParams>) {\n    return new CalendarDay({\n      year: args.year ?? this.year,\n      month: args.month ?? this.month,\n      date: args.date ?? this.date,\n    });\n  }\n\n  public add(unit: DayInterval, value: number) {\n    const result = this.clone();\n    switch (unit) {\n      case 'year':\n        result._date.setFullYear(result.year + value);\n        return checkRollover(this, result);\n      case 'quarter':\n        result._date.setMonth(result.month + 3 * value);\n        return checkRollover(this, result);\n      case 'month':\n        result._date.setMonth(result.month + value);\n        return checkRollover(this, result);\n      case 'week':\n        result._date.setDate(result.date + 7 * value);\n        return result;\n      case 'day':\n        result._date.setDate(result.date + value);\n        return result;\n      default:\n        throw new Error('Invalid interval');\n    }\n  }\n\n  /** Returns the day of the week (Sunday = 0). */\n  public get day() {\n    return this._date.getDay();\n  }\n\n  /** Returns the full year. */\n  public get year() {\n    return this._date.getFullYear();\n  }\n\n  /** Returns the month. */\n  public get month() {\n    return this._date.getMonth();\n  }\n\n  /** Returns the date */\n  public get date() {\n    return this._date.getDate();\n  }\n\n  /** Returns the timestamp since epoch in milliseconds. */\n  public get timestamp() {\n    return this._date.getTime();\n  }\n\n  /** Returns the current week number. */\n  public get week() {\n    const firstDay = new CalendarDay({ year: this.year, month: 0 }).timestamp;\n    const currentDay =\n      (this.timestamp - firstDay + millisecondsInDay) / millisecondsInDay;\n    return Math.ceil(currentDay / daysInWeek);\n  }\n\n  /** Returns the underlying native date instance. */\n  public get native() {\n    return new Date(this._date);\n  }\n\n  /**\n   * Whether the current date is a weekend day.\n   *\n   * @remarks\n   * This is naive, since it does not account for locale specifics.\n   */\n  public get weekend() {\n    return this.day < 1 || this.day > 5;\n  }\n\n  public equalTo(value: DayParameter) {\n    return this.timestamp === toCalendarDay(value).timestamp;\n  }\n\n  public greaterThan(value: DayParameter) {\n    return this.timestamp > toCalendarDay(value).timestamp;\n  }\n\n  public lessThan(value: DayParameter) {\n    return this.timestamp < toCalendarDay(value).timestamp;\n  }\n\n  public toString() {\n    return `${this.native}`;\n  }\n}\n"]}