import * as React from 'react';
import { TreeItem } from "./TreeItem";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The tree-item component represents a child item of the tree component or another tree item.
*/
export declare class IgrTreeItem<P extends IIgrTreeItemProps = IIgrTreeItemProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): TreeItem;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): TreeItem; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrTreeItem;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The parent item of the current tree item (if any)
    */
    get parent(): IgrTreeItem;
    set parent(v: IgrTreeItem);
    /**
     * The depth of the item, relative to the root.
    */
    get level(): number;
    set level(v: number);
    /**
     * The tree item label.
    */
    get label(): string;
    set label(v: string);
    /**
     * The tree item expansion state.
    */
    get expanded(): boolean;
    set expanded(v: boolean);
    /**
     * Marks the item as the tree's active item.
    */
    get active(): boolean;
    set active(v: boolean);
    /**
     * Get/Set whether the tree item is disabled. Disabled items are ignored for user interactions.
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * The tree item selection state.
    */
    get selected(): boolean;
    set selected(v: boolean);
    /**
     * To be used for load-on-demand scenarios in order to specify whether the item is loading data.
    */
    get loading(): boolean;
    set loading(v: boolean);
    /**
     * The value entry that the tree item is visualizing. Required for searching through items.
     * @type any
    */
    get value(): any;
    set value(v: any);
    /**
     * The full path to the tree item, starting from the top-most ancestor.
    */
    get path(): IgrTreeItem[];
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * @private
     * Expands the tree item.
    
    */
    expandWithEvent(): void;
    /**
     * @private
     * Collapses the tree item.
    
    */
    collapseWithEvent(): void;
    /**
     * Toggles tree item expansion state.
    
    */
    toggle(): void;
    /**
     * Expands the tree item.
    
    */
    expand(): void;
    /**
     * Collapses the tree item.
    
    */
    collapse(): void;
}
export interface IIgrTreeItemProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * The parent item of the current tree item (if any)
    */
    parent?: IgrTreeItem;
    /**
     * The depth of the item, relative to the root.
    */
    level?: number | string;
    /**
     * The tree item label.
    */
    label?: string;
    /**
     * The tree item expansion state.
    */
    expanded?: boolean | string;
    /**
     * Marks the item as the tree's active item.
    */
    active?: boolean | string;
    /**
     * Get/Set whether the tree item is disabled. Disabled items are ignored for user interactions.
    */
    disabled?: boolean | string;
    /**
     * The tree item selection state.
    */
    selected?: boolean | string;
    /**
     * To be used for load-on-demand scenarios in order to specify whether the item is loading data.
    */
    loading?: boolean | string;
    /**
     * The value entry that the tree item is visualizing. Required for searching through items.
     * @type any
    */
    value?: any;
}
