import * as React from 'react';
import { MaskInputValueMode } from "./MaskInputValueMode";
import { IgrComponentDataValueChangedEventArgs } from "./igr-component-data-value-changed-event-args";
import { IgrMaskInputBase, IIgrMaskInputBaseProps } from "./igr-mask-input-base";
import { MaskInput } from "./MaskInput";
/**
 * A masked input is an input field where a developer can control user input and format the visible value,
 * based on configurable rules
*/
export declare class IgrMaskInput extends IgrMaskInputBase<IIgrMaskInputProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrMaskInputProps>> {
    protected createImplementation(): MaskInput;
    /**
                                 * @hidden
                                 */
    get i(): MaskInput;
    constructor(props: IIgrMaskInputProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrMaskInputProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Dictates the behavior when retrieving the value of the control:
     * - `raw` will return the clean user input.
     * - `withFormatting` will return the value with all literals and prompts.
    */
    get valueMode(): MaskInputValueMode;
    set valueMode(v: MaskInputValueMode);
    get value(): string;
    set value(v: string);
    /**
     * The mask pattern to apply on the input.
    */
    get mask(): string;
    set mask(v: string);
    connectedCallback(): void;
    private _change;
    private _change_wrapped;
    get change(): (s: IgrMaskInput, e: IgrComponentDataValueChangedEventArgs) => void;
    set change(ev: (s: IgrMaskInput, e: IgrComponentDataValueChangedEventArgs) => void);
}
export interface IIgrMaskInputProps extends IIgrMaskInputBaseProps {
    /**
     * Dictates the behavior when retrieving the value of the control:
     * - `raw` will return the clean user input.
     * - `withFormatting` will return the value with all literals and prompts.
    */
    valueMode?: MaskInputValueMode | string;
    value?: string;
    /**
     * The mask pattern to apply on the input.
    */
    mask?: string;
    change?: (s: IgrMaskInput, e: IgrComponentDataValueChangedEventArgs) => void;
}
