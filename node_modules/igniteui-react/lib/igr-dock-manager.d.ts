import * as React from 'react';
import { IgrDockManagerLayout } from "./igr-dock-manager-layout";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { IgrDockManagerPoint } from "./igr-dock-manager-point";
import { IgrContentPane } from "./igr-content-pane";
import { DockManagerShowHeaderIconOnHover } from "./DockManagerShowHeaderIconOnHover";
import { IgrDockManagerResourceStrings } from "./igr-dock-manager-resource-strings";
import { DockManagerShowPaneHeaders } from "./DockManagerShowPaneHeaders";
import { IgrLayoutChangeEventArgs } from "./igr-layout-change-event-args";
import { DockManager } from "./DockManager";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Describes a Dock Manager component.
*/
export declare class IgrDockManager<P extends IIgrDockManagerProps = IIgrDockManagerProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): DockManager;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): DockManager; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrDockManager;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Gets/sets the layout configuration of the Dock Manager.
    */
    get layout(): IgrDockManagerLayout;
    set layout(v: IgrDockManagerLayout);
    /**
     * Gets/sets the currently dragged pane.
    */
    get draggedPane(): IgrDockManagerPane;
    set draggedPane(v: IgrDockManagerPane);
    /**
     * Gets/sets the current drop position when performing custom drag/drop.
    */
    get dropPosition(): IgrDockManagerPoint;
    set dropPosition(v: IgrDockManagerPoint);
    /**
     * Gets/sets the active pane of the Dock Manager.
    */
    get activePane(): IgrContentPane;
    set activePane(v: IgrContentPane);
    /**
     * Determines whether the end user is allowed to maximize panes. Defaults to true.
    */
    get allowMaximize(): boolean;
    set allowMaximize(v: boolean);
    /**
     * Determines whether the floating panes are kept inside the Dock Manager boundaries. Defaults to false.
    */
    get containedInBoundaries(): boolean;
    set containedInBoundaries(v: boolean);
    /**
     * Determines which tab header icons should show when hovering over the tab with the mouse. Defaults to undefined.
    */
    get showHeaderIconOnHover(): DockManagerShowHeaderIconOnHover;
    set showHeaderIconOnHover(v: DockManagerShowHeaderIconOnHover);
    /**
     * Gets/sets the maximized pane.
    */
    get maximizedPane(): IgrDockManagerPane;
    set maximizedPane(v: IgrDockManagerPane);
    /**
     * Gets/sets the resource strings.
    */
    get resourceStrings(): IgrDockManagerResourceStrings;
    set resourceStrings(v: IgrDockManagerResourceStrings);
    /**
     * Determines whether the end user is allowed to resize floating panes. Defaults to true.
    */
    get allowFloatingPanesResize(): boolean;
    set allowFloatingPanesResize(v: boolean);
    /**
     * Disables the built-in keyboard shortcuts for pane navigation. Defaults to false.
    */
    get disableKeyboardNavigation(): boolean;
    set disableKeyboardNavigation(v: boolean);
    /**
     * Determines whether the end user is allowed to inner dock panes. Defaults to true.
    */
    get allowInnerDock(): boolean;
    set allowInnerDock(v: boolean);
    /**
     * Determines whether pane headers are only shown on hover or always visible. Defaults to 'always'.
    */
    get showPaneHeaders(): DockManagerShowPaneHeaders;
    set showPaneHeaders(v: DockManagerShowPaneHeaders);
    /**
     * Determines whether the end user can dock the dragged pane by dragging it close to the target pane edges.
     * If enabled, docking indicators are not visible. Defaults to false.
    */
    get proximityDock(): boolean;
    set proximityDock(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Focuses a pane from the layout.
    
    */
    focusPane(contentId: string): void;
    private _layoutChange;
    private _layoutChange_wrapped;
    get layoutChange(): (s: IgrDockManager, e: IgrLayoutChangeEventArgs) => void;
    set layoutChange(ev: (s: IgrDockManager, e: IgrLayoutChangeEventArgs) => void);
}
export interface IIgrDockManagerProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Gets/sets the layout configuration of the Dock Manager.
    */
    layout?: IgrDockManagerLayout;
    /**
     * Gets/sets the currently dragged pane.
    */
    draggedPane?: IgrDockManagerPane;
    /**
     * Gets/sets the current drop position when performing custom drag/drop.
    */
    dropPosition?: IgrDockManagerPoint;
    /**
     * Gets/sets the active pane of the Dock Manager.
    */
    activePane?: IgrContentPane;
    /**
     * Determines whether the end user is allowed to maximize panes. Defaults to true.
    */
    allowMaximize?: boolean | string;
    /**
     * Determines whether the floating panes are kept inside the Dock Manager boundaries. Defaults to false.
    */
    containedInBoundaries?: boolean | string;
    /**
     * Determines which tab header icons should show when hovering over the tab with the mouse. Defaults to undefined.
    */
    showHeaderIconOnHover?: DockManagerShowHeaderIconOnHover | string;
    /**
     * Gets/sets the maximized pane.
    */
    maximizedPane?: IgrDockManagerPane;
    /**
     * Gets/sets the resource strings.
    */
    resourceStrings?: IgrDockManagerResourceStrings;
    /**
     * Determines whether the end user is allowed to resize floating panes. Defaults to true.
    */
    allowFloatingPanesResize?: boolean | string;
    /**
     * Disables the built-in keyboard shortcuts for pane navigation. Defaults to false.
    */
    disableKeyboardNavigation?: boolean | string;
    /**
     * Determines whether the end user is allowed to inner dock panes. Defaults to true.
    */
    allowInnerDock?: boolean | string;
    /**
     * Determines whether pane headers are only shown on hover or always visible. Defaults to 'always'.
    */
    showPaneHeaders?: DockManagerShowPaneHeaders | string;
    /**
     * Determines whether the end user can dock the dragged pane by dragging it close to the target pane edges.
     * If enabled, docking indicators are not visible. Defaults to false.
    */
    proximityDock?: boolean | string;
    layoutChange?: (s: IgrDockManager, e: IgrLayoutChangeEventArgs) => void;
}
