import * as React from 'react';
import { DropdownPlacement } from "./DropdownPlacement";
import { SelectScrollStrategy } from "./SelectScrollStrategy";
import { IgrSelectItem } from "./igr-select-item";
import { IgrSelectItemComponentEventArgs } from "./igr-select-item-component-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrFocusOptions } from "./igr-focus-options";
import { IgrBaseComboBoxLike, IIgrBaseComboBoxLikeProps } from "./igr-base-combo-box-like";
import { Select } from "./Select";
import { IgrSelectGroup } from "./igr-select-group";
/**
 * Represents a control that provides a menu of options.
*/
export declare class IgrSelect extends IgrBaseComboBoxLike<IIgrSelectProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrSelectProps>> {
    protected createImplementation(): Select;
    /**
                                 * @hidden
                                 */
    get i(): Select;
    constructor(props: IIgrSelectProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrSelectProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    get value(): string;
    set value(v: string);
    /**
     * The outlined attribute of the control.
    */
    get outlined(): boolean;
    set outlined(v: boolean);
    /**
     * The autofocus attribute of the control.
    */
    get autofocus(): boolean;
    set autofocus(v: boolean);
    /**
     * The distance of the select dropdown from its input.
    */
    get distance(): number;
    set distance(v: number);
    /**
     * The label attribute of the control.
    */
    get label(): string;
    set label(v: string);
    /**
     * The placeholder attribute of the control.
    */
    get placeholder(): string;
    set placeholder(v: string);
    /**
     * The preferred placement of the select dropdown around its input.
     * @type {'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'}
    */
    get placement(): DropdownPlacement;
    set placement(v: DropdownPlacement);
    /**
     * Determines the behavior of the component during scrolling of the parent container.
    */
    get scrollStrategy(): SelectScrollStrategy;
    set scrollStrategy(v: SelectScrollStrategy);
    /**
     * Returns the items of the igc-select component.
    */
    get items(): IgrSelectItem[];
    /**
     * Returns the groups of the igc-select component.
    */
    get groups(): IgrSelectGroup[];
    /**
     * Returns the selected item from the dropdown or null.
    */
    get selectedItem(): IgrSelectItem;
    /**
     * The disabled state of the component
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Makes the control a required field in a form context.
    */
    get required(): boolean;
    set required(v: boolean);
    /**
     * The name attribute of the control.
    */
    get name(): string;
    set name(v: string);
    /**
     * Control the validity of the control.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Sets focus on the component.
    
    */
    focusComponent(options: IgrFocusOptions): void;
    /**
     * Removes focus from the component.
    
    */
    blurComponent(): void;
    /**
     * Checks the validity of the control and moves the focus to it if it is not valid.
    
    */
    reportValidity(): void;
    /**
     * Resets the current value and selection of the component.
    
    */
    clearSelection(): void;
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message: string): void;
    private _change;
    private _change_wrapped;
    get change(): (s: IgrSelect, e: IgrSelectItemComponentEventArgs) => void;
    set change(ev: (s: IgrSelect, e: IgrSelectItemComponentEventArgs) => void);
    private _focus;
    private _focus_wrapped;
    get focus(): (s: IgrSelect, e: IgrVoidEventArgs) => void;
    set focus(ev: (s: IgrSelect, e: IgrVoidEventArgs) => void);
    private _blur;
    private _blur_wrapped;
    get blur(): (s: IgrSelect, e: IgrVoidEventArgs) => void;
    set blur(ev: (s: IgrSelect, e: IgrVoidEventArgs) => void);
    private _opening;
    private _opening_wrapped;
    get opening(): (s: IgrSelect, e: IgrVoidEventArgs) => void;
    set opening(ev: (s: IgrSelect, e: IgrVoidEventArgs) => void);
    private _opened;
    private _opened_wrapped;
    get opened(): (s: IgrSelect, e: IgrVoidEventArgs) => void;
    set opened(ev: (s: IgrSelect, e: IgrVoidEventArgs) => void);
    private _closing;
    private _closing_wrapped;
    get closing(): (s: IgrSelect, e: IgrVoidEventArgs) => void;
    set closing(ev: (s: IgrSelect, e: IgrVoidEventArgs) => void);
    private _closed;
    private _closed_wrapped;
    get closed(): (s: IgrSelect, e: IgrVoidEventArgs) => void;
    set closed(ev: (s: IgrSelect, e: IgrVoidEventArgs) => void);
}
export interface IIgrSelectProps extends IIgrBaseComboBoxLikeProps {
    value?: string;
    /**
     * The outlined attribute of the control.
    */
    outlined?: boolean | string;
    /**
     * The autofocus attribute of the control.
    */
    autofocus?: boolean | string;
    /**
     * The distance of the select dropdown from its input.
    */
    distance?: number | string;
    /**
     * The label attribute of the control.
    */
    label?: string;
    /**
     * The placeholder attribute of the control.
    */
    placeholder?: string;
    /**
     * The preferred placement of the select dropdown around its input.
     * @type {'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'}
    */
    placement?: DropdownPlacement | string;
    /**
     * Determines the behavior of the component during scrolling of the parent container.
    */
    scrollStrategy?: SelectScrollStrategy | string;
    /**
     * The disabled state of the component
    */
    disabled?: boolean | string;
    /**
     * Makes the control a required field in a form context.
    */
    required?: boolean | string;
    /**
     * The name attribute of the control.
    */
    name?: string;
    /**
     * Control the validity of the control.
    */
    invalid?: boolean | string;
    change?: (s: IgrSelect, e: IgrSelectItemComponentEventArgs) => void;
    focus?: (s: IgrSelect, e: IgrVoidEventArgs) => void;
    blur?: (s: IgrSelect, e: IgrVoidEventArgs) => void;
    opening?: (s: IgrSelect, e: IgrVoidEventArgs) => void;
    opened?: (s: IgrSelect, e: IgrVoidEventArgs) => void;
    closing?: (s: IgrSelect, e: IgrVoidEventArgs) => void;
    closed?: (s: IgrSelect, e: IgrVoidEventArgs) => void;
}
