import * as React from 'react';
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { Banner } from "./Banner";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The `igc-banner` component displays important and concise message(s) for a user to address, that is specific to a page or feature.
*/
export declare class IgrBanner<P extends IIgrBannerProps = IIgrBannerProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Banner;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Banner; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrBanner;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Determines whether the banner is being shown/hidden.
    */
    get open(): boolean;
    set open(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Shows the banner if not already shown. Returns `true` when the animation has completed.
    
    */
    show(): boolean;
    /**
     * Hides the banner if not already hidden. Returns `true` when the animation has completed.
    
    */
    hide(): boolean;
    /**
     * Toggles between shown/hidden state. Returns `true` when the animation has completed.
    
    */
    toggle(): boolean;
    private _closing;
    private _closing_wrapped;
    get closing(): (s: IgrBanner, e: IgrVoidEventArgs) => void;
    set closing(ev: (s: IgrBanner, e: IgrVoidEventArgs) => void);
    private _closed;
    private _closed_wrapped;
    get closed(): (s: IgrBanner, e: IgrVoidEventArgs) => void;
    set closed(ev: (s: IgrBanner, e: IgrVoidEventArgs) => void);
}
export interface IIgrBannerProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Determines whether the banner is being shown/hidden.
    */
    open?: boolean | string;
    closing?: (s: IgrBanner, e: IgrVoidEventArgs) => void;
    closed?: (s: IgrBanner, e: IgrVoidEventArgs) => void;
}
