import * as React from 'react';
import { StepType } from "./StepType";
import { StepDirection } from "./StepDirection";
import { Step } from "./Step";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The step component is used within the `igc-stepper` element and it holds the content of each step.
 * It also supports custom indicators, title and subtitle.
*/
export declare class IgrStep<P extends IIgrStepProps = IIgrStepProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Step;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Step; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrStep;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Gets/sets whether the step is invalid.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    /**
     * Gets/sets whether the step is activе.
    */
    get active(): boolean;
    set active(v: boolean);
    /**
     * Gets/sets whether the step is optional.
     * @remarks
     * Optional steps validity does not affect the default behavior when the stepper is in linear mode i.e.
     * if optional step is invalid the user could still move to the next step.
    */
    get optional(): boolean;
    set optional(v: boolean);
    /**
     * Gets/sets whether the step is interactable.
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Gets/sets whether the step is completed.
     * @remarks
     * When set to `true` the following separator is styled `solid`.
    */
    get complete(): boolean;
    set complete(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    toggleAnimation(type: StepType, direction: StepDirection): void;
}
export interface IIgrStepProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Gets/sets whether the step is invalid.
    */
    invalid?: boolean | string;
    /**
     * Gets/sets whether the step is activе.
    */
    active?: boolean | string;
    /**
     * Gets/sets whether the step is optional.
     * @remarks
     * Optional steps validity does not affect the default behavior when the stepper is in linear mode i.e.
     * if optional step is invalid the user could still move to the next step.
    */
    optional?: boolean | string;
    /**
     * Gets/sets whether the step is interactable.
    */
    disabled?: boolean | string;
    /**
     * Gets/sets whether the step is completed.
     * @remarks
     * When set to `true` the following separator is styled `solid`.
    */
    complete?: boolean | string;
}
