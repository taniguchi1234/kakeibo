import * as React from 'react';
import { ButtonBaseType } from "./ButtonBaseType";
import { ButtonBaseTarget } from "./ButtonBaseTarget";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrFocusOptions } from "./igr-focus-options";
import { ButtonBase } from "./ButtonBase";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
export declare abstract class IgrButtonBase<P extends IIgrButtonBaseProps = IIgrButtonBaseProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): ButtonBase;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): ButtonBase; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrButtonBase;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
     * The type of the button. Defaults to `button`.
    */
    get type(): ButtonBaseType;
    set type(v: ButtonBaseType);
    /**
     * The URL the button points to.
    */
    get href(): string;
    set href(v: string);
    /**
     * Prompts to save the linked URL instead of navigating to it.
    */
    get download(): string;
    set download(v: string);
    /**
     * Where to display the linked URL, as the name for a browsing context.
    */
    get target(): ButtonBaseTarget;
    set target(v: ButtonBaseTarget);
    /**
     * The relationship of the linked URL.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types
    */
    get rel(): string;
    set rel(v: string);
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Returns the HTMLFormElement associated with this element.
    */
    get form(): any;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Sets focus in the button.
    
    */
    focusComponent(options: IgrFocusOptions): void;
    /**
     * Simulates a mouse click on the element
    
    */
    click(): void;
    /**
     * Removes focus from the button.
    
    */
    blurComponent(): void;
    private _clicked;
    private _clicked_wrapped;
    get clicked(): (s: IgrButtonBase, e: IgrVoidEventArgs) => void;
    set clicked(ev: (s: IgrButtonBase, e: IgrVoidEventArgs) => void);
    private _focus;
    private _focus_wrapped;
    get focus(): (s: IgrButtonBase, e: IgrVoidEventArgs) => void;
    set focus(ev: (s: IgrButtonBase, e: IgrVoidEventArgs) => void);
    private _blur;
    private _blur_wrapped;
    get blur(): (s: IgrButtonBase, e: IgrVoidEventArgs) => void;
    set blur(ev: (s: IgrButtonBase, e: IgrVoidEventArgs) => void);
}
export interface IIgrButtonBaseProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * The type of the button. Defaults to `button`.
    */
    type?: ButtonBaseType | string;
    /**
     * The URL the button points to.
    */
    href?: string;
    /**
     * Prompts to save the linked URL instead of navigating to it.
    */
    download?: string;
    /**
     * Where to display the linked URL, as the name for a browsing context.
    */
    target?: ButtonBaseTarget | string;
    /**
     * The relationship of the linked URL.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types
    */
    rel?: string;
    disabled?: boolean | string;
    clicked?: (s: IgrButtonBase, e: IgrVoidEventArgs) => void;
    focus?: (s: IgrButtonBase, e: IgrVoidEventArgs) => void;
    blur?: (s: IgrButtonBase, e: IgrVoidEventArgs) => void;
}
