import * as React from 'react';
import { IgrNumberEventArgs } from "./igr-number-event-args";
import { IgrSliderBase, IIgrSliderBaseProps } from "./igr-slider-base";
import { Slider } from "./Slider";
/**
 * A slider component used to select numeric value within a range.
*/
export declare class IgrSlider extends IgrSliderBase<IIgrSliderProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrSliderProps>> {
    protected createImplementation(): Slider;
    /**
                                 * @hidden
                                 */
    get i(): Slider;
    constructor(props: IIgrSliderProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrSliderProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The current value of the component.
    */
    get value(): number;
    set value(v: number);
    /**
     * The name attribute of the control.
    */
    get name(): string;
    set name(v: string);
    /**
     * Control the validity of the control.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    /**
     * Increments the value of the slider by `stepIncrement * step`, where `stepIncrement` defaults to 1.
     * stepIncrement Optional step increment. If no parameter is passed, it defaults to 1.
    
    * @param stepIncrement  * Optional step increment. If no parameter is passed, it defaults to 1.
    */
    stepUp(stepIncrement?: number): void;
    /**
     * Decrements the value of the slider by `stepDecrement * step`, where `stepDecrement` defaults to 1.
     * stepDecrement Optional step decrement. If no parameter is passed, it defaults to 1.
    
    * @param stepDecrement  * Optional step decrement. If no parameter is passed, it defaults to 1.
    */
    stepDown(stepDecrement?: number): void;
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity(): void;
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message: string): void;
    private _input;
    private _input_wrapped;
    /**
     * Emitted when a value is changed via thumb drag or keyboard interaction.
    */
    get input(): (s: IgrSlider, e: IgrNumberEventArgs) => void;
    set input(ev: (s: IgrSlider, e: IgrNumberEventArgs) => void);
    private _change;
    private _change_wrapped;
    /**
     * Emitted when a value change is committed on a thumb drag end or keyboard interaction.
    */
    get change(): (s: IgrSlider, e: IgrNumberEventArgs) => void;
    set change(ev: (s: IgrSlider, e: IgrNumberEventArgs) => void);
}
export interface IIgrSliderProps extends IIgrSliderBaseProps {
    /**
     * The current value of the component.
    */
    value?: number | string;
    /**
     * The name attribute of the control.
    */
    name?: string;
    /**
     * Control the validity of the control.
    */
    invalid?: boolean | string;
    /**
     * Emitted when a value is changed via thumb drag or keyboard interaction.
    */
    input?: (s: IgrSlider, e: IgrNumberEventArgs) => void;
    /**
     * Emitted when a value change is committed on a thumb drag end or keyboard interaction.
    */
    change?: (s: IgrSlider, e: IgrNumberEventArgs) => void;
}
