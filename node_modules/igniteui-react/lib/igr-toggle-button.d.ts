import * as React from 'react';
import { IgrFocusOptions } from "./igr-focus-options";
import { ToggleButton } from "./ToggleButton";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The `igc-toggle-button` wraps a native button element and exposes additional `value` and `selected` properties.
 * It is used in the context of an `igc-button-group` to facilitate the creation of group/toolbar like UX behaviors.
*/
export declare class IgrToggleButton<P extends IIgrToggleButtonProps = IIgrToggleButtonProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): ToggleButton;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): ToggleButton; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrToggleButton;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The value attribute of the control.
    */
    get value(): string;
    set value(v: string);
    /**
     * Determines whether the button is selected.
    */
    get selected(): boolean;
    set selected(v: boolean);
    /**
     * Determines whether the button is disabled.
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Sets focus on the button.
    
    */
    focusComponent(options: IgrFocusOptions): void;
    /**
     * Removes focus from the button.
    
    */
    blurComponent(): void;
    /**
     * Simulates a mouse click on the element.
    
    */
    click(): void;
}
export interface IIgrToggleButtonProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * The value attribute of the control.
    */
    value?: string;
    /**
     * Determines whether the button is selected.
    */
    selected?: boolean | string;
    /**
     * Determines whether the button is disabled.
    */
    disabled?: boolean | string;
}
