import * as React from 'react';
import { DividerType } from "./DividerType";
import { Divider } from "./Divider";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The igc-divider allows the content author to easily create a horizontal/vertical rule as a break between content to better organize information on a page.
 * @cssproperty --color - Sets the color of the divider.
 * @cssproperty --inset - Shrinks the divider by the given amount from the start. If `middle` is set it will shrink from both sides.
*/
export declare class IgrDivider<P extends IIgrDividerProps = IIgrDividerProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Divider;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Divider; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrDivider;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Whether to render a vertical divider line.
    */
    get vertical(): boolean;
    set vertical(v: boolean);
    /**
     * When set and inset is provided, it will shrink the divider line from both sides.
    */
    get middle(): boolean;
    set middle(v: boolean);
    /**
     * Whether to render a solid or a dashed divider line.
    */
    get type(): DividerType;
    set type(v: DividerType);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
}
export interface IIgrDividerProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Whether to render a vertical divider line.
    */
    vertical?: boolean | string;
    /**
     * When set and inset is provided, it will shrink the divider line from both sides.
    */
    middle?: boolean | string;
    /**
     * Whether to render a solid or a dashed divider line.
    */
    type?: DividerType | string;
}
