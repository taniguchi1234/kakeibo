import * as React from 'react';
import { ExpansionPanelIndicatorPosition } from "./ExpansionPanelIndicatorPosition";
import { IgrExpansionPanelComponentEventArgs } from "./igr-expansion-panel-component-event-args";
import { ExpansionPanel } from "./ExpansionPanel";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The Expansion Panel Component provides a way to display information in a toggleable way -
 * compact summary view containing title and description and expanded detail view containing
 * additional content to the summary header.
*/
export declare class IgrExpansionPanel<P extends IIgrExpansionPanelProps = IIgrExpansionPanelProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): ExpansionPanel;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): ExpansionPanel; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrExpansionPanel;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Indicates whether the contents of the control should be visible.
    */
    get open(): boolean;
    set open(v: boolean);
    /**
     * Get/Set whether the expansion panel is disabled. Disabled panels are ignored for user interactions.
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * The indicator position of the expansion panel.
    */
    get indicatorPosition(): ExpansionPanelIndicatorPosition;
    set indicatorPosition(v: ExpansionPanelIndicatorPosition);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
    /**
     * Toggles the panel open/close state.
    
    */
    toggle(): boolean;
    /**
     * Hides the panel content.
    
    */
    hide(): boolean;
    /**
     * Shows the panel content.
    
    */
    show(): boolean;
    private _opening;
    private _opening_wrapped;
    get opening(): (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void;
    set opening(ev: (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void);
    private _opened;
    private _opened_wrapped;
    get opened(): (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void;
    set opened(ev: (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void);
    private _closing;
    private _closing_wrapped;
    get closing(): (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void;
    set closing(ev: (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void);
    private _closed;
    private _closed_wrapped;
    get closed(): (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void;
    set closed(ev: (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void);
}
export interface IIgrExpansionPanelProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Indicates whether the contents of the control should be visible.
    */
    open?: boolean | string;
    /**
     * Get/Set whether the expansion panel is disabled. Disabled panels are ignored for user interactions.
    */
    disabled?: boolean | string;
    /**
     * The indicator position of the expansion panel.
    */
    indicatorPosition?: ExpansionPanelIndicatorPosition | string;
    opening?: (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void;
    opened?: (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void;
    closing?: (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void;
    closed?: (s: IgrExpansionPanel, e: IgrExpansionPanelComponentEventArgs) => void;
}
