import * as React from 'react';
import { IgrDatePartDeltas } from "./igr-date-part-deltas";
import { IgrComponentDateValueChangedEventArgs } from "./igr-component-date-value-changed-event-args";
import { DatePart } from "./DatePart";
import { IgrMaskInputBase, IIgrMaskInputBaseProps } from "./igr-mask-input-base";
import { DateTimeInput } from "./DateTimeInput";
/**
 * A date time input is an input field that lets you set and edit the date and time in a chosen input element
 * using customizable display and input formats.
*/
export declare class IgrDateTimeInput extends IgrMaskInputBase<IIgrDateTimeInputProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrDateTimeInputProps>> {
    protected createImplementation(): DateTimeInput;
    /**
                                 * @hidden
                                 */
    get i(): DateTimeInput;
    constructor(props: IIgrDateTimeInputProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrDateTimeInputProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    get inputFormat(): string;
    set inputFormat(v: string);
    /**
     * The value of the input.
    */
    get value(): Date;
    set value(v: Date);
    /**
     * The minimum value required for the input to remain valid.
    */
    get min(): Date;
    set min(v: Date);
    /**
     * The maximum value required for the input to remain valid.
    */
    get max(): Date;
    set max(v: Date);
    /**
     * Format to display the value in when not editing.
     * Defaults to the input format if not set.
    */
    get displayFormat(): string;
    set displayFormat(v: string);
    /**
     * Delta values used to increment or decrement each date part on step actions.
     * All values default to `1`.
    */
    get spinDelta(): IgrDatePartDeltas;
    set spinDelta(v: IgrDatePartDeltas);
    /**
     * Sets whether to loop over the currently spun segment.
    */
    get spinLoop(): boolean;
    set spinLoop(v: boolean);
    /**
     * The locale settings used to display the value.
    */
    get locale(): string;
    set locale(v: string);
    findByName(name: string): any;
    connectedCallback(): void;
    stepUp(datePart: DatePart, delta?: number): void;
    stepDown(datePart: DatePart, delta?: number): void;
    /**
     * Clears the input element of user input.
    
    */
    clear(): void;
    private _change;
    private _change_wrapped;
    get change(): (s: IgrDateTimeInput, e: IgrComponentDateValueChangedEventArgs) => void;
    set change(ev: (s: IgrDateTimeInput, e: IgrComponentDateValueChangedEventArgs) => void);
}
export interface IIgrDateTimeInputProps extends IIgrMaskInputBaseProps {
    inputFormat?: string;
    /**
     * The value of the input.
    */
    value?: Date;
    /**
     * The minimum value required for the input to remain valid.
    */
    min?: Date;
    /**
     * The maximum value required for the input to remain valid.
    */
    max?: Date;
    /**
     * Format to display the value in when not editing.
     * Defaults to the input format if not set.
    */
    displayFormat?: string;
    /**
     * Delta values used to increment or decrement each date part on step actions.
     * All values default to `1`.
    */
    spinDelta?: IgrDatePartDeltas;
    /**
     * Sets whether to loop over the currently spun segment.
    */
    spinLoop?: boolean | string;
    /**
     * The locale settings used to display the value.
    */
    locale?: string;
    change?: (s: IgrDateTimeInput, e: IgrComponentDateValueChangedEventArgs) => void;
}
