import * as React from 'react';
import { InputType } from "./InputType";
import { IgrComponentDataValueChangedEventArgs } from "./igr-component-data-value-changed-event-args";
import { IgrInputBase, IIgrInputBaseProps } from "./igr-input-base";
import { Input } from "./Input";
/**

*/
export declare class IgrInput extends IgrInputBase<IIgrInputProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrInputProps>> {
    protected createImplementation(): Input;
    /**
                                 * @hidden
                                 */
    get i(): Input;
    constructor(props: IIgrInputProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrInputProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The value of the control.
    */
    get value(): string;
    set value(v: string);
    /**
     * The type attribute of the control.
    */
    get type(): InputType;
    set type(v: InputType);
    /**
     * The input mode attribute of the control.
     * See [relevant MDN article](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
    */
    get inputMode(): string;
    set inputMode(v: string);
    /**
     * The pattern attribute of the control.
    */
    get pattern(): string;
    set pattern(v: string);
    /**
     * The minimum string length required by the control.
    */
    get minLength(): number;
    set minLength(v: number);
    /**
     * The maximum string length of the control.
    */
    get maxLength(): number;
    set maxLength(v: number);
    /**
     * The min attribute of the control.
    */
    get min(): string;
    set min(v: string);
    /**
     * The max attribute of the control.
    */
    get max(): string;
    set max(v: string);
    /**
     * The step attribute of the control.
    */
    get step(): number;
    set step(v: number);
    /**
     * The autofocus attribute of the control.
    */
    get autofocus(): boolean;
    set autofocus(v: boolean);
    /**
     * The autocomplete attribute of the control.
    */
    get autocomplete(): string;
    set autocomplete(v: string);
    /**
     * Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property for
     * string-type inputs or allows spin buttons to exceed the predefined `min/max` limits for number-type inputs.
    */
    get validateOnly(): boolean;
    set validateOnly(v: boolean);
    /**
     * Selects all text within the input.
    
    */
    select(): void;
    /**
     * Increments the numeric value of the input by one or more steps.
    
    */
    stepUp(n?: number): void;
    /**
     * Decrements the numeric value of the input by one or more steps.
    
    */
    stepDown(n?: number): void;
    private _change;
    private _change_wrapped;
    get change(): (s: IgrInput, e: IgrComponentDataValueChangedEventArgs) => void;
    set change(ev: (s: IgrInput, e: IgrComponentDataValueChangedEventArgs) => void);
}
export interface IIgrInputProps extends IIgrInputBaseProps {
    /**
     * The value of the control.
    */
    value?: string;
    /**
     * The type attribute of the control.
    */
    type?: InputType | string;
    /**
     * The input mode attribute of the control.
     * See [relevant MDN article](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
    */
    inputMode?: string;
    /**
     * The pattern attribute of the control.
    */
    pattern?: string;
    /**
     * The minimum string length required by the control.
    */
    minLength?: number | string;
    /**
     * The maximum string length of the control.
    */
    maxLength?: number | string;
    /**
     * The min attribute of the control.
    */
    min?: string;
    /**
     * The max attribute of the control.
    */
    max?: string;
    /**
     * The step attribute of the control.
    */
    step?: number | string;
    /**
     * The autofocus attribute of the control.
    */
    autofocus?: boolean | string;
    /**
     * The autocomplete attribute of the control.
    */
    autocomplete?: string;
    /**
     * Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property for
     * string-type inputs or allows spin buttons to exceed the predefined `min/max` limits for number-type inputs.
    */
    validateOnly?: boolean | string;
    change?: (s: IgrInput, e: IgrComponentDataValueChangedEventArgs) => void;
}
