import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { Type } from "igniteui-react-core";
import { TextareaAutocapitalize } from "./TextareaAutocapitalize";
import { TextareaInputMode } from "./TextareaInputMode";
import { TextareaResize } from "./TextareaResize";
import { TextareaWrap } from "./TextareaWrap";
import { ComponentValueChangedEventArgs } from "./ComponentValueChangedEventArgs";
import { VoidEventArgs } from "./VoidEventArgs";
import { SelectionRangeDirection } from "./SelectionRangeDirection";
import { RangeTextSelectMode } from "./RangeTextSelectMode";
/**
 * @hidden
 */
export declare class Textarea extends BaseElement {
    static $t: Type;
    private i;
    protected get j(): WCNativeHelper;
    private u;
    protected get nativeElement(): any;
    protected set nativeElement(a: any);
    setNativeElement(a: any): void;
    get w(): string;
    set w(a: string);
    get c(): TextareaAutocapitalize;
    set c(a: TextareaAutocapitalize);
    get d(): TextareaInputMode;
    set d(a: TextareaInputMode);
    get x(): string;
    set x(a: string);
    get r(): number;
    set r(a: number);
    get s(): number;
    set s(a: number);
    get m(): boolean;
    set m(a: boolean);
    get z(): string;
    set z(a: string);
    get n(): boolean;
    set n(a: boolean);
    get e(): TextareaResize;
    set e(a: TextareaResize);
    get t(): number;
    set t(a: number);
    get aa(): string;
    set aa(a: string);
    get p(): boolean;
    set p(a: boolean);
    get f(): TextareaWrap;
    set f(a: TextareaWrap);
    get q(): boolean;
    set q(a: boolean);
    get k(): boolean;
    set k(a: boolean);
    get o(): boolean;
    set o(a: boolean);
    get y(): string;
    set y(a: string);
    get l(): boolean;
    set l(a: boolean);
    input: (sender: any, args: ComponentValueChangedEventArgs) => void;
    inputChanged(): void;
    change: (sender: any, args: ComponentValueChangedEventArgs) => void;
    changeChanged(): void;
    focus: (sender: any, args: VoidEventArgs) => void;
    focusChanged(): void;
    blur: (sender: any, args: VoidEventArgs) => void;
    blurChanged(): void;
    ae(): void;
    af(): void;
    aj(): void;
    an(a: number, b: number, c: SelectionRangeDirection): void;
    am(a: string, b: number, c: number, d: RangeTextSelectMode): void;
    ai(): void;
    ad(): void;
    ak(a: string): void;
}
