import * as React from 'react';
import { IconButtonVariant } from "./IconButtonVariant";
import { IgrButtonBase, IIgrButtonBaseProps } from "./igr-button-base";
import { IconButton } from "./IconButton";
/**

*/
export declare class IgrIconButton extends IgrButtonBase<IIgrIconButtonProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrIconButtonProps>> {
    protected createImplementation(): IconButton;
    /**
                                 * @hidden
                                 */
    get i(): IconButton;
    constructor(props: IIgrIconButtonProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrIconButtonProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The name of the icon.
    */
    get name(): string;
    set name(v: string);
    /**
     * The name of the icon collection.
    */
    get collection(): string;
    set collection(v: string);
    /**
     * Whether to flip the icon button. Useful for RTL layouts.
    */
    get mirrored(): boolean;
    set mirrored(v: boolean);
    /**
     * The visual variant of the icon button.
    */
    get variant(): IconButtonVariant;
    set variant(v: IconButtonVariant);
    registerIcon(name: string, url: string, collection: string): void;
    registerIconFromText(name: string, iconText: string, collection: string): void;
}
export interface IIgrIconButtonProps extends IIgrButtonBaseProps {
    /**
     * The name of the icon.
    */
    name?: string;
    /**
     * The name of the icon collection.
    */
    collection?: string;
    /**
     * Whether to flip the icon button. Useful for RTL layouts.
    */
    mirrored?: boolean | string;
    /**
     * The visual variant of the icon button.
    */
    variant?: IconButtonVariant | string;
}
