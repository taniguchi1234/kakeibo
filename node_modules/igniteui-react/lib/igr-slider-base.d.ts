import * as React from 'react';
import { SliderBaseTickOrientation } from "./SliderBaseTickOrientation";
import { TickLabelRotation } from "./TickLabelRotation";
import { NumberFormatOptions } from "./NumberFormatOptions";
import { SliderBase } from "./SliderBase";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
export declare class IgrSliderBase<P extends IIgrSliderBaseProps = IIgrSliderBaseProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): SliderBase;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): SliderBase; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrSliderBase;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The minimum value of the slider scale. Defaults to 0.
     * If `min` is greater than `max` the call is a no-op.
     * If `labels` are provided (projected), then `min` is always set to 0.
     * If `lowerBound` ends up being less than than the current `min` value,
     * it is automatically assigned the new `min` value.
    */
    get min(): number;
    set min(v: number);
    /**
     * The maximum value of the slider scale. Defaults to 100.
     * If `max` is less than `min` the call is a no-op.
     * If `labels` are provided (projected), then `max` is always set to
     * the number of labels.
     * If `upperBound` ends up being greater than than the current `max` value,
     * it is automatically assigned the new `max` value.
    */
    get max(): number;
    set max(v: number);
    /**
     * The lower bound of the slider value. If not set, the `min` value is applied.
    */
    get lowerBound(): number;
    set lowerBound(v: number);
    /**
     * The upper bound of the slider value. If not set, the `max` value is applied.
    */
    get upperBound(): number;
    set upperBound(v: number);
    /**
     * Disables the UI interactions of the slider.
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Marks the slider track as discrete so it displays the steps.
     * If the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.
    */
    get discreteTrack(): boolean;
    set discreteTrack(v: boolean);
    /**
     * Hides the thumb tooltip.
    */
    get hideTooltip(): boolean;
    set hideTooltip(v: boolean);
    /**
     * Specifies the granularity that the value must adhere to.
     * If set to 0 no stepping is implied and any value in the range is allowed.
     * If `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.
    */
    get step(): number;
    set step(v: number);
    /**
     * The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.
    */
    get primaryTicks(): number;
    set primaryTicks(v: number);
    /**
     * The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.
    */
    get secondaryTicks(): number;
    set secondaryTicks(v: number);
    /**
     * Changes the orientation of the ticks.
    */
    get tickOrientation(): SliderBaseTickOrientation;
    set tickOrientation(v: SliderBaseTickOrientation);
    /**
     * Hides the primary tick labels.
    */
    get hidePrimaryLabels(): boolean;
    set hidePrimaryLabels(v: boolean);
    /**
     * Hides the secondary tick labels.
    */
    get hideSecondaryLabels(): boolean;
    set hideSecondaryLabels(v: boolean);
    /**
     * The locale used to format the thumb and tick label values in the slider.
    */
    get locale(): string;
    set locale(v: string);
    /**
     * String format used for the thumb and tick label values in the slider.
    */
    get valueFormat(): string;
    set valueFormat(v: string);
    /**
     * The degrees for the rotation of the tick labels. Defaults to 0.
    */
    get tickLabelRotation(): TickLabelRotation;
    set tickLabelRotation(v: TickLabelRotation);
    /**
     * Number format options used for the thumb and tick label values in the slider.
    */
    get valueFormatOptions(): NumberFormatOptions;
    set valueFormatOptions(v: NumberFormatOptions);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
}
export interface IIgrSliderBaseProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * The minimum value of the slider scale. Defaults to 0.
     * If `min` is greater than `max` the call is a no-op.
     * If `labels` are provided (projected), then `min` is always set to 0.
     * If `lowerBound` ends up being less than than the current `min` value,
     * it is automatically assigned the new `min` value.
    */
    min?: number | string;
    /**
     * The maximum value of the slider scale. Defaults to 100.
     * If `max` is less than `min` the call is a no-op.
     * If `labels` are provided (projected), then `max` is always set to
     * the number of labels.
     * If `upperBound` ends up being greater than than the current `max` value,
     * it is automatically assigned the new `max` value.
    */
    max?: number | string;
    /**
     * The lower bound of the slider value. If not set, the `min` value is applied.
    */
    lowerBound?: number | string;
    /**
     * The upper bound of the slider value. If not set, the `max` value is applied.
    */
    upperBound?: number | string;
    /**
     * Disables the UI interactions of the slider.
    */
    disabled?: boolean | string;
    /**
     * Marks the slider track as discrete so it displays the steps.
     * If the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.
    */
    discreteTrack?: boolean | string;
    /**
     * Hides the thumb tooltip.
    */
    hideTooltip?: boolean | string;
    /**
     * Specifies the granularity that the value must adhere to.
     * If set to 0 no stepping is implied and any value in the range is allowed.
     * If `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.
    */
    step?: number | string;
    /**
     * The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.
    */
    primaryTicks?: number | string;
    /**
     * The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.
    */
    secondaryTicks?: number | string;
    /**
     * Changes the orientation of the ticks.
    */
    tickOrientation?: SliderBaseTickOrientation | string;
    /**
     * Hides the primary tick labels.
    */
    hidePrimaryLabels?: boolean | string;
    /**
     * Hides the secondary tick labels.
    */
    hideSecondaryLabels?: boolean | string;
    /**
     * The locale used to format the thumb and tick label values in the slider.
    */
    locale?: string;
    /**
     * String format used for the thumb and tick label values in the slider.
    */
    valueFormat?: string;
    /**
     * The degrees for the rotation of the tick labels. Defaults to 0.
    */
    tickLabelRotation?: TickLabelRotation | string;
    /**
     * Number format options used for the thumb and tick label values in the slider.
    */
    valueFormatOptions?: NumberFormatOptions;
}
