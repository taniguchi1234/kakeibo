import * as React from 'react';
import { BaseOptionLike } from "./BaseOptionLike";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
export declare abstract class IgrBaseOptionLike<P extends IIgrBaseOptionLikeProps = IIgrBaseOptionLikeProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): BaseOptionLike;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): BaseOptionLike; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrBaseOptionLike;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
     * Whether the item is active.
    */
    get active(): boolean;
    set active(v: boolean);
    /**
     * Whether the item is disabled.
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Whether the item is selected.
    */
    get selected(): boolean;
    set selected(v: boolean);
    /**
     * The current value of the item.
     * If not specified, the element's text content is used.
    */
    get value(): string;
    set value(v: string);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
}
export interface IIgrBaseOptionLikeProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Whether the item is active.
    */
    active?: boolean | string;
    /**
     * Whether the item is disabled.
    */
    disabled?: boolean | string;
    /**
     * Whether the item is selected.
    */
    selected?: boolean | string;
    /**
     * The current value of the item.
     * If not specified, the element's text content is used.
    */
    value?: string;
}
