import * as React from 'react';
import { DockManagerPaneType } from "./DockManagerPaneType";
import { UnpinnedLocation } from "./UnpinnedLocation";
import { IgrDockManagerPane, IIgrDockManagerPaneProps } from "./igr-dock-manager-pane";
import { ContentPane } from "./ContentPane";
export declare class IgrContentPane extends IgrDockManagerPane<IIgrContentPaneProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrContentPaneProps>> {
    protected createImplementation(): ContentPane;
    /**
                                 * @hidden
                                 */
    get i(): ContentPane;
    constructor(props: IIgrContentPaneProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrContentPaneProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The id of the pane. If not set the Dock Manager generates it automatically.
    */
    get id(): string;
    set id(v: string);
    /**
     * The type of the pane.
    */
    get type(): DockManagerPaneType;
    set type(v: DockManagerPaneType);
    /**
     * The slot attribute's value of the content element.
    */
    get contentId(): string;
    set contentId(v: string);
    /**
     * The text header of the content pane. Even if header slot templates are used, the text header is used for aria label.
    */
    get header(): string;
    set header(v: string);
    /**
     * The slot attribute's value of the content pane header element. If not set, the `header` property value is used.
    */
    get headerId(): string;
    set headerId(v: string);
    /**
     * The slot attribute's value of the tab header element. If not set, the `header` property value is used.
    */
    get tabHeaderId(): string;
    set tabHeaderId(v: string);
    /**
     * The slot attribute's value of the unpinned header element. If not set, the `header` property value is used.
    */
    get unpinnedHeaderId(): string;
    set unpinnedHeaderId(v: string);
    /**
     * The slot attribute's value of the floating header element. If not set, the `headerId` property value is used.
    */
    get floatingHeaderId(): string;
    set floatingHeaderId(v: string);
    /**
     * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
    */
    get size(): number;
    set size(v: number);
    /**
     * Determines whether the end user is allowed to close the pane. Defaults to true.
    */
    get allowClose(): boolean;
    set allowClose(v: boolean);
    /**
     * Determines whether the end user is allowed to maximize the pane.
    */
    get allowMaximize(): boolean;
    set allowMaximize(v: boolean);
    /**
     * Determines whether the end user is allowed to pin/unpin the pane. Defaults to true.
    */
    get allowPinning(): boolean;
    set allowPinning(v: boolean);
    /**
     * Determines whether the end user is allowed to dock the pane. Defaults to true.
    */
    get allowDocking(): boolean;
    set allowDocking(v: boolean);
    /**
     * Determines whether the end user can inner dock another pane in this one. Defaults to true.
    */
    get acceptsInnerDock(): boolean;
    set acceptsInnerDock(v: boolean);
    /**
     * Determines whether the end user is allowed to make the pane floating. Defaults to true.
    */
    get allowFloating(): boolean;
    set allowFloating(v: boolean);
    /**
     * The absolute size of the pane in an unpinned state. Defaults to 200.
    */
    get unpinnedSize(): number;
    set unpinnedSize(v: number);
    /**
     * Determines whether a content pane is pinned or not. Defaults to true.
    */
    get isPinned(): boolean;
    set isPinned(v: boolean);
    /**
     * Determines whether a content pane is maximized or not. Defaults to false.
    */
    get isMaximized(): boolean;
    set isMaximized(v: boolean);
    /**
     * The desired unpinned location of the content pane.
     * If not set the Dock Manager automatically calculates it based on the location of the pane relatively to the document host.
     * If more than one document host is presented, the closest one in the pane hierarchy will be used for the calculation.
     * If there is no document host, the default location is left.
    */
    get unpinnedLocation(): UnpinnedLocation;
    set unpinnedLocation(v: UnpinnedLocation);
    /**
     * Determines whether a pane is hidden in the UI. Defaults to false.
    */
    get hidden(): boolean;
    set hidden(v: boolean);
    /**
     * Determines whether a pane is disabled. Defaults to false.
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Marks that a content pane can be docked only inside a document host.
    */
    get documentOnly(): boolean;
    set documentOnly(v: boolean);
    setNativeElement(element: any): void;
}
export interface IIgrContentPaneProps extends IIgrDockManagerPaneProps {
    /**
     * The id of the pane. If not set the Dock Manager generates it automatically.
    */
    id?: string;
    /**
     * The type of the pane.
    */
    type?: DockManagerPaneType | string;
    /**
     * The slot attribute's value of the content element.
    */
    contentId?: string;
    /**
     * The text header of the content pane. Even if header slot templates are used, the text header is used for aria label.
    */
    header?: string;
    /**
     * The slot attribute's value of the content pane header element. If not set, the `header` property value is used.
    */
    headerId?: string;
    /**
     * The slot attribute's value of the tab header element. If not set, the `header` property value is used.
    */
    tabHeaderId?: string;
    /**
     * The slot attribute's value of the unpinned header element. If not set, the `header` property value is used.
    */
    unpinnedHeaderId?: string;
    /**
     * The slot attribute's value of the floating header element. If not set, the `headerId` property value is used.
    */
    floatingHeaderId?: string;
    /**
     * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
    */
    size?: number | string;
    /**
     * Determines whether the end user is allowed to close the pane. Defaults to true.
    */
    allowClose?: boolean | string;
    /**
     * Determines whether the end user is allowed to maximize the pane.
    */
    allowMaximize?: boolean | string;
    /**
     * Determines whether the end user is allowed to pin/unpin the pane. Defaults to true.
    */
    allowPinning?: boolean | string;
    /**
     * Determines whether the end user is allowed to dock the pane. Defaults to true.
    */
    allowDocking?: boolean | string;
    /**
     * Determines whether the end user can inner dock another pane in this one. Defaults to true.
    */
    acceptsInnerDock?: boolean | string;
    /**
     * Determines whether the end user is allowed to make the pane floating. Defaults to true.
    */
    allowFloating?: boolean | string;
    /**
     * The absolute size of the pane in an unpinned state. Defaults to 200.
    */
    unpinnedSize?: number | string;
    /**
     * Determines whether a content pane is pinned or not. Defaults to true.
    */
    isPinned?: boolean | string;
    /**
     * Determines whether a content pane is maximized or not. Defaults to false.
    */
    isMaximized?: boolean | string;
    /**
     * The desired unpinned location of the content pane.
     * If not set the Dock Manager automatically calculates it based on the location of the pane relatively to the document host.
     * If more than one document host is presented, the closest one in the pane hierarchy will be used for the calculation.
     * If there is no document host, the default location is left.
    */
    unpinnedLocation?: UnpinnedLocation | string;
    /**
     * Determines whether a pane is hidden in the UI. Defaults to false.
    */
    hidden?: boolean | string;
    /**
     * Determines whether a pane is disabled. Defaults to false.
    */
    disabled?: boolean | string;
    /**
     * Marks that a content pane can be docked only inside a document host.
    */
    documentOnly?: boolean | string;
}
