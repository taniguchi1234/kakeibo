import * as React from 'react';
import { TreeSelection } from "./TreeSelection";
import { IgrTreeSelectionChangeEventArgs } from "./igr-tree-selection-change-event-args";
import { IgrTreeItemComponentEventArgs } from "./igr-tree-item-component-event-args";
import { IgrTreeItem } from "./igr-tree-item";
import { Tree } from "./Tree";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The tree allows users to represent hierarchical data in a tree-view structure,
 * maintaining parent-child relationships, as well as to define static tree-view structure without a corresponding data model.
*/
export declare class IgrTree<P extends IIgrTreeProps = IIgrTreeProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Tree;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Tree; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrTree;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Whether a single or multiple of a parent's child items can be expanded.
    */
    get singleBranchExpand(): boolean;
    set singleBranchExpand(v: boolean);
    /**
     * Whether clicking over nodes will change their expanded state or not.
    */
    get toggleNodeOnClick(): boolean;
    set toggleNodeOnClick(v: boolean);
    /**
     * The selection state of the tree.
    */
    get selection(): TreeSelection;
    set selection(v: TreeSelection);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
    /**
     * @private
    
    */
    expandToItem(item: IgrTreeItem): void;
    private _selectionChanged;
    private _selectionChanged_wrapped;
    get selectionChanged(): (s: IgrTree, e: IgrTreeSelectionChangeEventArgs) => void;
    set selectionChanged(ev: (s: IgrTree, e: IgrTreeSelectionChangeEventArgs) => void);
    private _itemExpanding;
    private _itemExpanding_wrapped;
    get itemExpanding(): (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    set itemExpanding(ev: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void);
    private _itemExpanded;
    private _itemExpanded_wrapped;
    get itemExpanded(): (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    set itemExpanded(ev: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void);
    private _itemCollapsing;
    private _itemCollapsing_wrapped;
    get itemCollapsing(): (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    set itemCollapsing(ev: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void);
    private _itemCollapsed;
    private _itemCollapsed_wrapped;
    get itemCollapsed(): (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    set itemCollapsed(ev: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void);
    private _activeItem;
    private _activeItem_wrapped;
    get activeItem(): (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    set activeItem(ev: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void);
}
export interface IIgrTreeProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Whether a single or multiple of a parent's child items can be expanded.
    */
    singleBranchExpand?: boolean | string;
    /**
     * Whether clicking over nodes will change their expanded state or not.
    */
    toggleNodeOnClick?: boolean | string;
    /**
     * The selection state of the tree.
    */
    selection?: TreeSelection | string;
    selectionChanged?: (s: IgrTree, e: IgrTreeSelectionChangeEventArgs) => void;
    itemExpanding?: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    itemExpanded?: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    itemCollapsing?: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    itemCollapsed?: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
    activeItem?: (s: IgrTree, e: IgrTreeItemComponentEventArgs) => void;
}
