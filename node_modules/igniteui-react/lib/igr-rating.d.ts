import * as React from 'react';
import { IgrNumberEventArgs } from "./igr-number-event-args";
import { Rating } from "./Rating";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Rating provides insight regarding others' opinions and experiences,
 * and can allow the user to submit a rating of their own
 * @cssproperty --symbol-size - The size of the symbols.
 * @cssproperty --symbol-full-color - The color of the filled symbol.
 * @cssproperty --symbol-empty-color - The color of the empty symbol.
 * @cssproperty --symbol-full-filter - The filter(s) used for the filled symbol.
 * @cssproperty --symbol-empty-filter - The filter(s) used for the empty symbol.
*/
export declare class IgrRating<P extends IIgrRatingProps = IIgrRatingProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Rating;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Rating; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrRating;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The maximum value for the rating.
     * If there are projected symbols, the maximum value will be resolved
     * based on the number of symbols.
    */
    get max(): number;
    set max(v: number);
    /**
     * The minimum value change allowed.
     * Valid values are in the interval between 0 and 1 inclusive.
    */
    get step(): number;
    set step(v: number);
    /**
     * The label of the control.
    */
    get label(): string;
    set label(v: string);
    /**
     * A format string which sets aria-valuetext. Instances of '{0}' will be replaced
     * with the current value of the control and instances of '{1}' with the maximum value for the control.
     * Important for screen-readers and useful for localization.
    */
    get valueFormat(): string;
    set valueFormat(v: string);
    /**
     * The current value of the component
    */
    get value(): number;
    set value(v: number);
    /**
     * Sets hover preview behavior for the component
    */
    get hoverPreview(): boolean;
    set hoverPreview(v: boolean);
    /**
     * Makes the control a readonly field.
    */
    get readOnly(): boolean;
    set readOnly(v: boolean);
    /**
     * Toggles single selection visual mode.
    */
    get single(): boolean;
    set single(v: boolean);
    /**
     * Whether to reset the rating when the user selects the same value.
    */
    get allowReset(): boolean;
    set allowReset(v: boolean);
    /**
     * The disabled state of the component
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * The name attribute of the control.
    */
    get name(): string;
    set name(v: string);
    /**
     * Control the validity of the control.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Increments the value of the control by `n` steps multiplied by the
     * step factor.
    
    */
    stepUp(n?: number): void;
    /**
     * Decrements the value of the control by `n` steps multiplied by
     * the step factor.
    
    */
    stepDown(n?: number): void;
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity(): void;
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message: string): void;
    private _change;
    private _change_wrapped;
    get change(): (s: IgrRating, e: IgrNumberEventArgs) => void;
    set change(ev: (s: IgrRating, e: IgrNumberEventArgs) => void);
    private _hover;
    private _hover_wrapped;
    get hover(): (s: IgrRating, e: IgrNumberEventArgs) => void;
    set hover(ev: (s: IgrRating, e: IgrNumberEventArgs) => void);
}
export interface IIgrRatingProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * The maximum value for the rating.
     * If there are projected symbols, the maximum value will be resolved
     * based on the number of symbols.
    */
    max?: number | string;
    /**
     * The minimum value change allowed.
     * Valid values are in the interval between 0 and 1 inclusive.
    */
    step?: number | string;
    /**
     * The label of the control.
    */
    label?: string;
    /**
     * A format string which sets aria-valuetext. Instances of '{0}' will be replaced
     * with the current value of the control and instances of '{1}' with the maximum value for the control.
     * Important for screen-readers and useful for localization.
    */
    valueFormat?: string;
    /**
     * The current value of the component
    */
    value?: number | string;
    /**
     * Sets hover preview behavior for the component
    */
    hoverPreview?: boolean | string;
    /**
     * Makes the control a readonly field.
    */
    readOnly?: boolean | string;
    /**
     * Toggles single selection visual mode.
    */
    single?: boolean | string;
    /**
     * Whether to reset the rating when the user selects the same value.
    */
    allowReset?: boolean | string;
    /**
     * The disabled state of the component
    */
    disabled?: boolean | string;
    /**
     * The name attribute of the control.
    */
    name?: string;
    /**
     * Control the validity of the control.
    */
    invalid?: boolean | string;
    change?: (s: IgrRating, e: IgrNumberEventArgs) => void;
    hover?: (s: IgrRating, e: IgrNumberEventArgs) => void;
}
