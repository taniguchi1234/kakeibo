import * as React from 'react';
import { DropdownPlacement } from "./DropdownPlacement";
import { DropdownScrollStrategy } from "./DropdownScrollStrategy";
import { IgrDropdownItem } from "./igr-dropdown-item";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrDropdownItemComponentEventArgs } from "./igr-dropdown-item-component-event-args";
import { IgrBaseComboBoxLike, IIgrBaseComboBoxLikeProps } from "./igr-base-combo-box-like";
import { Dropdown } from "./Dropdown";
import { IgrDropdownGroup } from "./igr-dropdown-group";
/**
 * Represents a DropDown component.
*/
export declare class IgrDropdown extends IgrBaseComboBoxLike<IIgrDropdownProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrDropdownProps>> {
    protected createImplementation(): Dropdown;
    /**
                                 * @hidden
                                 */
    get i(): Dropdown;
    constructor(props: IIgrDropdownProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrDropdownProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The preferred placement of the component around the target element.
     * @type {'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'}
    */
    get placement(): DropdownPlacement;
    set placement(v: DropdownPlacement);
    /**
     * Determines the behavior of the component during scrolling of the parent container.
    */
    get scrollStrategy(): DropdownScrollStrategy;
    set scrollStrategy(v: DropdownScrollStrategy);
    /**
     * Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.
     * When true, once enough space is detected on its preferred side, it will flip back.
    */
    get flip(): boolean;
    set flip(v: boolean);
    /**
     * The distance from the target element.
    */
    get distance(): number;
    set distance(v: number);
    /**
     * Whether the dropdown's width should be the same as the target's one.
    */
    get sameWidth(): boolean;
    set sameWidth(v: boolean);
    /**
     * Returns the items of the dropdown.
    */
    get items(): IgrDropdownItem[];
    /**
     * Returns the group items of the dropdown.
    */
    get groups(): IgrDropdownGroup[];
    /**
     * Returns the selected item from the dropdown or null.
    */
    get selectedItem(): IgrDropdownItem;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Shows the dropdown.
    
    */
    showTarget(target_: any): void;
    /**
     * Toggles the open state of the dropdown.
    
    */
    toggleTarget(target_: any): void;
    /**
     * Navigates to the item at the specified index. If it exists, returns the found item, otherwise - null.
    
    */
    navigateTo(index: any): IgrDropdownItem;
    /**
     * Selects the item with the specified value. If it exists, returns the found item, otherwise - null.
    
    */
    select(value: any): IgrDropdownItem;
    disconnectedCallback(): void;
    /**
     * Clears the current selection of the dropdown.
    
    */
    clearSelection(): void;
    private _opening;
    private _opening_wrapped;
    get opening(): (s: IgrDropdown, e: IgrVoidEventArgs) => void;
    set opening(ev: (s: IgrDropdown, e: IgrVoidEventArgs) => void);
    private _opened;
    private _opened_wrapped;
    get opened(): (s: IgrDropdown, e: IgrVoidEventArgs) => void;
    set opened(ev: (s: IgrDropdown, e: IgrVoidEventArgs) => void);
    private _closing;
    private _closing_wrapped;
    get closing(): (s: IgrDropdown, e: IgrVoidEventArgs) => void;
    set closing(ev: (s: IgrDropdown, e: IgrVoidEventArgs) => void);
    private _closed;
    private _closed_wrapped;
    get closed(): (s: IgrDropdown, e: IgrVoidEventArgs) => void;
    set closed(ev: (s: IgrDropdown, e: IgrVoidEventArgs) => void);
    private _change;
    private _change_wrapped;
    get change(): (s: IgrDropdown, e: IgrDropdownItemComponentEventArgs) => void;
    set change(ev: (s: IgrDropdown, e: IgrDropdownItemComponentEventArgs) => void);
}
export interface IIgrDropdownProps extends IIgrBaseComboBoxLikeProps {
    /**
     * The preferred placement of the component around the target element.
     * @type {'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'}
    */
    placement?: DropdownPlacement | string;
    /**
     * Determines the behavior of the component during scrolling of the parent container.
    */
    scrollStrategy?: DropdownScrollStrategy | string;
    /**
     * Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.
     * When true, once enough space is detected on its preferred side, it will flip back.
    */
    flip?: boolean | string;
    /**
     * The distance from the target element.
    */
    distance?: number | string;
    /**
     * Whether the dropdown's width should be the same as the target's one.
    */
    sameWidth?: boolean | string;
    opening?: (s: IgrDropdown, e: IgrVoidEventArgs) => void;
    opened?: (s: IgrDropdown, e: IgrVoidEventArgs) => void;
    closing?: (s: IgrDropdown, e: IgrVoidEventArgs) => void;
    closed?: (s: IgrDropdown, e: IgrVoidEventArgs) => void;
    change?: (s: IgrDropdown, e: IgrDropdownItemComponentEventArgs) => void;
}
