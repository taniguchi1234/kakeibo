import * as React from 'react';
import { DockManagerPaneType } from "./DockManagerPaneType";
import { SplitPaneOrientation } from "./SplitPaneOrientation";
import { IgrDockManagerPaneCollection } from "./igr-dock-manager-pane-collection";
import { IgrDockManagerPoint } from "./igr-dock-manager-point";
import { IgrDockManagerPane, IIgrDockManagerPaneProps } from "./igr-dock-manager-pane";
import { SplitPane } from "./SplitPane";
export declare class IgrSplitPane extends IgrDockManagerPane<IIgrSplitPaneProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrSplitPaneProps>> {
    protected createImplementation(): SplitPane;
    /**
                                 * @hidden
                                 */
    get i(): SplitPane;
    constructor(props: IIgrSplitPaneProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrSplitPaneProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The id of the pane. If not set the Dock Manager generates it automatically.
    */
    get id(): string;
    set id(v: string);
    /**
     * The type of the pane.
    */
    get type(): DockManagerPaneType;
    set type(v: DockManagerPaneType);
    /**
     * The orientation of the split pane.
    */
    get orientation(): SplitPaneOrientation;
    set orientation(v: SplitPaneOrientation);
    private _panes;
    /**
     * The child panes of the split pane.
    */
    get panes(): IgrDockManagerPaneCollection;
    set panes(v: IgrDockManagerPaneCollection);
    /**
     * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
    */
    get size(): number;
    set size(v: number);
    /**
     * The absolute location point of the pane. Applies only for floating panes.
    */
    get floatingLocation(): IgrDockManagerPoint;
    set floatingLocation(v: IgrDockManagerPoint);
    /**
     * The absolute width of the pane. Applies only for floating panes. Defaults to 100.
    */
    get floatingWidth(): number;
    set floatingWidth(v: number);
    /**
     * The absolute height of the pane. Applies only for floating panes. Defaults to 100.
    */
    get floatingHeight(): number;
    set floatingHeight(v: number);
    /**
     * Determines whether floating pane resizing is allowed. Applies only for floating panes.
    */
    get floatingResizable(): boolean;
    set floatingResizable(v: boolean);
    /**
     * Determines whether the pane should present in the UI when empty.
    */
    get allowEmpty(): boolean;
    set allowEmpty(v: boolean);
    /**
     * Determines whether a split pane is maximized or not. Defaults to false.
     * @deprecated Use the `isMaximized` property of TabGroupPane and/or ContentPane instead.  Having isMaximized set to true on a split pane level has no real effect as split panes serve as containers only, meaning they have no actual content to be shown maximized.
    */
    get isMaximized(): boolean;
    set isMaximized(v: boolean);
    findByName(name: string): any;
    setNativeElement(element: any): void;
}
export interface IIgrSplitPaneProps extends IIgrDockManagerPaneProps {
    /**
     * The id of the pane. If not set the Dock Manager generates it automatically.
    */
    id?: string;
    /**
     * The type of the pane.
    */
    type?: DockManagerPaneType | string;
    /**
     * The orientation of the split pane.
    */
    orientation?: SplitPaneOrientation | string;
    /**
     * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
    */
    size?: number | string;
    /**
     * The absolute location point of the pane. Applies only for floating panes.
    */
    floatingLocation?: IgrDockManagerPoint;
    /**
     * The absolute width of the pane. Applies only for floating panes. Defaults to 100.
    */
    floatingWidth?: number | string;
    /**
     * The absolute height of the pane. Applies only for floating panes. Defaults to 100.
    */
    floatingHeight?: number | string;
    /**
     * Determines whether floating pane resizing is allowed. Applies only for floating panes.
    */
    floatingResizable?: boolean | string;
    /**
     * Determines whether the pane should present in the UI when empty.
    */
    allowEmpty?: boolean | string;
    /**
     * Determines whether a split pane is maximized or not. Defaults to false.
    */
    isMaximized?: boolean | string;
}
