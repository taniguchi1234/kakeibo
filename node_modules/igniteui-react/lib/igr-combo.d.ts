import * as React from 'react';
import { GroupingDirection } from "./GroupingDirection";
import { IgrFilteringOptions } from "./igr-filtering-options";
import { IgrComboChangeEventArgs } from "./igr-combo-change-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrFocusOptions } from "./igr-focus-options";
import { Combo } from "./Combo";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The Combo component is similar to the Select component in that it provides a list of options from which the user can make a selection.
 * In contrast to the Select component, the Combo component displays all options in a virtualized list of items,
 * meaning the combo box can simultaneously show thousands of options, where one or more options can be selected.
 * Additionally, users can create custom item templates, allowing for robust data visualization.
 * The Combo component features case-sensitive filtering, grouping, complex data binding, dynamic addition of values and more.
*/
export declare class IgrCombo<P extends IIgrComboProps = IIgrComboProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Combo;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Combo; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrCombo;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The data source used to generate the list of options.
    */
    get data(): any[];
    set data(v: any[]);
    /**
     * The outlined attribute of the control.
    */
    get outlined(): boolean;
    set outlined(v: boolean);
    /**
     * Enables single selection mode and moves item filtering to the main input.
    */
    get singleSelect(): boolean;
    set singleSelect(v: boolean);
    /**
     * The autofocus attribute of the control.
    */
    get autofocus(): boolean;
    set autofocus(v: boolean);
    /**
     * Focuses the list of options when the menu opens.
    */
    get autofocusList(): boolean;
    set autofocusList(v: boolean);
    /**
     * The label attribute of the control.
    */
    get label(): string;
    set label(v: string);
    /**
     * The placeholder attribute of the control.
    */
    get placeholder(): string;
    set placeholder(v: string);
    /**
     * The placeholder attribute of the search input.
    */
    get placeholderSearch(): string;
    set placeholderSearch(v: string);
    /**
     * Sets the open state of the component.
    */
    get open(): boolean;
    set open(v: boolean);
    /**
     * The key in the data source used when selecting items.
    */
    get valueKey(): string;
    set valueKey(v: string);
    /**
     * The key in the data source used to display items in the list.
    */
    get displayKey(): string;
    set displayKey(v: string);
    /**
     * The key in the data source used to group items in the list.
    */
    get groupKey(): string;
    set groupKey(v: string);
    /**
     * Sorts the items in each group by ascending or descending order.
     * @type {"asc" | "desc" | "none"}
    */
    get groupSorting(): GroupingDirection;
    set groupSorting(v: GroupingDirection);
    get filteringOptions(): IgrFilteringOptions;
    set filteringOptions(v: IgrFilteringOptions);
    /**
     * Enables the case sensitive search icon in the filtering input.
    */
    get caseSensitiveIcon(): boolean;
    set caseSensitiveIcon(v: boolean);
    /**
     * Disables the filtering of the list of options.
    */
    get disableFiltering(): boolean;
    set disableFiltering(v: boolean);
    get value(): any[];
    set value(v: any[]);
    /**
     * Returns the current selection as an array of objects as provided in the `data` source.
    */
    get selection(): any[];
    /**
     * The disabled state of the component
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Makes the control a required field in a form context.
    */
    get required(): boolean;
    set required(v: boolean);
    /**
     * The name attribute of the control.
    */
    get name(): string;
    set name(v: string);
    /**
     * Control the validity of the control.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    private _itemTemplate;
    private _itemTemplateAdapter;
    get itemTemplate(): React.FunctionComponent<{
        dataContext: any;
    }> | React.Component<{
        dataContext: any;
    }>;
    set itemTemplate(v: React.FunctionComponent<{
        dataContext: any;
    }> | React.Component<{
        dataContext: any;
    }>);
    private _groupHeaderTemplate;
    private _groupHeaderTemplateAdapter;
    get groupHeaderTemplate(): React.FunctionComponent<{
        dataContext: any;
    }> | React.Component<{
        dataContext: any;
    }>;
    set groupHeaderTemplate(v: React.FunctionComponent<{
        dataContext: any;
    }> | React.Component<{
        dataContext: any;
    }>);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
    /**
     * Sets focus on the component.
    
    */
    focusComponent(options: IgrFocusOptions): void;
    /**
     * Removes focus from the component.
    
    */
    blurComponent(): void;
    select(items: any[]): void;
    deselect(items: any[]): void;
    /**
     * Shows the list of options.
    
    */
    show(): boolean;
    /**
     * Hides the list of options.
    
    */
    hide(): boolean;
    /**
     * Toggles the list of options.
    
    */
    toggle(): boolean;
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity(): void;
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message: string): void;
    private _change;
    private _change_wrapped;
    get change(): (s: IgrCombo, e: IgrComboChangeEventArgs) => void;
    set change(ev: (s: IgrCombo, e: IgrComboChangeEventArgs) => void);
    private _focus;
    private _focus_wrapped;
    get focus(): (s: IgrCombo, e: IgrVoidEventArgs) => void;
    set focus(ev: (s: IgrCombo, e: IgrVoidEventArgs) => void);
    private _blur;
    private _blur_wrapped;
    get blur(): (s: IgrCombo, e: IgrVoidEventArgs) => void;
    set blur(ev: (s: IgrCombo, e: IgrVoidEventArgs) => void);
    private _opening;
    private _opening_wrapped;
    get opening(): (s: IgrCombo, e: IgrVoidEventArgs) => void;
    set opening(ev: (s: IgrCombo, e: IgrVoidEventArgs) => void);
    private _opened;
    private _opened_wrapped;
    get opened(): (s: IgrCombo, e: IgrVoidEventArgs) => void;
    set opened(ev: (s: IgrCombo, e: IgrVoidEventArgs) => void);
    private _closing;
    private _closing_wrapped;
    get closing(): (s: IgrCombo, e: IgrVoidEventArgs) => void;
    set closing(ev: (s: IgrCombo, e: IgrVoidEventArgs) => void);
    private _closed;
    private _closed_wrapped;
    get closed(): (s: IgrCombo, e: IgrVoidEventArgs) => void;
    set closed(ev: (s: IgrCombo, e: IgrVoidEventArgs) => void);
}
export interface IIgrComboProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * The data source used to generate the list of options.
    */
    data?: any[];
    /**
     * The outlined attribute of the control.
    */
    outlined?: boolean | string;
    /**
     * Enables single selection mode and moves item filtering to the main input.
    */
    singleSelect?: boolean | string;
    /**
     * The autofocus attribute of the control.
    */
    autofocus?: boolean | string;
    /**
     * Focuses the list of options when the menu opens.
    */
    autofocusList?: boolean | string;
    /**
     * The label attribute of the control.
    */
    label?: string;
    /**
     * The placeholder attribute of the control.
    */
    placeholder?: string;
    /**
     * The placeholder attribute of the search input.
    */
    placeholderSearch?: string;
    /**
     * Sets the open state of the component.
    */
    open?: boolean | string;
    /**
     * The key in the data source used when selecting items.
    */
    valueKey?: string;
    /**
     * The key in the data source used to display items in the list.
    */
    displayKey?: string;
    /**
     * The key in the data source used to group items in the list.
    */
    groupKey?: string;
    /**
     * Sorts the items in each group by ascending or descending order.
     * @type {"asc" | "desc" | "none"}
    */
    groupSorting?: GroupingDirection | string;
    filteringOptions?: IgrFilteringOptions;
    /**
     * Enables the case sensitive search icon in the filtering input.
    */
    caseSensitiveIcon?: boolean | string;
    /**
     * Disables the filtering of the list of options.
    */
    disableFiltering?: boolean | string;
    value?: any[];
    /**
     * The disabled state of the component
    */
    disabled?: boolean | string;
    /**
     * Makes the control a required field in a form context.
    */
    required?: boolean | string;
    /**
     * The name attribute of the control.
    */
    name?: string;
    /**
     * Control the validity of the control.
    */
    invalid?: boolean | string;
    itemTemplate?: React.FunctionComponent<{
        dataContext: any;
    }> | React.Component<{
        dataContext: any;
    }>;
    groupHeaderTemplate?: React.FunctionComponent<{
        dataContext: any;
    }> | React.Component<{
        dataContext: any;
    }>;
    change?: (s: IgrCombo, e: IgrComboChangeEventArgs) => void;
    focus?: (s: IgrCombo, e: IgrVoidEventArgs) => void;
    blur?: (s: IgrCombo, e: IgrVoidEventArgs) => void;
    opening?: (s: IgrCombo, e: IgrVoidEventArgs) => void;
    opened?: (s: IgrCombo, e: IgrVoidEventArgs) => void;
    closing?: (s: IgrCombo, e: IgrVoidEventArgs) => void;
    closed?: (s: IgrCombo, e: IgrVoidEventArgs) => void;
}
