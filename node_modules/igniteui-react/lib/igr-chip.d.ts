import * as React from 'react';
import { StyleVariant } from "./StyleVariant";
import { IgrComponentBoolValueChangedEventArgs } from "./igr-component-bool-value-changed-event-args";
import { Chip } from "./Chip";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Chips help people enter information, make selections, filter content, or trigger actions.
*/
export declare class IgrChip<P extends IIgrChipProps = IIgrChipProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Chip;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Chip; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrChip;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Sets the disabled state for the chip.
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Defines if the chip is removable or not.
    */
    get removable(): boolean;
    set removable(v: boolean);
    /**
     * Defines if the chip is selectable or not.
    */
    get selectable(): boolean;
    set selectable(v: boolean);
    /**
     * Defines if the chip is selected or not.
    */
    get selected(): boolean;
    set selected(v: boolean);
    /**
     * A property that sets the color variant of the chip component.
    */
    get variant(): StyleVariant;
    set variant(v: StyleVariant);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    private _remove;
    private _remove_wrapped;
    get remove(): (s: IgrChip, e: IgrComponentBoolValueChangedEventArgs) => void;
    set remove(ev: (s: IgrChip, e: IgrComponentBoolValueChangedEventArgs) => void);
    private _select;
    private _select_wrapped;
    get select(): (s: IgrChip, e: IgrComponentBoolValueChangedEventArgs) => void;
    set select(ev: (s: IgrChip, e: IgrComponentBoolValueChangedEventArgs) => void);
}
export interface IIgrChipProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Sets the disabled state for the chip.
    */
    disabled?: boolean | string;
    /**
     * Defines if the chip is removable or not.
    */
    removable?: boolean | string;
    /**
     * Defines if the chip is selectable or not.
    */
    selectable?: boolean | string;
    /**
     * Defines if the chip is selected or not.
    */
    selected?: boolean | string;
    /**
     * A property that sets the color variant of the chip component.
    */
    variant?: StyleVariant | string;
    remove?: (s: IgrChip, e: IgrComponentBoolValueChangedEventArgs) => void;
    select?: (s: IgrChip, e: IgrComponentBoolValueChangedEventArgs) => void;
}
