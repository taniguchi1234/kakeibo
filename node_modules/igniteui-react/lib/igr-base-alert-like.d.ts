import * as React from 'react';
import { BaseAlertLikePosition } from "./BaseAlertLikePosition";
import { BaseAlertLike } from "./BaseAlertLike";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
export declare abstract class IgrBaseAlertLike<P extends IIgrBaseAlertLikeProps = IIgrBaseAlertLikeProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): BaseAlertLike;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): BaseAlertLike; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrBaseAlertLike;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
     * Whether the component is in shown state.
    */
    get open(): boolean;
    set open(v: boolean);
    /**
     * Determines the duration in ms in which the component will be visible.
    */
    get displayTime(): number;
    set displayTime(v: number);
    /**
     * Determines whether the component should close after the `displayTime` is over.
    */
    get keepOpen(): boolean;
    set keepOpen(v: boolean);
    /**
     * Sets the position of the component in the viewport.
    */
    get position(): BaseAlertLikePosition;
    set position(v: BaseAlertLikePosition);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Opens the component.
    
    */
    show(): boolean;
    /**
     * Closes the component.
    
    */
    hide(): boolean;
    /**
     * Toggles the open state of the component.
    
    */
    toggle(): boolean;
}
export interface IIgrBaseAlertLikeProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Whether the component is in shown state.
    */
    open?: boolean | string;
    /**
     * Determines the duration in ms in which the component will be visible.
    */
    displayTime?: number | string;
    /**
     * Determines whether the component should close after the `displayTime` is over.
    */
    keepOpen?: boolean | string;
    /**
     * Sets the position of the component in the viewport.
    */
    position?: BaseAlertLikePosition | string;
}
