import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { Type } from "igniteui-react-core";
import { GroupingDirection } from "./GroupingDirection";
import { FilteringOptions } from "./FilteringOptions";
import { ComboChangeEventArgs } from "./ComboChangeEventArgs";
import { VoidEventArgs } from "./VoidEventArgs";
import { FocusOptions } from "./FocusOptions";
/**
 * @hidden
 */
export declare class Combo extends BaseElement {
    static $t: Type;
    private m;
    protected get n(): WCNativeHelper;
    private ab;
    protected get nativeElement(): any;
    protected set nativeElement(a: any);
    setNativeElement(a: any): void;
    get a(): any[];
    set a(a: any[]);
    get w(): boolean;
    set w(a: boolean);
    get z(): boolean;
    set z(a: boolean);
    get o(): boolean;
    set o(a: boolean);
    get p(): boolean;
    set p(a: boolean);
    get ah(): string;
    set ah(a: string);
    get aj(): string;
    set aj(a: string);
    get ak(): string;
    set ak(a: string);
    get v(): boolean;
    set v(a: boolean);
    get al(): string;
    set al(a: string);
    get af(): string;
    set af(a: string);
    get ag(): string;
    set ag(a: string);
    get f(): GroupingDirection;
    set f(a: GroupingDirection);
    get e(): FilteringOptions;
    set e(a: FilteringOptions);
    get q(): boolean;
    set q(a: boolean);
    get s(): boolean;
    set s(a: boolean);
    get c(): any[];
    set c(a: any[]);
    get b(): any[];
    get r(): boolean;
    set r(a: boolean);
    get x(): boolean;
    set x(a: boolean);
    get ai(): string;
    set ai(a: string);
    get u(): boolean;
    set u(a: boolean);
    change: (sender: any, args: ComboChangeEventArgs) => void;
    changeChanged(): void;
    focus: (sender: any, args: VoidEventArgs) => void;
    focusChanged(): void;
    blur: (sender: any, args: VoidEventArgs) => void;
    blurChanged(): void;
    opening: (sender: any, args: VoidEventArgs) => void;
    openingChanged(): void;
    opened: (sender: any, args: VoidEventArgs) => void;
    openedChanged(): void;
    closing: (sender: any, args: VoidEventArgs) => void;
    closingChanged(): void;
    closed: (sender: any, args: VoidEventArgs) => void;
    closedChanged(): void;
    as(): void;
    av(a: FocusOptions): void;
    an(): void;
    az(a: any[]): void;
    at(a: any[]): void;
    y(): boolean;
    t(): boolean;
    aa(): boolean;
    ay(): void;
    ap(): void;
    a0(a: string): void;
    ae: (arg: any) => any;
    ad: (arg: any) => any;
}
