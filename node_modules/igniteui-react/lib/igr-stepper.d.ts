import * as React from 'react';
import { StepperOrientation } from "./StepperOrientation";
import { StepperStepType } from "./StepperStepType";
import { StepperVerticalAnimation } from "./StepperVerticalAnimation";
import { StepperHorizontalAnimation } from "./StepperHorizontalAnimation";
import { StepperTitlePosition } from "./StepperTitlePosition";
import { IgrActiveStepChangingArgsEventArgs } from "./igr-active-step-changing-args-event-args";
import { IgrActiveStepChangedArgsEventArgs } from "./igr-active-step-changed-args-event-args";
import { Stepper } from "./Stepper";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
import { IgrStep } from "./igr-step";
/**
 * IgxStepper provides a wizard-like workflow by dividing content into logical steps.
 * @remarks
 * The stepper component allows the user to navigate between multiple steps.
 * It supports horizontal and vertical orientation as well as keyboard navigation and provides API methods to control the active step.
*/
export declare class IgrStepper<P extends IIgrStepperProps = IIgrStepperProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Stepper;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Stepper; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrStepper;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Returns all of the stepper's steps.
    */
    get steps(): IgrStep[];
    set steps(v: IgrStep[]);
    /**
     * Gets/Sets the orientation of the stepper.
     * @remarks
     * Default value is `horizontal`.
    */
    get orientation(): StepperOrientation;
    set orientation(v: StepperOrientation);
    /**
     * Get/Set the type of the steps.
     * @remarks
     * Default value is `full`.
    */
    get stepType(): StepperStepType;
    set stepType(v: StepperStepType);
    /**
     * Get/Set whether the stepper is linear.
     * @remarks
     * If the stepper is in linear mode and if the active step is valid only then the user is able to move forward.
    */
    get linear(): boolean;
    set linear(v: boolean);
    /**
     * Get/Set whether the content is displayed above the steps.
     * @remarks
     * Default value is `false` and the content is below the steps.
    */
    get contentTop(): boolean;
    set contentTop(v: boolean);
    /**
     * The animation type when in vertical mode.
    */
    get verticalAnimation(): StepperVerticalAnimation;
    set verticalAnimation(v: StepperVerticalAnimation);
    /**
     * The animation type when in horizontal mode.
    */
    get horizontalAnimation(): StepperHorizontalAnimation;
    set horizontalAnimation(v: StepperHorizontalAnimation);
    /**
     * The animation duration in either vertical or horizontal mode.
    */
    get animationDuration(): number;
    set animationDuration(v: number);
    /**
     * Get/Set the position of the steps title.
     * @remarks
     * The default value is undefined.
     * When the stepper is horizontally orientated the title is positioned below the indicator.
     * When the stepper is horizontally orientated the title is positioned on the right side of the indicator.
    */
    get titlePosition(): StepperTitlePosition;
    set titlePosition(v: StepperTitlePosition);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
    /**
     * Activates the step at a given index.
    
    */
    navigateTo(index: number): void;
    /**
     * Activates the next enabled step.
    
    */
    next(): void;
    /**
     * Activates the previous enabled step.
    
    */
    prev(): void;
    /**
     * Resets the stepper to its initial state i.e. activates the first step.
     * @remarks
     * The steps' content will not be automatically reset.
    
    */
    reset(): void;
    private _activeStepChanging;
    private _activeStepChanging_wrapped;
    get activeStepChanging(): (s: IgrStepper, e: IgrActiveStepChangingArgsEventArgs) => void;
    set activeStepChanging(ev: (s: IgrStepper, e: IgrActiveStepChangingArgsEventArgs) => void);
    private _activeStepChanged;
    private _activeStepChanged_wrapped;
    get activeStepChanged(): (s: IgrStepper, e: IgrActiveStepChangedArgsEventArgs) => void;
    set activeStepChanged(ev: (s: IgrStepper, e: IgrActiveStepChangedArgsEventArgs) => void);
}
export interface IIgrStepperProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Returns all of the stepper's steps.
    */
    steps?: IgrStep[];
    /**
     * Gets/Sets the orientation of the stepper.
     * @remarks
     * Default value is `horizontal`.
    */
    orientation?: StepperOrientation | string;
    /**
     * Get/Set the type of the steps.
     * @remarks
     * Default value is `full`.
    */
    stepType?: StepperStepType | string;
    /**
     * Get/Set whether the stepper is linear.
     * @remarks
     * If the stepper is in linear mode and if the active step is valid only then the user is able to move forward.
    */
    linear?: boolean | string;
    /**
     * Get/Set whether the content is displayed above the steps.
     * @remarks
     * Default value is `false` and the content is below the steps.
    */
    contentTop?: boolean | string;
    /**
     * The animation type when in vertical mode.
    */
    verticalAnimation?: StepperVerticalAnimation | string;
    /**
     * The animation type when in horizontal mode.
    */
    horizontalAnimation?: StepperHorizontalAnimation | string;
    /**
     * The animation duration in either vertical or horizontal mode.
    */
    animationDuration?: number | string;
    /**
     * Get/Set the position of the steps title.
     * @remarks
     * The default value is undefined.
     * When the stepper is horizontally orientated the title is positioned below the indicator.
     * When the stepper is horizontally orientated the title is positioned on the right side of the indicator.
    */
    titlePosition?: StepperTitlePosition | string;
    activeStepChanging?: (s: IgrStepper, e: IgrActiveStepChangingArgsEventArgs) => void;
    activeStepChanged?: (s: IgrStepper, e: IgrActiveStepChangedArgsEventArgs) => void;
}
