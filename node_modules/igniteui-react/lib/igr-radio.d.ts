import * as React from 'react';
import { RadioLabelPosition } from "./RadioLabelPosition";
import { IgrRadioChangeEventArgs } from "./igr-radio-change-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrFocusOptions } from "./igr-focus-options";
import { Radio } from "./Radio";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**

*/
export declare class IgrRadio<P extends IIgrRadioProps = IIgrRadioProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Radio;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Radio; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrRadio;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The value attribute of the control.
    */
    get value(): string;
    set value(v: string);
    /**
     * The checked state of the control.
    */
    get checked(): boolean;
    set checked(v: boolean);
    /**
     * The label position of the radio control.
    */
    get labelPosition(): RadioLabelPosition;
    set labelPosition(v: RadioLabelPosition);
    /**
     * The disabled state of the component
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Makes the control a required field in a form context.
    */
    get required(): boolean;
    set required(v: boolean);
    /**
     * The name attribute of the control.
    */
    get name(): string;
    set name(v: string);
    /**
     * Control the validity of the control.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Simulates a click on the radio control.
    
    */
    click(): void;
    /**
     * Sets focus on the radio control.
    
    */
    focusComponent(options: IgrFocusOptions): void;
    /**
     * Removes focus from the radio control.
    
    */
    blurComponent(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message: string): void;
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity(): void;
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity(): void;
    private _change;
    private _change_wrapped;
    get change(): (s: IgrRadio, e: IgrRadioChangeEventArgs) => void;
    set change(ev: (s: IgrRadio, e: IgrRadioChangeEventArgs) => void);
    private _focus;
    private _focus_wrapped;
    get focus(): (s: IgrRadio, e: IgrVoidEventArgs) => void;
    set focus(ev: (s: IgrRadio, e: IgrVoidEventArgs) => void);
    private _blur;
    private _blur_wrapped;
    get blur(): (s: IgrRadio, e: IgrVoidEventArgs) => void;
    set blur(ev: (s: IgrRadio, e: IgrVoidEventArgs) => void);
}
export interface IIgrRadioProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * The value attribute of the control.
    */
    value?: string;
    /**
     * The checked state of the control.
    */
    checked?: boolean | string;
    /**
     * The label position of the radio control.
    */
    labelPosition?: RadioLabelPosition | string;
    /**
     * The disabled state of the component
    */
    disabled?: boolean | string;
    /**
     * Makes the control a required field in a form context.
    */
    required?: boolean | string;
    /**
     * The name attribute of the control.
    */
    name?: string;
    /**
     * Control the validity of the control.
    */
    invalid?: boolean | string;
    change?: (s: IgrRadio, e: IgrRadioChangeEventArgs) => void;
    focus?: (s: IgrRadio, e: IgrVoidEventArgs) => void;
    blur?: (s: IgrRadio, e: IgrVoidEventArgs) => void;
}
