import * as React from 'react';
import { IgrIconMeta } from "./igr-icon-meta";
import { Icon } from "./Icon";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * The icon component allows visualizing collections of pre-registered SVG icons.
*/
export declare class IgrIcon<P extends IIgrIconProps = IIgrIconProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Icon;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Icon; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrIcon;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The name of the icon glyph to draw.
    */
    get name(): string;
    set name(v: string);
    /**
     * The name of the registered collection for look up of icons.
     * Defaults to `default`.
    */
    get collection(): string;
    set collection(v: string);
    /**
     * Whether to flip the icon. Useful for RTL layouts.
    */
    get mirrored(): boolean;
    set mirrored(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    registerIcon(name: string, url: string, collection: string): void;
    registerIconFromText(name: string, iconText: string, collection: string): void;
    setIconRef(name: string, collection: string, icon: IgrIconMeta): void;
}
export interface IIgrIconProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * The name of the icon glyph to draw.
    */
    name?: string;
    /**
     * The name of the registered collection for look up of icons.
     * Defaults to `default`.
    */
    collection?: string;
    /**
     * Whether to flip the icon. Useful for RTL layouts.
    */
    mirrored?: boolean | string;
}
