import * as React from 'react';
import { IgrComponentValueChangedEventArgs } from "./igr-component-value-changed-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrFocusOptions } from "./igr-focus-options";
import { SelectionRangeDirection } from "./SelectionRangeDirection";
import { RangeTextSelectMode } from "./RangeTextSelectMode";
import { InputBase } from "./InputBase";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
export declare abstract class IgrInputBase<P extends IIgrInputBaseProps = IIgrInputBaseProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): InputBase;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): InputBase; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrInputBase;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
     * Whether the control will have outlined appearance.
    */
    get outlined(): boolean;
    set outlined(v: boolean);
    /**
     * Makes the control a readonly field.
    */
    get readOnly(): boolean;
    set readOnly(v: boolean);
    /**
     * The placeholder attribute of the control.
    */
    get placeholder(): string;
    set placeholder(v: string);
    /**
     * The label for the control.
    */
    get label(): string;
    set label(v: string);
    /**
     * The disabled state of the component
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Makes the control a required field in a form context.
    */
    get required(): boolean;
    set required(v: boolean);
    /**
     * The name attribute of the control.
    */
    get name(): string;
    set name(v: string);
    /**
     * Control the validity of the control.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Sets focus on the control.
    
    */
    focusComponent(options: IgrFocusOptions): void;
    /**
     * Removes focus from the control.
    
    */
    blurComponent(): void;
    setSelectionRange(start: number, end: number, direction: SelectionRangeDirection): void;
    setRangeText(replacement: string, start: number, end: number, selectMode: RangeTextSelectMode): void;
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity(): void;
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message: string): void;
    private _inputOcurred;
    private _inputOcurred_wrapped;
    get inputOcurred(): (s: IgrInputBase, e: IgrComponentValueChangedEventArgs) => void;
    set inputOcurred(ev: (s: IgrInputBase, e: IgrComponentValueChangedEventArgs) => void);
    private _focus;
    private _focus_wrapped;
    get focus(): (s: IgrInputBase, e: IgrVoidEventArgs) => void;
    set focus(ev: (s: IgrInputBase, e: IgrVoidEventArgs) => void);
    private _blur;
    private _blur_wrapped;
    get blur(): (s: IgrInputBase, e: IgrVoidEventArgs) => void;
    set blur(ev: (s: IgrInputBase, e: IgrVoidEventArgs) => void);
}
export interface IIgrInputBaseProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Whether the control will have outlined appearance.
    */
    outlined?: boolean | string;
    /**
     * Makes the control a readonly field.
    */
    readOnly?: boolean | string;
    /**
     * The placeholder attribute of the control.
    */
    placeholder?: string;
    /**
     * The label for the control.
    */
    label?: string;
    /**
     * The disabled state of the component
    */
    disabled?: boolean | string;
    /**
     * Makes the control a required field in a form context.
    */
    required?: boolean | string;
    /**
     * The name attribute of the control.
    */
    name?: string;
    /**
     * Control the validity of the control.
    */
    invalid?: boolean | string;
    inputOcurred?: (s: IgrInputBase, e: IgrComponentValueChangedEventArgs) => void;
    focus?: (s: IgrInputBase, e: IgrVoidEventArgs) => void;
    blur?: (s: IgrInputBase, e: IgrVoidEventArgs) => void;
}
