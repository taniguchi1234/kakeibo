import * as React from 'react';
import { TextareaAutocapitalize } from "./TextareaAutocapitalize";
import { TextareaInputMode } from "./TextareaInputMode";
import { TextareaResize } from "./TextareaResize";
import { TextareaWrap } from "./TextareaWrap";
import { IgrComponentValueChangedEventArgs } from "./igr-component-value-changed-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { SelectionRangeDirection } from "./SelectionRangeDirection";
import { RangeTextSelectMode } from "./RangeTextSelectMode";
import { Textarea } from "./Textarea";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * This element represents a multi-line plain-text editing control,
 * useful when you want to allow users to enter a sizeable amount of free-form text,
 * for example a comment on a review or feedback form.
*/
export declare class IgrTextarea<P extends IIgrTextareaProps = IIgrTextareaProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Textarea;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Textarea; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrTextarea;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,
     * as well as guidance to the browser as to the type of information expected in the field.
     * Refer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.
    */
    get autocomplete(): string;
    set autocomplete(v: string);
    /**
     * Controls whether and how text input is automatically capitalized as it is entered/edited by the user.
     * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).
    */
    get autocapitalize(): TextareaAutocapitalize;
    set autocapitalize(v: TextareaAutocapitalize);
    /**
     * Hints at the type of data that might be entered by the user while editing the element or its contents.
     * This allows a browser to display an appropriate virtual keyboard.
     * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
    */
    get inputMode(): TextareaInputMode;
    set inputMode(v: TextareaInputMode);
    /**
     * The label for the control.
    */
    get label(): string;
    set label(v: string);
    /**
     * The maximum number of characters (UTF-16 code units) that the user can enter.
     * If this value isn't specified, the user can enter an unlimited number of characters.
    */
    get maxLength(): number;
    set maxLength(v: number);
    /**
     * The minimum number of characters (UTF-16 code units) required that the user should enter.
    */
    get minLength(): number;
    set minLength(v: number);
    /**
     * Whether the control will have outlined appearance.
    */
    get outlined(): boolean;
    set outlined(v: boolean);
    /**
     * The placeholder attribute of the control.
    */
    get placeholder(): string;
    set placeholder(v: string);
    /**
     * Makes the control a readonly field.
    */
    get readOnly(): boolean;
    set readOnly(v: boolean);
    /**
     * Controls whether the control can be resized.
     * When `auto` is set, the control will try to expand and fit its content.
    */
    get resize(): TextareaResize;
    set resize(v: TextareaResize);
    /**
     * The number of visible text lines for the control. If it is specified, it must be a positive integer.
     * If it is not specified, the default value is 2.
    */
    get rows(): number;
    set rows(v: number);
    /**
     * The value of the component
    */
    get value(): string;
    set value(v: string);
    /**
     * Controls whether the element may be checked for spelling errors.
    */
    get spellcheck(): boolean;
    set spellcheck(v: boolean);
    /**
     * Indicates how the control should wrap the value for form submission.
     * Refer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)
     * for explanation of the available values.
    */
    get wrap(): TextareaWrap;
    set wrap(v: TextareaWrap);
    /**
     * Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property
     * when it is defined.
    */
    get validateOnly(): boolean;
    set validateOnly(v: boolean);
    /**
     * The disabled state of the component
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Makes the control a required field in a form context.
    */
    get required(): boolean;
    set required(v: boolean);
    /**
     * The name attribute of the control.
    */
    get name(): string;
    set name(v: string);
    /**
     * Control the validity of the control.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * Selects all text within the control.
    
    */
    select(): void;
    setSelectionRange(start: number, end: number, direction: SelectionRangeDirection): void;
    setRangeText(replacement: string, start: number, end: number, selectMode: RangeTextSelectMode): void;
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity(): void;
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message: string): void;
    private _input;
    private _input_wrapped;
    get input(): (s: IgrTextarea, e: IgrComponentValueChangedEventArgs) => void;
    set input(ev: (s: IgrTextarea, e: IgrComponentValueChangedEventArgs) => void);
    private _change;
    private _change_wrapped;
    get change(): (s: IgrTextarea, e: IgrComponentValueChangedEventArgs) => void;
    set change(ev: (s: IgrTextarea, e: IgrComponentValueChangedEventArgs) => void);
    private _focus;
    private _focus_wrapped;
    get focus(): (s: IgrTextarea, e: IgrVoidEventArgs) => void;
    set focus(ev: (s: IgrTextarea, e: IgrVoidEventArgs) => void);
    private _blur;
    private _blur_wrapped;
    get blur(): (s: IgrTextarea, e: IgrVoidEventArgs) => void;
    set blur(ev: (s: IgrTextarea, e: IgrVoidEventArgs) => void);
}
export interface IIgrTextareaProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,
     * as well as guidance to the browser as to the type of information expected in the field.
     * Refer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.
    */
    autocomplete?: string;
    /**
     * Controls whether and how text input is automatically capitalized as it is entered/edited by the user.
     * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).
    */
    autocapitalize?: TextareaAutocapitalize | string;
    /**
     * Hints at the type of data that might be entered by the user while editing the element or its contents.
     * This allows a browser to display an appropriate virtual keyboard.
     * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
    */
    inputMode?: TextareaInputMode | string;
    /**
     * The label for the control.
    */
    label?: string;
    /**
     * The maximum number of characters (UTF-16 code units) that the user can enter.
     * If this value isn't specified, the user can enter an unlimited number of characters.
    */
    maxLength?: number | string;
    /**
     * The minimum number of characters (UTF-16 code units) required that the user should enter.
    */
    minLength?: number | string;
    /**
     * Whether the control will have outlined appearance.
    */
    outlined?: boolean | string;
    /**
     * The placeholder attribute of the control.
    */
    placeholder?: string;
    /**
     * Makes the control a readonly field.
    */
    readOnly?: boolean | string;
    /**
     * Controls whether the control can be resized.
     * When `auto` is set, the control will try to expand and fit its content.
    */
    resize?: TextareaResize | string;
    /**
     * The number of visible text lines for the control. If it is specified, it must be a positive integer.
     * If it is not specified, the default value is 2.
    */
    rows?: number | string;
    /**
     * The value of the component
    */
    value?: string;
    /**
     * Controls whether the element may be checked for spelling errors.
    */
    spellcheck?: boolean | string;
    /**
     * Indicates how the control should wrap the value for form submission.
     * Refer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)
     * for explanation of the available values.
    */
    wrap?: TextareaWrap | string;
    /**
     * Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property
     * when it is defined.
    */
    validateOnly?: boolean | string;
    /**
     * The disabled state of the component
    */
    disabled?: boolean | string;
    /**
     * Makes the control a required field in a form context.
    */
    required?: boolean | string;
    /**
     * The name attribute of the control.
    */
    name?: string;
    /**
     * Control the validity of the control.
    */
    invalid?: boolean | string;
    input?: (s: IgrTextarea, e: IgrComponentValueChangedEventArgs) => void;
    change?: (s: IgrTextarea, e: IgrComponentValueChangedEventArgs) => void;
    focus?: (s: IgrTextarea, e: IgrVoidEventArgs) => void;
    blur?: (s: IgrTextarea, e: IgrVoidEventArgs) => void;
}
