import * as React from 'react';
import { TabsAlignment } from "./TabsAlignment";
import { TabsActivation } from "./TabsActivation";
import { IgrTabComponentEventArgs } from "./igr-tab-component-event-args";
import { Tabs } from "./Tabs";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Represents tabs component
*/
export declare class IgrTabs<P extends IIgrTabsProps = IIgrTabsProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Tabs;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Tabs; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrTabs;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Returns the currently selected tab.
    */
    get selected(): string;
    /**
     * Sets the alignment for the tab headers
    */
    get alignment(): TabsAlignment;
    set alignment(v: TabsAlignment);
    /**
     * Determines the tab activation. When set to auto,
     * the tab is instantly selected while navigating with the Left/Right Arrows, Home or End keys
     * and the corresponding panel is displayed.
     * When set to manual, the tab is only focused. The selection happens after pressing Space or Enter.
    */
    get activation(): TabsActivation;
    set activation(v: TabsActivation);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    disconnectedCallback(): void;
    /**
     * Selects the specified tab and displays the corresponding panel.
    
    */
    select(name: string): void;
    private _change;
    private _change_wrapped;
    get change(): (s: IgrTabs, e: IgrTabComponentEventArgs) => void;
    set change(ev: (s: IgrTabs, e: IgrTabComponentEventArgs) => void);
}
export interface IIgrTabsProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Sets the alignment for the tab headers
    */
    alignment?: TabsAlignment | string;
    /**
     * Determines the tab activation. When set to auto,
     * the tab is instantly selected while navigating with the Left/Right Arrows, Home or End keys
     * and the corresponding panel is displayed.
     * When set to manual, the tab is only focused. The selection happens after pressing Space or Enter.
    */
    activation?: TabsActivation | string;
    change?: (s: IgrTabs, e: IgrTabComponentEventArgs) => void;
}
