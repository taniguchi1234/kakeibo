import * as React from 'react';
import { DatePickerMode } from "./DatePickerMode";
import { DatePickerHeaderOrientation } from "./DatePickerHeaderOrientation";
import { DatePickerOrientation } from "./DatePickerOrientation";
import { IgrCalendarResourceStrings } from "./igr-calendar-resource-strings";
import { WeekDays } from "./WeekDays";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrComponentDateValueChangedEventArgs } from "./igr-component-date-value-changed-event-args";
import { DatePart } from "./DatePart";
import { SelectionRangeDirection } from "./SelectionRangeDirection";
import { RangeTextSelectMode } from "./RangeTextSelectMode";
import { IgrBaseComboBoxLike, IIgrBaseComboBoxLikeProps } from "./igr-base-combo-box-like";
import { DatePicker } from "./DatePicker";
import { IDateRangeDescriptor } from "./IDateRangeDescriptor";
/**
 * igc-date-picker is a feature rich component used for entering a date through manual text input or
 * choosing date values from a calendar dialog that pops up.
*/
export declare class IgrDatePicker extends IgrBaseComboBoxLike<IIgrDatePickerProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrDatePickerProps>> {
    protected createImplementation(): DatePicker;
    /**
                                 * @hidden
                                 */
    get i(): DatePicker;
    constructor(props: IIgrDatePickerProps & Omit<React.HTMLAttributes<HTMLElement>, keyof IIgrDatePickerProps>);
    componentDidMount(): void;
    render(): React.DOMElement<any, Element>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * The label of the datepicker.
    */
    get label(): string;
    set label(v: string);
    /**
     * Determines whether the calendar is opened in a dropdown or a modal dialog
    */
    get mode(): DatePickerMode;
    set mode(v: DatePickerMode);
    /**
     * Whether to allow typing in the input.
    */
    get nonEditable(): boolean;
    set nonEditable(v: boolean);
    /**
     * Makes the control a readonly field.
    */
    get readOnly(): boolean;
    set readOnly(v: boolean);
    /**
     * The value of the picker
    */
    get value(): Date;
    set value(v: Date);
    /**
     * Gets/Sets the date which is shown in the calendar picker and is highlighted.
     * By default it is the current date.
    */
    get activeDate(): Date;
    set activeDate(v: Date);
    /**
     * The minimum value required for the date picker to remain valid.
    */
    get min(): Date;
    set min(v: Date);
    /**
     * The maximum value required for the date picker to remain valid.
    */
    get max(): Date;
    set max(v: Date);
    /**
     * The orientation of the calendar header.
    */
    get headerOrientation(): DatePickerHeaderOrientation;
    set headerOrientation(v: DatePickerHeaderOrientation);
    /**
     * The orientation of the multiple months displayed in the calendar's days view.
    */
    get orientation(): DatePickerOrientation;
    set orientation(v: DatePickerOrientation);
    /**
     * Determines whether the calendar hides its header.
    */
    get hideHeader(): boolean;
    set hideHeader(v: boolean);
    /**
     * Controls the visibility of the dates that do not belong to the current month.
    */
    get hideOutsideDays(): boolean;
    set hideOutsideDays(v: boolean);
    /**
     * Gets/sets disabled dates.
    */
    get disabledDates(): IDateRangeDescriptor[];
    set disabledDates(v: IDateRangeDescriptor[]);
    /**
     * Gets/sets special dates.
    */
    get specialDates(): IDateRangeDescriptor[];
    set specialDates(v: IDateRangeDescriptor[]);
    /**
     * Whether the control will have outlined appearance.
    */
    get outlined(): boolean;
    set outlined(v: boolean);
    /**
     * The placeholder attribute of the control.
    */
    get placeholder(): string;
    set placeholder(v: string);
    /**
     * The number of months displayed in the calendar.
    */
    get visibleMonths(): number;
    set visibleMonths(v: number);
    /**
     * Whether to show the number of the week in the calendar.
    */
    get showWeekNumbers(): boolean;
    set showWeekNumbers(v: boolean);
    /**
     * Format to display the value in when not editing.
     * Defaults to the input format if not set.
    */
    get displayFormat(): string;
    set displayFormat(v: string);
    /**
     * The date format to apply on the input.
     * Defaults to the current locale Intl.DateTimeFormat
    */
    get inputFormat(): string;
    set inputFormat(v: string);
    /**
     * The locale settings used to display the value.
    */
    get locale(): string;
    set locale(v: string);
    /**
     * The prompt symbol to use for unfilled parts of the mask.
    */
    get prompt(): string;
    set prompt(v: string);
    /**
     * The resource strings of the calendar.
    */
    get resourceStrings(): IgrCalendarResourceStrings;
    set resourceStrings(v: IgrCalendarResourceStrings);
    /**
     * Sets the start day of the week for the calendar.
    */
    get weekStart(): WeekDays;
    set weekStart(v: WeekDays);
    /**
     * The disabled state of the component
    */
    get disabled(): boolean;
    set disabled(v: boolean);
    /**
     * Makes the control a required field in a form context.
    */
    get required(): boolean;
    set required(v: boolean);
    /**
     * The name attribute of the control.
    */
    get name(): string;
    set name(v: string);
    /**
     * Control the validity of the control.
    */
    get invalid(): boolean;
    set invalid(v: boolean);
    findByName(name: string): any;
    connectedCallback(): void;
    /**
     * Clears the input part of the component of any user input
    
    */
    clear(): void;
    stepUp(datePart: DatePart, delta?: number): void;
    stepDown(datePart: DatePart, delta?: number): void;
    /**
     * Selects the text in the input of the component
    
    */
    select(): void;
    setSelectionRange(start: number, end: number, direction: SelectionRangeDirection): void;
    setRangeText(replacement: string, start: number, end: number, mode: RangeTextSelectMode): void;
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity(): void;
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message: string): void;
    private _opening;
    private _opening_wrapped;
    get opening(): (s: IgrDatePicker, e: IgrVoidEventArgs) => void;
    set opening(ev: (s: IgrDatePicker, e: IgrVoidEventArgs) => void);
    private _opened;
    private _opened_wrapped;
    get opened(): (s: IgrDatePicker, e: IgrVoidEventArgs) => void;
    set opened(ev: (s: IgrDatePicker, e: IgrVoidEventArgs) => void);
    private _closing;
    private _closing_wrapped;
    get closing(): (s: IgrDatePicker, e: IgrVoidEventArgs) => void;
    set closing(ev: (s: IgrDatePicker, e: IgrVoidEventArgs) => void);
    private _closed;
    private _closed_wrapped;
    get closed(): (s: IgrDatePicker, e: IgrVoidEventArgs) => void;
    set closed(ev: (s: IgrDatePicker, e: IgrVoidEventArgs) => void);
    private _change;
    private _change_wrapped;
    get change(): (s: IgrDatePicker, e: IgrComponentDateValueChangedEventArgs) => void;
    set change(ev: (s: IgrDatePicker, e: IgrComponentDateValueChangedEventArgs) => void);
    private _input;
    private _input_wrapped;
    get input(): (s: IgrDatePicker, e: IgrComponentDateValueChangedEventArgs) => void;
    set input(ev: (s: IgrDatePicker, e: IgrComponentDateValueChangedEventArgs) => void);
}
export interface IIgrDatePickerProps extends IIgrBaseComboBoxLikeProps {
    /**
     * The label of the datepicker.
    */
    label?: string;
    /**
     * Determines whether the calendar is opened in a dropdown or a modal dialog
    */
    mode?: DatePickerMode | string;
    /**
     * Whether to allow typing in the input.
    */
    nonEditable?: boolean | string;
    /**
     * Makes the control a readonly field.
    */
    readOnly?: boolean | string;
    /**
     * The value of the picker
    */
    value?: Date;
    /**
     * Gets/Sets the date which is shown in the calendar picker and is highlighted.
     * By default it is the current date.
    */
    activeDate?: Date;
    /**
     * The minimum value required for the date picker to remain valid.
    */
    min?: Date;
    /**
     * The maximum value required for the date picker to remain valid.
    */
    max?: Date;
    /**
     * The orientation of the calendar header.
    */
    headerOrientation?: DatePickerHeaderOrientation | string;
    /**
     * The orientation of the multiple months displayed in the calendar's days view.
    */
    orientation?: DatePickerOrientation | string;
    /**
     * Determines whether the calendar hides its header.
    */
    hideHeader?: boolean | string;
    /**
     * Controls the visibility of the dates that do not belong to the current month.
    */
    hideOutsideDays?: boolean | string;
    /**
     * Gets/sets disabled dates.
    */
    disabledDates?: IDateRangeDescriptor[];
    /**
     * Gets/sets special dates.
    */
    specialDates?: IDateRangeDescriptor[];
    /**
     * Whether the control will have outlined appearance.
    */
    outlined?: boolean | string;
    /**
     * The placeholder attribute of the control.
    */
    placeholder?: string;
    /**
     * The number of months displayed in the calendar.
    */
    visibleMonths?: number | string;
    /**
     * Whether to show the number of the week in the calendar.
    */
    showWeekNumbers?: boolean | string;
    /**
     * Format to display the value in when not editing.
     * Defaults to the input format if not set.
    */
    displayFormat?: string;
    /**
     * The date format to apply on the input.
     * Defaults to the current locale Intl.DateTimeFormat
    */
    inputFormat?: string;
    /**
     * The locale settings used to display the value.
    */
    locale?: string;
    /**
     * The prompt symbol to use for unfilled parts of the mask.
    */
    prompt?: string;
    /**
     * The resource strings of the calendar.
    */
    resourceStrings?: IgrCalendarResourceStrings;
    /**
     * Sets the start day of the week for the calendar.
    */
    weekStart?: WeekDays | string;
    /**
     * The disabled state of the component
    */
    disabled?: boolean | string;
    /**
     * Makes the control a required field in a form context.
    */
    required?: boolean | string;
    /**
     * The name attribute of the control.
    */
    name?: string;
    /**
     * Control the validity of the control.
    */
    invalid?: boolean | string;
    opening?: (s: IgrDatePicker, e: IgrVoidEventArgs) => void;
    opened?: (s: IgrDatePicker, e: IgrVoidEventArgs) => void;
    closing?: (s: IgrDatePicker, e: IgrVoidEventArgs) => void;
    closed?: (s: IgrDatePicker, e: IgrVoidEventArgs) => void;
    change?: (s: IgrDatePicker, e: IgrComponentDateValueChangedEventArgs) => void;
    input?: (s: IgrDatePicker, e: IgrComponentDateValueChangedEventArgs) => void;
}
