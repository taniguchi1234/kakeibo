import * as React from 'react';
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { Dialog } from "./Dialog";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { ContentChildrenManager } from "igniteui-react-core";
/**
 * Represents a Dialog component.
*/
export declare class IgrDialog<P extends IIgrDialogProps = IIgrDialogProps> extends React.Component<P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>, {}> {
    protected createImplementation(): Dialog;
    protected _implementation: any;
    protected mounted: boolean;
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    get i(): Dialog; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrDialog;
    protected _renderer: ReactRenderer;
    protected _portalManager: PortalManager;
    protected onImplementationCreated(): void;
    protected _contentChildrenManager: ContentChildrenManager;
    constructor(props: P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): React.DOMElement<{
        ref: (ref: any) => void;
        id: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["id"];
        class: (P & Omit<React.HTMLAttributes<HTMLElement>, keyof P>)["className"];
        style: {};
        children: any[];
    }, any>;
    protected _elRef: HTMLElement;
    protected _getMainRef(ref: any): void;
    /**
     * Whether the dialog should be kept open when pressing the 'ESCAPE' button.
    */
    get keepOpenOnEscape(): boolean;
    set keepOpenOnEscape(v: boolean);
    /**
     * Whether the dialog should be closed when clicking outside of it.
    */
    get closeOnOutsideClick(): boolean;
    set closeOnOutsideClick(v: boolean);
    /**
     * Whether to hide the default action button for the dialog.
     * When there is projected content in the `footer` slot this property
     * has no effect.
    */
    get hideDefaultAction(): boolean;
    set hideDefaultAction(v: boolean);
    /**
     * Whether the dialog is opened.
    */
    get open(): boolean;
    set open(v: boolean);
    /**
     * Sets the title of the dialog.
    */
    get title(): string;
    set title(v: string);
    /**
     * Sets the return value for the dialog.
    */
    get returnValue(): string;
    set returnValue(v: string);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    setNativeElement(element: any): void;
    /**
     * Opens the dialog.
    
    */
    show(): boolean;
    /**
     * Closes the dialog.
    
    */
    hide(): boolean;
    /**
     * Toggles the open state of the dialog.
    
    */
    toggle(): boolean;
    private _closing;
    private _closing_wrapped;
    get closing(): (s: IgrDialog, e: IgrVoidEventArgs) => void;
    set closing(ev: (s: IgrDialog, e: IgrVoidEventArgs) => void);
    private _closed;
    private _closed_wrapped;
    get closed(): (s: IgrDialog, e: IgrVoidEventArgs) => void;
    set closed(ev: (s: IgrDialog, e: IgrVoidEventArgs) => void);
}
export interface IIgrDialogProps {
    children?: React.ReactNode;
    id?: string | undefined;
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    /**
     * Whether the dialog should be kept open when pressing the 'ESCAPE' button.
    */
    keepOpenOnEscape?: boolean | string;
    /**
     * Whether the dialog should be closed when clicking outside of it.
    */
    closeOnOutsideClick?: boolean | string;
    /**
     * Whether to hide the default action button for the dialog.
     * When there is projected content in the `footer` slot this property
     * has no effect.
    */
    hideDefaultAction?: boolean | string;
    /**
     * Whether the dialog is opened.
    */
    open?: boolean | string;
    /**
     * Sets the title of the dialog.
    */
    title?: string;
    /**
     * Sets the return value for the dialog.
    */
    returnValue?: string;
    closing?: (s: IgrDialog, e: IgrVoidEventArgs) => void;
    closed?: (s: IgrDialog, e: IgrVoidEventArgs) => void;
}
