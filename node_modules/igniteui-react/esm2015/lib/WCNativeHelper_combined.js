/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, IList_$type, typeCast, String_$type, Boolean_$type, Delegate_$type, Type, getBoxIfEnum, markType, EnumBox, EnumUtil, Number_$type, runOn, delegateCombine, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { toSpinal } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { INotifyCollectionChanged_$type } from "igniteui-react-core";
/**
 * @hidden
 */
export let WCNativeHelper = /*@__PURE__*/ (() => {
    class WCNativeHelper extends Base {
        constructor() {
            super(...arguments);
            this.e = null;
            this.a = new Dictionary$2(String_$type, Delegate_$type, 0);
            this.b = new Dictionary$2(String_$type, Delegate_$type, 0);
            this.d = new Dictionary$2(String_$type, Base.$, 0);
            this.c = new Dictionary$2(String_$type, Base.$, 0);
        }
        get o() {
            return this.e;
        }
        set o(a) {
            let val_ = a;
            if ((val_.___wcElement)) {
                val_ = val_.___wcElement;
            }
            this.e = val_;
        }
        n(propertyName_) {
            let target_ = this.o;
            let a = target_[propertyName_];
            return a;
        }
        m(propertyName_, a) {
            let target_ = this.o;
            let b = target_[propertyName_];
            b = this.g(b, a);
            return b;
        }
        k(propertyName_, a, b) {
            let target_ = this.o;
            let c = target_[propertyName_];
            if (c == null || c == undefined) {
                return null;
            }
            c = this.g(c, b);
            if (!(typeCast(IList_$type, c) !== null)) {
                let d = a(c);
                let e = c;
                for (let f = 0; f < e.length; f++) {
                    d.add(e[f]);
                }
                c = d;
            }
            return c;
        }
        l(propertyName_, a, b, c) {
            let target_ = this.o;
            let d = target_[propertyName_];
            if (d == null || d == undefined || !(typeCast(IList_$type, d) !== null)) {
                d = a(null);
            }
            let e = new List$1(String_$type, 0);
            for (let g = 0; g < c.length; g++) {
                let f = c[g];
                let h = "igc-" + toSpinal(f);
                e.add(h);
            }
            let i = new HtmlMarkupHelperCollection(target_, "igc", (j) => e.contains((j.tagName).toLowerCase()), d);
            return d;
        }
        g(obj_, a) {
            return WCNativeHelper.h(obj_, a);
        }
        static h(obj_, a) {
            if (obj_ == null || obj_ == undefined) {
                return null;
            }
            if (obj_ != null) {
                if ((obj_.___wcElement)) {
                    obj_ = obj_.___wcElement;
                }
            }
            if (obj_ != null) {
                if ((obj_._implementation) || ((obj_.nativeElement) && (obj_.setNativeElement))) {
                    return obj_;
                }
            }
            if (obj_ != null) {
                let arr_ = (Array.isArray(obj_) ? obj_ : null);
                if (arr_ != null) {
                    let b = new Array(arr_.length);
                    for (let c = 0; c < arr_.length; c++) {
                        b[c] = WCNativeHelper.h(arr_[c], a);
                    }
                    return b;
                }
            }
            let d = (obj_.externalObject);
            let ext_ = null;
            if (!d) {
                ext_ = a(obj_);
                if (ext_ != obj_) {
                    obj_.externalObject = ext_;
                    if ((ext_.setNativeElement)) {
                        ext_.setNativeElement(obj_);
                    }
                    else {
                        return obj_;
                    }
                }
            }
            else {
                ext_ = obj_.externalObject;
            }
            return ext_;
        }
        i(obj_) {
            return WCNativeHelper.j(obj_);
        }
        static j(obj_) {
            if (obj_ == null) {
                return obj_;
            }
            let arr_ = (Array.isArray(obj_) ? obj_ : null);
            if (arr_ != null) {
                let a = new Array(arr_.length);
                for (let b = 0; b < arr_.length; b++) {
                    a[b] = WCNativeHelper.j(arr_[b]);
                }
                return a;
            }
            if (obj_ != null && (obj_._implementation)) {
                obj_ = obj_._implementation;
            }
            if (obj_ != null && (obj_.$type) && (obj_.setNativeElement)) {
                obj_ = obj_.nativeElement;
            }
            if ((obj_ && obj_ instanceof EnumBox)) {
                obj_ = WCNativeHelper.camel(obj_.toString());
            }
            if (obj_ != null && (obj_._ngElementStrategy) && (obj_._ngElementStrategy.componentRef) && (obj_._ngElementStrategy.componentRef.instance)) {
                obj_ = obj_._ngElementStrategy.componentRef.instance;
            }
            return obj_;
        }
        w(propertyName_, value_) {
            let target_ = this.o;
            if (typeCast(Boolean_$type, value_) !== null && (target_ instanceof HTMLElement)) {
                let a = (toSpinal(propertyName_));
                let b = value_;
                if (b) {
                    target_.setAttribute(propertyName_, "");
                }
                else {
                    target_.removeAttribute(propertyName_);
                }
            }
            value_ = this.i(value_);
            if ((value_ && value_ instanceof EnumBox)) {
                value_ = value_.value;
            }
            target_[propertyName_] = value_;
        }
        static r(a) {
            if (a == null) {
                return a;
            }
            return a.substr(0, 1).toUpperCase() + a.substr(1);
        }
        static camel(a) {
            if (a == null) {
                return a;
            }
            return a.substr(0, 1).toLowerCase() + a.substr(1);
        }
        static getActualName(a) {
            return (a.getActualName());
        }
        s(a, b, c = true) {
            let wcName_ = "igc" + WCNativeHelper.r(a);
            if (!c) {
                wcName_ = a;
            }
            let d = null;
            let e = null;
            if (this.a.containsKey(a)) {
                d = this.a.item(a);
                e = this.b.item(a);
            }
            let f = b;
            let target_ = this.o;
            if (d != null) {
                let old_ = e;
                target_.removeEventListener(wcName_, old_);
                this.a.removeItem(a);
                this.b.removeItem(a);
            }
            if (f != null) {
                let nativeHandler_ = (ev_) => {
                    let g = null;
                    if (ev_ != null) {
                        g = ev_.detail;
                    }
                    f(g);
                };
                this.a.addItem(a, f);
                this.b.addItem(a, nativeHandler_);
                target_.addEventListener(wcName_, nativeHandler_);
            }
        }
        t(a, b, c) {
            let d = null;
            let e = null;
            if (this.d.containsKey(a)) {
                d = this.d.item(a);
                e = this.c.item(a);
            }
            let f = c;
            let target_ = this.o;
            let g = null;
            if (d != null) {
                let old_ = d;
                this.d.removeItem(a);
                this.c.removeItem(a);
                g = null;
            }
            if (f != null) {
                let nativeTemplate_ = (args_) => {
                    let h = (args_.externalObject);
                    let ext_ = null;
                    if (!h) {
                        ext_ = b(args_);
                        if (ext_ != args_) {
                            args_.externalObject = ext_;
                            ext_.setNativeElement(args_);
                        }
                    }
                    else {
                        ext_ = args_.externalObject;
                    }
                    return f(ext_);
                };
                this.u(nativeTemplate_, f);
                this.d.addItem(a, f);
                this.c.addItem(a, nativeTemplate_);
                g = nativeTemplate_;
            }
            this.w(a, g);
        }
        f($t, a) {
            if (typeof a === 'string') {
                let b = Type.createInstance($t);
                let c = EnumUtil.tryParse$1($t, a, true, b);
                b = c.p2;
                return getBoxIfEnum($t, b);
            }
            return a;
        }
        u(nativeTemplate_, newTemplate_) {
            if ((newTemplate_.___isBridged)) {
                nativeTemplate_.___isBridged = newTemplate_.___isBridged;
                nativeTemplate_.___templateId = newTemplate_.___templateId;
                nativeTemplate_.___containerId = newTemplate_.___containerId;
                nativeTemplate_.___container = newTemplate_.___container;
                nativeTemplate_.___onTemplateInit = newTemplate_.___onTemplateInit;
                nativeTemplate_.___onTemplateTeardown = newTemplate_.___onTemplateTeardown;
                nativeTemplate_.___checkHost = newTemplate_.___checkHost;
                nativeTemplate_.___onTemplateContextChanged = newTemplate_.___onTemplateContextChanged;
            }
        }
        v(a) {
            let wcName_ = "igc" + WCNativeHelper.r(a);
            let target_ = this.o;
            let b = null;
            let c = null;
            if (this.a.containsKey(a)) {
                b = this.a.item(a);
                c = this.b.item(a);
            }
            if (b != null) {
                let old_ = c;
                target_.removeEventListener(wcName_, old_);
                this.a.removeItem(a);
                this.b.removeItem(a);
            }
        }
    }
    WCNativeHelper.$t = /*@__PURE__*/ markType(WCNativeHelper, 'WCNativeHelper');
    return WCNativeHelper;
})();
/**
 * @hidden
 */
export let HtmlMarkupHelperCollection = /*@__PURE__*/ (() => {
    class HtmlMarkupHelperCollection extends Base {
        get b() {
            let a = Array.from(this._target.children);
            return a;
        }
        a() {
            return this.c(this._target, 1);
        }
        c(a, b = 0) {
            let c = new List$1(Tuple$2.$.specialize(Number_$type, Base.$), 0);
            let d = (Array.from((a === null || a === void 0 ? void 0 : a.children) || []));
            for (let e = 0; e < d.length; e++) {
                let f = d[e];
                if (this.e(f)) {
                    c.add(new Tuple$2(Number_$type, Base.$, e, f));
                }
                else if (b >= 1) {
                    let g = getComputedStyle(f).getPropertyValue("display");
                    if (f.tagName.toLowerCase() == "div" && g != null && g.toLowerCase() == "none") {
                        let h = this.c(f, b - 1);
                        c.o(h);
                    }
                }
            }
            return c.toArray();
        }
        k() {
            let a = this.a();
            for (let b = 0; b < a.length; b++) {
                a[b].d.remove();
            }
        }
        n(a, b) {
            let c = this.a();
            if (a > c.length - 1 || a < 0) {
                return;
            }
            c[a].d.replaceWith(b);
            return;
        }
        m(a) {
            let b = this.a();
            if (a > b.length - 1 || a < 0) {
                return;
            }
            let c = b[a];
            c.d.remove();
        }
        l(a, b) {
            let c = this.a();
            if (c.length == 0) {
                this._target.append(b);
            }
            else {
                if (c.length - 1 < a) {
                    let d = c[c.length - 1].d;
                    d.after(b);
                    return;
                }
                let e = c[a].d;
                e.after(b);
            }
        }
        j(a) {
            let b = this.a();
            if (b.length == 0) {
                this._target.append(a);
            }
            else {
                let c = b[b.length - 1].d;
                c.after(a);
            }
        }
        constructor(a, b, c, d) {
            super();
            this._target = null;
            this.e = null;
            this.d = null;
            this._target = a;
            this.e = c;
            this.d = d;
            this.h();
            if (typeCast(INotifyCollectionChanged_$type, this.d) !== null) {
                let e = this.d;
                e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.i));
            }
        }
        h() {
            let a = this.a();
            for (let c = 0; c < a.length; c++) {
                let b = a[c];
                this.d.add(b.d);
            }
        }
        g(a) {
            return WCNativeHelper.j(a);
        }
        i(a, b) {
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            let d = b.newItems.item(c);
                            this.l(c + b.newStartingIndex, this.g(d));
                        }
                    }
                    break;
                case 1:
                    if (b.oldItems != null) {
                        for (let e = 0; e < b.oldItems.count; e++) {
                            this.m(b.oldStartingIndex);
                        }
                    }
                    break;
                case 2:
                    if (b.oldItems != null) {
                        for (let f = 0; f < b.oldItems.count; f++) {
                            this.m(b.oldStartingIndex);
                        }
                    }
                    if (b.newItems != null) {
                        for (let g = 0; g < b.newItems.count; g++) {
                            let h = b.newItems.item(g);
                            this.l(g + b.newStartingIndex, this.g(b.newItems.item(g)));
                        }
                    }
                    break;
                case 4:
                    this.k();
                    for (let i of fromEn(this.d)) {
                        let j = i;
                        this.j(this.g(j));
                    }
                    break;
            }
        }
    }
    HtmlMarkupHelperCollection.$t = /*@__PURE__*/ markType(HtmlMarkupHelperCollection, 'HtmlMarkupHelperCollection');
    return HtmlMarkupHelperCollection;
})();
