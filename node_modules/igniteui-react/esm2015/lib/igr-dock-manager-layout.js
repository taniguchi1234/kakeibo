import { IgrSplitPane } from "./igr-split-pane";
import { IgrSplitPaneCollection } from "./igr-split-pane-collection";
import { DockManagerLayout as DockManagerLayout_internal } from "./DockManagerLayout";
import { SplitPaneCollection as SplitPaneCollection_internal } from "./SplitPaneCollection";
import { SplitPane } from "./SplitPane";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
/**
 * Describes a Dock Manager layout.
*/
export class IgrDockManagerLayout {
    createImplementation() {
        return new DockManagerLayout_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._floatingPanes = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    get name() {
        return this.i.h;
    }
    set name(v) {
        this.i.h = v;
    }
    /**
     * The root split pane of the layout.
    */
    get rootPane() {
        const r = this.i.a;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrSplitPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set rootPane(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * The floating panes of the layout.
    */
    get floatingPanes() {
        if (this._floatingPanes === null) {
            let coll = new IgrSplitPaneCollection();
            let innerColl = this.i.b;
            if (!innerColl) {
                innerColl = new SplitPaneCollection_internal();
            }
            this._floatingPanes = coll._fromInner(innerColl);
        }
        return this._floatingPanes;
    }
    set floatingPanes(v) {
        if (this._floatingPanes !== null) {
            this._floatingPanes._setSyncTarget(null);
            this._floatingPanes = null;
        }
        let coll = new IgrSplitPaneCollection();
        this._floatingPanes = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(SplitPane.$type);
        let innerColl = this.i.b;
        if (!innerColl) {
            innerColl = new SplitPaneCollection_internal();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._floatingPanes._setSyncTarget(syncColl);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.rootPane && this.rootPane.name && this.rootPane.name == name) {
            return this.rootPane;
        }
        if (this.floatingPanes != null && this.floatingPanes.findByName && this.floatingPanes.findByName(name)) {
            return this.floatingPanes.findByName(name);
        }
        return null;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
