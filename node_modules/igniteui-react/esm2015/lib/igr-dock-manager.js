import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrDockManagerLayout } from "./igr-dock-manager-layout";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { IgrDockManagerPoint } from "./igr-dock-manager-point";
import { IgrContentPane } from "./igr-content-pane";
import { DockManagerShowHeaderIconOnHover_$type } from "./DockManagerShowHeaderIconOnHover";
import { IgrDockManagerResourceStrings } from "./igr-dock-manager-resource-strings";
import { DockManagerShowPaneHeaders_$type } from "./DockManagerShowPaneHeaders";
import { IgrLayoutChangeEventArgs } from "./igr-layout-change-event-args";
import { DockManager } from "./DockManager";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { defineCustomElements } from "igniteui-dockmanager/loader";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * Describes a Dock Manager component.
*/
export class IgrDockManager extends React.Component {
    createImplementation() {
        return new DockManager();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._layoutChange = null;
        this._layoutChange_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        defineCustomElements();
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-dockmanager", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * Gets/sets the layout configuration of the Dock Manager.
    */
    get layout() {
        const r = this.i.b;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDockManagerLayout();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set layout(v) {
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets/sets the currently dragged pane.
    */
    get draggedPane() {
        const r = this.i.c;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrDockManagerPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set draggedPane(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.c = null : this.i.c = v.i;
    }
    /**
     * Gets/sets the current drop position when performing custom drag/drop.
    */
    get dropPosition() {
        const r = this.i.e;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDockManagerPoint();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set dropPosition(v) {
        v == null ? this.i.e = null : this.i.e = v.i;
    }
    /**
     * Gets/sets the active pane of the Dock Manager.
    */
    get activePane() {
        const r = this.i.a;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrContentPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set activePane(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * Determines whether the end user is allowed to maximize panes. Defaults to true.
    */
    get allowMaximize() {
        return this.i.n;
    }
    set allowMaximize(v) {
        this.i.n = ensureBool(v);
    }
    /**
     * Determines whether the floating panes are kept inside the Dock Manager boundaries. Defaults to false.
    */
    get containedInBoundaries() {
        return this.i.o;
    }
    set containedInBoundaries(v) {
        this.i.o = ensureBool(v);
    }
    /**
     * Determines which tab header icons should show when hovering over the tab with the mouse. Defaults to undefined.
    */
    get showHeaderIconOnHover() {
        return this.i.g;
    }
    set showHeaderIconOnHover(v) {
        this.i.g = ensureEnum(DockManagerShowHeaderIconOnHover_$type, v);
    }
    /**
     * Gets/sets the maximized pane.
    */
    get maximizedPane() {
        const r = this.i.d;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrDockManagerPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set maximizedPane(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.d = null : this.i.d = v.i;
    }
    /**
     * Gets/sets the resource strings.
    */
    get resourceStrings() {
        const r = this.i.f;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDockManagerResourceStrings();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set resourceStrings(v) {
        v == null ? this.i.f = null : this.i.f = v.i;
    }
    /**
     * Determines whether the end user is allowed to resize floating panes. Defaults to true.
    */
    get allowFloatingPanesResize() {
        return this.i.l;
    }
    set allowFloatingPanesResize(v) {
        this.i.l = ensureBool(v);
    }
    /**
     * Disables the built-in keyboard shortcuts for pane navigation. Defaults to false.
    */
    get disableKeyboardNavigation() {
        return this.i.p;
    }
    set disableKeyboardNavigation(v) {
        this.i.p = ensureBool(v);
    }
    /**
     * Determines whether the end user is allowed to inner dock panes. Defaults to true.
    */
    get allowInnerDock() {
        return this.i.m;
    }
    set allowInnerDock(v) {
        this.i.m = ensureBool(v);
    }
    /**
     * Determines whether pane headers are only shown on hover or always visible. Defaults to 'always'.
    */
    get showPaneHeaders() {
        return this.i.h;
    }
    set showPaneHeaders(v) {
        this.i.h = ensureEnum(DockManagerShowPaneHeaders_$type, v);
    }
    /**
     * Determines whether the end user can dock the dragged pane by dragging it close to the target pane edges.
     * If enabled, docking indicators are not visible. Defaults to false.
    */
    get proximityDock() {
        return this.i.q;
    }
    set proximityDock(v) {
        this.i.q = ensureBool(v);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.layout && this.layout.name && this.layout.name == name) {
            return this.layout;
        }
        if (this.draggedPane && this.draggedPane.name && this.draggedPane.name == name) {
            return this.draggedPane;
        }
        if (this.dropPosition && this.dropPosition.name && this.dropPosition.name == name) {
            return this.dropPosition;
        }
        if (this.activePane && this.activePane.name && this.activePane.name == name) {
            return this.activePane;
        }
        if (this.maximizedPane && this.maximizedPane.name && this.maximizedPane.name == name) {
            return this.maximizedPane;
        }
        if (this.resourceStrings && this.resourceStrings.name && this.resourceStrings.name == name) {
            return this.resourceStrings;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DockManager");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.draggedPane && this.draggedPane._styling) {
            this.draggedPane._styling(container, component, this);
        }
        if (this.activePane && this.activePane._styling) {
            this.activePane._styling(container, component, this);
        }
        if (this.maximizedPane && this.maximizedPane._styling) {
            this.maximizedPane._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    /**
     * Focuses a pane from the layout.
    
    */
    focusPane(contentId) {
        this.i.t(contentId);
    }
    get layoutChange() {
        return this._layoutChange;
    }
    set layoutChange(ev) {
        if (this._layoutChange_wrapped !== null) {
            this.i.layoutChange = delegateRemove(this.i.layoutChange, this._layoutChange_wrapped);
            this._layoutChange_wrapped = null;
            this._layoutChange = null;
        }
        this._layoutChange = ev;
        this._layoutChange_wrapped = (o, e) => {
            let outerArgs = new IgrLayoutChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeLayoutChange) {
                this.beforeLayoutChange(this, outerArgs);
            }
            if (this._layoutChange) {
                this._layoutChange(this, outerArgs);
            }
        };
        this.i.layoutChange = delegateCombine(this.i.layoutChange, this._layoutChange_wrapped);
        if (this.i.layoutChangeChanged) {
            this.i.layoutChangeChanged();
        }
        ;
    }
}
