import * as React from 'react';
import { TreeItem } from "./TreeItem";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcTreeItemComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * The tree-item component represents a child item of the tree component or another tree item.
*/
export class IgrTreeItem extends React.Component {
    createImplementation() {
        return new TreeItem();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcTreeItemComponent);
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-tree-item", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The parent item of the current tree item (if any)
    */
    get parent() {
        const r = this.i.b;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrTreeItem({});
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set parent(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * The depth of the item, relative to the root.
    */
    get level() {
        return this.i.j;
    }
    set level(v) {
        this.i.j = +v;
    }
    /**
     * The tree item label.
    */
    get label() {
        return this.i.n;
    }
    set label(v) {
        this.i.n = v;
    }
    /**
     * The tree item expansion state.
    */
    get expanded() {
        return this.i.g;
    }
    set expanded(v) {
        this.i.g = ensureBool(v);
    }
    /**
     * Marks the item as the tree's active item.
    */
    get active() {
        return this.i.e;
    }
    set active(v) {
        this.i.e = ensureBool(v);
    }
    /**
     * Get/Set whether the tree item is disabled. Disabled items are ignored for user interactions.
    */
    get disabled() {
        return this.i.f;
    }
    set disabled(v) {
        this.i.f = ensureBool(v);
    }
    /**
     * The tree item selection state.
    */
    get selected() {
        return this.i.i;
    }
    set selected(v) {
        this.i.i = ensureBool(v);
    }
    /**
     * To be used for load-on-demand scenarios in order to specify whether the item is loading data.
    */
    get loading() {
        return this.i.h;
    }
    set loading(v) {
        this.i.h = ensureBool(v);
    }
    /**
     * The value entry that the tree item is visualizing. Required for searching through items.
     * @type any
    */
    get value() {
        return this.i.m;
    }
    set value(v) {
        this.i.m = v;
    }
    /**
     * The full path to the tree item, starting from the top-most ancestor.
    */
    get path() {
        if (!this.i.a) {
            return undefined;
        }
        let ret = [];
        for (let i = 0; i < this.i.a.length; i++) {
            let impl = this.i.a[i];
            if (!impl.externalObject) {
                if (impl instanceof IgrTreeItem) {
                    ret.push(impl);
                    continue;
                }
                let e = IgrTreeItem._createFromInternal(impl);
                e._implementation = impl;
                impl.externalObject = e;
            }
            ret.push(impl.externalObject);
        }
        return ret;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.parent && this.parent.name && this.parent.name == name) {
            return this.parent;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("TreeItem");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.parent && this.parent._styling) {
            this.parent._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    connectedCallback() {
        this.i.q();
    }
    disconnectedCallback() {
        this.i.r();
    }
    /**
     * @private
     * Expands the tree item.
    
    */
    expandWithEvent() {
        this.i.t();
    }
    /**
     * @private
     * Collapses the tree item.
    
    */
    collapseWithEvent() {
        this.i.p();
    }
    /**
     * Toggles tree item expansion state.
    
    */
    toggle() {
        this.i.v();
    }
    /**
     * Expands the tree item.
    
    */
    expand() {
        this.i.s();
    }
    /**
     * Collapses the tree item.
    
    */
    collapse() {
        this.i.o();
    }
}
