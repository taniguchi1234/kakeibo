import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { TextareaAutocapitalize_$type } from "./TextareaAutocapitalize";
import { TextareaInputMode_$type } from "./TextareaInputMode";
import { TextareaResize_$type } from "./TextareaResize";
import { TextareaWrap_$type } from "./TextareaWrap";
import { IgrComponentValueChangedEventArgs } from "./igr-component-value-changed-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { Textarea } from "./Textarea";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcTextareaComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureEnum, ensureBool, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * This element represents a multi-line plain-text editing control,
 * useful when you want to allow users to enter a sizeable amount of free-form text,
 * for example a comment on a review or feedback form.
*/
export class IgrTextarea extends React.Component {
    createImplementation() {
        return new Textarea();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._input = null;
        this._input_wrapped = null;
        this._change = null;
        this._change_wrapped = null;
        this._focus = null;
        this._focus_wrapped = null;
        this._blur = null;
        this._blur_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcTextareaComponent);
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-textarea", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,
     * as well as guidance to the browser as to the type of information expected in the field.
     * Refer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.
    */
    get autocomplete() {
        return this.i.w;
    }
    set autocomplete(v) {
        this.i.w = v;
    }
    /**
     * Controls whether and how text input is automatically capitalized as it is entered/edited by the user.
     * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).
    */
    get autocapitalize() {
        return this.i.c;
    }
    set autocapitalize(v) {
        this.i.c = ensureEnum(TextareaAutocapitalize_$type, v);
    }
    /**
     * Hints at the type of data that might be entered by the user while editing the element or its contents.
     * This allows a browser to display an appropriate virtual keyboard.
     * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
    */
    get inputMode() {
        return this.i.d;
    }
    set inputMode(v) {
        this.i.d = ensureEnum(TextareaInputMode_$type, v);
    }
    /**
     * The label for the control.
    */
    get label() {
        return this.i.x;
    }
    set label(v) {
        this.i.x = v;
    }
    /**
     * The maximum number of characters (UTF-16 code units) that the user can enter.
     * If this value isn't specified, the user can enter an unlimited number of characters.
    */
    get maxLength() {
        return this.i.r;
    }
    set maxLength(v) {
        this.i.r = +v;
    }
    /**
     * The minimum number of characters (UTF-16 code units) required that the user should enter.
    */
    get minLength() {
        return this.i.s;
    }
    set minLength(v) {
        this.i.s = +v;
    }
    /**
     * Whether the control will have outlined appearance.
    */
    get outlined() {
        return this.i.m;
    }
    set outlined(v) {
        this.i.m = ensureBool(v);
    }
    /**
     * The placeholder attribute of the control.
    */
    get placeholder() {
        return this.i.z;
    }
    set placeholder(v) {
        this.i.z = v;
    }
    /**
     * Makes the control a readonly field.
    */
    get readOnly() {
        return this.i.n;
    }
    set readOnly(v) {
        this.i.n = ensureBool(v);
    }
    /**
     * Controls whether the control can be resized.
     * When `auto` is set, the control will try to expand and fit its content.
    */
    get resize() {
        return this.i.e;
    }
    set resize(v) {
        this.i.e = ensureEnum(TextareaResize_$type, v);
    }
    /**
     * The number of visible text lines for the control. If it is specified, it must be a positive integer.
     * If it is not specified, the default value is 2.
    */
    get rows() {
        return this.i.t;
    }
    set rows(v) {
        this.i.t = +v;
    }
    /**
     * The value of the component
    */
    get value() {
        return this.i.aa;
    }
    set value(v) {
        this.i.aa = v;
    }
    /**
     * Controls whether the element may be checked for spelling errors.
    */
    get spellcheck() {
        return this.i.p;
    }
    set spellcheck(v) {
        this.i.p = ensureBool(v);
    }
    /**
     * Indicates how the control should wrap the value for form submission.
     * Refer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)
     * for explanation of the available values.
    */
    get wrap() {
        return this.i.f;
    }
    set wrap(v) {
        this.i.f = ensureEnum(TextareaWrap_$type, v);
    }
    /**
     * Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property
     * when it is defined.
    */
    get validateOnly() {
        return this.i.q;
    }
    set validateOnly(v) {
        this.i.q = ensureBool(v);
    }
    /**
     * The disabled state of the component
    */
    get disabled() {
        return this.i.k;
    }
    set disabled(v) {
        this.i.k = ensureBool(v);
    }
    /**
     * Makes the control a required field in a form context.
    */
    get required() {
        return this.i.o;
    }
    set required(v) {
        this.i.o = ensureBool(v);
    }
    /**
     * The name attribute of the control.
    */
    get name() {
        return this.i.y;
    }
    set name(v) {
        this.i.y = v;
    }
    /**
     * Control the validity of the control.
    */
    get invalid() {
        return this.i.l;
    }
    set invalid(v) {
        this.i.l = ensureBool(v);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Textarea");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    connectedCallback() {
        this.i.ae();
    }
    disconnectedCallback() {
        this.i.af();
    }
    /**
     * Selects all text within the control.
    
    */
    select() {
        this.i.aj();
    }
    setSelectionRange(start, end, direction) {
        this.i.an(start, end, (direction == null ? null : direction));
    }
    setRangeText(replacement, start, end, selectMode) {
        this.i.am(replacement, start, end, (selectMode == null ? null : selectMode));
    }
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity() {
        this.i.ai();
    }
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity() {
        this.i.ad();
    }
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message) {
        this.i.ak(message);
    }
    get input() {
        return this._input;
    }
    set input(ev) {
        if (this._input_wrapped !== null) {
            this.i.input = delegateRemove(this.i.input, this._input_wrapped);
            this._input_wrapped = null;
            this._input = null;
        }
        this._input = ev;
        this._input_wrapped = (o, e) => {
            let outerArgs = new IgrComponentValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeInput) {
                this.beforeInput(this, outerArgs);
            }
            if (this._input) {
                this._input(this, outerArgs);
            }
        };
        this.i.input = delegateCombine(this.i.input, this._input_wrapped);
        if (this.i.inputChanged) {
            this.i.inputChanged();
        }
        ;
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrComponentValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
    get focus() {
        return this._focus;
    }
    set focus(ev) {
        if (this._focus_wrapped !== null) {
            this.i.focus = delegateRemove(this.i.focus, this._focus_wrapped);
            this._focus_wrapped = null;
            this._focus = null;
        }
        this._focus = ev;
        this._focus_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFocus) {
                this.beforeFocus(this, outerArgs);
            }
            if (this._focus) {
                this._focus(this, outerArgs);
            }
        };
        this.i.focus = delegateCombine(this.i.focus, this._focus_wrapped);
        if (this.i.focusChanged) {
            this.i.focusChanged();
        }
        ;
    }
    get blur() {
        return this._blur;
    }
    set blur(ev) {
        if (this._blur_wrapped !== null) {
            this.i.blur = delegateRemove(this.i.blur, this._blur_wrapped);
            this._blur_wrapped = null;
            this._blur = null;
        }
        this._blur = ev;
        this._blur_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeBlur) {
                this.beforeBlur(this, outerArgs);
            }
            if (this._blur) {
                this._blur(this, outerArgs);
            }
        };
        this.i.blur = delegateCombine(this.i.blur, this._blur_wrapped);
        if (this.i.blurChanged) {
            this.i.blurChanged();
        }
        ;
    }
}
