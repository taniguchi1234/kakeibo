/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { Base, enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { ExpansionPanelIndicatorPosition_$type } from "./ExpansionPanelIndicatorPosition";
/**
 * @hidden
 */
export let ExpansionPanel = /*@__PURE__*/ (() => {
    class ExpansionPanel extends BaseElement {
        constructor() {
            super(...arguments);
            this.f = new WCNativeHelper();
            this.m = null;
            this.opening = null;
            this.opened = null;
            this.closing = null;
            this.closed = null;
        }
        get g() {
            return this.f;
        }
        get nativeElement() {
            return this.m;
        }
        set nativeElement(a) {
            this.m = a;
            this.f.o = this.m;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get j() {
            let ret_ = this.g.n("open");
            return ret_;
        }
        set j(a) {
            let value_ = a;
            this.g.w("open", value_);
        }
        get h() {
            let ret_ = this.g.n("disabled");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.g.w("disabled", value_);
        }
        get e() {
            let ret_ = this.g.n("indicatorPosition");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ExpansionPanelIndicatorPosition_$type, EnumUtil.getEnumValue(ExpansionPanelIndicatorPosition_$type, this.g.f(ExpansionPanelIndicatorPosition_$type, ret_)));
            return EnumUtil.getEnumValue(ExpansionPanelIndicatorPosition_$type, ret_);
        }
        set e(a) {
            let value_ = enumGetBox(ExpansionPanelIndicatorPosition_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.g.w("indicatorPosition", value_);
        }
        openingChanged() {
            if (this.opening != null) {
                this.g.s("opening", (a) => this.opening(this, ExpansionPanelComponentEventArgs.b(a)));
            }
            else {
                this.g.v("opening");
            }
        }
        openedChanged() {
            if (this.opened != null) {
                this.g.s("opened", (a) => this.opened(this, ExpansionPanelComponentEventArgs.b(a)));
            }
            else {
                this.g.v("opened");
            }
        }
        closingChanged() {
            if (this.closing != null) {
                this.g.s("closing", (a) => this.closing(this, ExpansionPanelComponentEventArgs.b(a)));
            }
            else {
                this.g.v("closing");
            }
        }
        closedChanged() {
            if (this.closed != null) {
                this.g.s("closed", (a) => this.closed(this, ExpansionPanelComponentEventArgs.b(a)));
            }
            else {
                this.g.v("closed");
            }
        }
        q() {
            this.nativeElement.connectedCallback();
        }
        l() {
            return (this.nativeElement.toggle());
        }
        i() {
            return (this.nativeElement.hide());
        }
        k() {
            return (this.nativeElement.show());
        }
    }
    ExpansionPanel.$t = /*@__PURE__*/ markType(ExpansionPanel, 'ExpansionPanel', BaseElement.$);
    return ExpansionPanel;
})();
/**
 * @hidden
 */
export let ExpansionPanelComponentEventArgs = /*@__PURE__*/ (() => {
    class ExpansionPanelComponentEventArgs extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
        static b(a) {
            return ((() => {
                let $ret = new ExpansionPanelComponentEventArgs();
                $ret.a = a;
                return $ret;
            })());
        }
    }
    ExpansionPanelComponentEventArgs.$t = /*@__PURE__*/ markType(ExpansionPanelComponentEventArgs, 'ExpansionPanelComponentEventArgs');
    return ExpansionPanelComponentEventArgs;
})();
