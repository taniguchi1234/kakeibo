/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PaneDragAction } from "./PaneDragAction";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { PaneDragActionType_$type } from "./PaneDragActionType";
import { DockManagerPoint } from "./DockManagerPoint";
/**
 * @hidden
 */
export let FloatPaneAction = /*@__PURE__*/ (() => {
    class FloatPaneAction extends PaneDragAction {
        constructor() {
            super(...arguments);
            this.c = new WCNativeHelper();
            this.g = null;
        }
        get d() {
            return this.c;
        }
        get nativeElement() {
            return this.g;
        }
        set nativeElement(a) {
            this.g = a;
            this.c.o = this.g;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get b() {
            let ret_ = this.d.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(PaneDragActionType_$type, EnumUtil.getEnumValue(PaneDragActionType_$type, this.d.f(PaneDragActionType_$type, ret_)));
            return EnumUtil.getEnumValue(PaneDragActionType_$type, ret_);
        }
        set b(a) {
            let value_ = enumGetBox(PaneDragActionType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.d.w("type", value_);
        }
        get a() {
            let ret_ = this.d.m("location", (a) => new DockManagerPoint());
            return ret_;
        }
        set a(a) {
            let value_ = a;
            this.d.w("location", value_);
        }
        get f() {
            let ret_ = this.d.n("width");
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.d.w("width", value_);
        }
        get e() {
            let ret_ = this.d.n("height");
            return ret_;
        }
        set e(a) {
            let value_ = a;
            this.d.w("height", value_);
        }
    }
    FloatPaneAction.$t = /*@__PURE__*/ markType(FloatPaneAction, 'FloatPaneAction', PaneDragAction.$);
    return FloatPaneAction;
})();
