import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { DropdownPlacement_$type } from "./DropdownPlacement";
import { SelectScrollStrategy_$type } from "./SelectScrollStrategy";
import { IgrSelectItem } from "./igr-select-item";
import { IgrSelectItemComponentEventArgs } from "./igr-select-item-component-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrBaseComboBoxLike } from "./igr-base-combo-box-like";
import { Select } from "./Select";
import { IgcSelectComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool, ensureEnum } from "igniteui-react-core";
import { IgrSelectGroup } from "./igr-select-group";
/**
 * Represents a control that provides a menu of options.
*/
export class IgrSelect extends IgrBaseComboBoxLike {
    createImplementation() {
        return new Select();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._change = null;
        this._change_wrapped = null;
        this._focus = null;
        this._focus_wrapped = null;
        this._blur = null;
        this._blur_wrapped = null;
        this._opening = null;
        this._opening_wrapped = null;
        this._opened = null;
        this._opened_wrapped = null;
        this._closing = null;
        this._closing_wrapped = null;
        this._closed = null;
        this._closed_wrapped = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcSelectComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-select", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    get value() {
        return this.i.ah;
    }
    set value(v) {
        this.i.ah = v;
    }
    /**
     * The outlined attribute of the control.
    */
    get outlined() {
        return this.i.ab;
    }
    set outlined(v) {
        this.i.ab = ensureBool(v);
    }
    /**
     * The autofocus attribute of the control.
    */
    get autofocus() {
        return this.i.y;
    }
    set autofocus(v) {
        this.i.y = ensureBool(v);
    }
    /**
     * The distance of the select dropdown from its input.
    */
    get distance() {
        return this.i.ad;
    }
    set distance(v) {
        this.i.ad = +v;
    }
    /**
     * The label attribute of the control.
    */
    get label() {
        return this.i.ae;
    }
    set label(v) {
        this.i.ae = v;
    }
    /**
     * The placeholder attribute of the control.
    */
    get placeholder() {
        return this.i.ag;
    }
    set placeholder(v) {
        this.i.ag = v;
    }
    /**
     * The preferred placement of the select dropdown around its input.
     * @type {'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'}
    */
    get placement() {
        return this.i.o;
    }
    set placement(v) {
        this.i.o = ensureEnum(DropdownPlacement_$type, v);
    }
    /**
     * Determines the behavior of the component during scrolling of the parent container.
    */
    get scrollStrategy() {
        return this.i.r;
    }
    set scrollStrategy(v) {
        this.i.r = ensureEnum(SelectScrollStrategy_$type, v);
    }
    /**
     * Returns the items of the igc-select component.
    */
    get items() {
        if (!this.i.n) {
            return undefined;
        }
        let ret = [];
        for (let i = 0; i < this.i.n.length; i++) {
            let impl = this.i.n[i];
            if (!impl.externalObject) {
                if (impl instanceof IgrSelectItem) {
                    ret.push(impl);
                    continue;
                }
                let e = IgrSelectItem._createFromInternal(impl);
                e._implementation = impl;
                impl.externalObject = e;
            }
            ret.push(impl.externalObject);
        }
        return ret;
    }
    /**
     * Returns the groups of the igc-select component.
    */
    get groups() {
        if (!this.i.m) {
            return undefined;
        }
        let ret = [];
        for (let i = 0; i < this.i.m.length; i++) {
            let impl = this.i.m[i];
            if (!impl.externalObject) {
                if (impl instanceof IgrSelectGroup) {
                    ret.push(impl);
                    continue;
                }
                let e = IgrSelectGroup._createFromInternal(impl);
                e._implementation = impl;
                impl.externalObject = e;
            }
            ret.push(impl.externalObject);
        }
        return ret;
    }
    /**
     * Returns the selected item from the dropdown or null.
    */
    get selectedItem() {
        const r = this.i.p;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrSelectItem({});
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    /**
     * The disabled state of the component
    */
    get disabled() {
        return this.i.z;
    }
    set disabled(v) {
        this.i.z = ensureBool(v);
    }
    /**
     * Makes the control a required field in a form context.
    */
    get required() {
        return this.i.ac;
    }
    set required(v) {
        this.i.ac = ensureBool(v);
    }
    /**
     * The name attribute of the control.
    */
    get name() {
        return this.i.af;
    }
    set name(v) {
        this.i.af = v;
    }
    /**
     * Control the validity of the control.
    */
    get invalid() {
        return this.i.aa;
    }
    set invalid(v) {
        this.i.aa = ensureBool(v);
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.selectedItem && this.selectedItem._styling) {
            this.selectedItem._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Sets focus on the component.
    
    */
    focusComponent(options) {
        this.i.aq((options == null ? null : options.i));
    }
    /**
     * Removes focus from the component.
    
    */
    blurComponent() {
        this.i.aj();
    }
    /**
     * Checks the validity of the control and moves the focus to it if it is not valid.
    
    */
    reportValidity() {
        this.i.at();
    }
    /**
     * Resets the current value and selection of the component.
    
    */
    clearSelection() {
        this.i.am();
    }
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity() {
        this.i.al();
    }
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message) {
        this.i.au(message);
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrSelectItemComponentEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
    get focus() {
        return this._focus;
    }
    set focus(ev) {
        if (this._focus_wrapped !== null) {
            this.i.focus = delegateRemove(this.i.focus, this._focus_wrapped);
            this._focus_wrapped = null;
            this._focus = null;
        }
        this._focus = ev;
        this._focus_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFocus) {
                this.beforeFocus(this, outerArgs);
            }
            if (this._focus) {
                this._focus(this, outerArgs);
            }
        };
        this.i.focus = delegateCombine(this.i.focus, this._focus_wrapped);
        if (this.i.focusChanged) {
            this.i.focusChanged();
        }
        ;
    }
    get blur() {
        return this._blur;
    }
    set blur(ev) {
        if (this._blur_wrapped !== null) {
            this.i.blur = delegateRemove(this.i.blur, this._blur_wrapped);
            this._blur_wrapped = null;
            this._blur = null;
        }
        this._blur = ev;
        this._blur_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeBlur) {
                this.beforeBlur(this, outerArgs);
            }
            if (this._blur) {
                this._blur(this, outerArgs);
            }
        };
        this.i.blur = delegateCombine(this.i.blur, this._blur_wrapped);
        if (this.i.blurChanged) {
            this.i.blurChanged();
        }
        ;
    }
    get opening() {
        return this._opening;
    }
    set opening(ev) {
        if (this._opening_wrapped !== null) {
            this.i.opening = delegateRemove(this.i.opening, this._opening_wrapped);
            this._opening_wrapped = null;
            this._opening = null;
        }
        this._opening = ev;
        this._opening_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeOpening) {
                this.beforeOpening(this, outerArgs);
            }
            if (this._opening) {
                this._opening(this, outerArgs);
            }
        };
        this.i.opening = delegateCombine(this.i.opening, this._opening_wrapped);
        if (this.i.openingChanged) {
            this.i.openingChanged();
        }
        ;
    }
    get opened() {
        return this._opened;
    }
    set opened(ev) {
        if (this._opened_wrapped !== null) {
            this.i.opened = delegateRemove(this.i.opened, this._opened_wrapped);
            this._opened_wrapped = null;
            this._opened = null;
        }
        this._opened = ev;
        this._opened_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeOpened) {
                this.beforeOpened(this, outerArgs);
            }
            if (this._opened) {
                this._opened(this, outerArgs);
            }
        };
        this.i.opened = delegateCombine(this.i.opened, this._opened_wrapped);
        if (this.i.openedChanged) {
            this.i.openedChanged();
        }
        ;
    }
    get closing() {
        return this._closing;
    }
    set closing(ev) {
        if (this._closing_wrapped !== null) {
            this.i.closing = delegateRemove(this.i.closing, this._closing_wrapped);
            this._closing_wrapped = null;
            this._closing = null;
        }
        this._closing = ev;
        this._closing_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClosing) {
                this.beforeClosing(this, outerArgs);
            }
            if (this._closing) {
                this._closing(this, outerArgs);
            }
        };
        this.i.closing = delegateCombine(this.i.closing, this._closing_wrapped);
        if (this.i.closingChanged) {
            this.i.closingChanged();
        }
        ;
    }
    get closed() {
        return this._closed;
    }
    set closed(ev) {
        if (this._closed_wrapped !== null) {
            this.i.closed = delegateRemove(this.i.closed, this._closed_wrapped);
            this._closed_wrapped = null;
            this._closed = null;
        }
        this._closed = ev;
        this._closed_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClosed) {
                this.beforeClosed(this, outerArgs);
            }
            if (this._closed) {
                this._closed(this, outerArgs);
            }
        };
        this.i.closed = delegateCombine(this.i.closed, this._closed_wrapped);
        if (this.i.closedChanged) {
            this.i.closedChanged();
        }
        ;
    }
}
