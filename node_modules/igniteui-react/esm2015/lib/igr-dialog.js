import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { Dialog } from "./Dialog";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcDialogComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * Represents a Dialog component.
*/
export class IgrDialog extends React.Component {
    createImplementation() {
        return new Dialog();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._closing = null;
        this._closing_wrapped = null;
        this._closed = null;
        this._closed_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcDialogComponent);
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-dialog", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * Whether the dialog should be kept open when pressing the 'ESCAPE' button.
    */
    get keepOpenOnEscape() {
        return this.i.h;
    }
    set keepOpenOnEscape(v) {
        this.i.h = ensureBool(v);
    }
    /**
     * Whether the dialog should be closed when clicking outside of it.
    */
    get closeOnOutsideClick() {
        return this.i.e;
    }
    set closeOnOutsideClick(v) {
        this.i.e = ensureBool(v);
    }
    /**
     * Whether to hide the default action button for the dialog.
     * When there is projected content in the `footer` slot this property
     * has no effect.
    */
    get hideDefaultAction() {
        return this.i.g;
    }
    set hideDefaultAction(v) {
        this.i.g = ensureBool(v);
    }
    /**
     * Whether the dialog is opened.
    */
    get open() {
        return this.i.i;
    }
    set open(v) {
        this.i.i = ensureBool(v);
    }
    /**
     * Sets the title of the dialog.
    */
    get title() {
        return this.i.o;
    }
    set title(v) {
        this.i.o = v;
    }
    /**
     * Sets the return value for the dialog.
    */
    get returnValue() {
        return this.i.n;
    }
    set returnValue(v) {
        this.i.n = v;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Dialog");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    /**
     * Opens the dialog.
    
    */
    show() {
        let iv = this.i.j();
        return (iv);
    }
    /**
     * Closes the dialog.
    
    */
    hide() {
        let iv = this.i.f();
        return (iv);
    }
    /**
     * Toggles the open state of the dialog.
    
    */
    toggle() {
        let iv = this.i.k();
        return (iv);
    }
    get closing() {
        return this._closing;
    }
    set closing(ev) {
        if (this._closing_wrapped !== null) {
            this.i.closing = delegateRemove(this.i.closing, this._closing_wrapped);
            this._closing_wrapped = null;
            this._closing = null;
        }
        this._closing = ev;
        this._closing_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClosing) {
                this.beforeClosing(this, outerArgs);
            }
            if (this._closing) {
                this._closing(this, outerArgs);
            }
        };
        this.i.closing = delegateCombine(this.i.closing, this._closing_wrapped);
        if (this.i.closingChanged) {
            this.i.closingChanged();
        }
        ;
    }
    get closed() {
        return this._closed;
    }
    set closed(ev) {
        if (this._closed_wrapped !== null) {
            this.i.closed = delegateRemove(this.i.closed, this._closed_wrapped);
            this._closed_wrapped = null;
            this._closed = null;
        }
        this._closed = ev;
        this._closed_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClosed) {
                this.beforeClosed(this, outerArgs);
            }
            if (this._closed) {
                this._closed(this, outerArgs);
            }
        };
        this.i.closed = delegateCombine(this.i.closed, this._closed_wrapped);
        if (this.i.closedChanged) {
            this.i.closedChanged();
        }
        ;
    }
}
