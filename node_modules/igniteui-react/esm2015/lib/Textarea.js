/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { TextareaAutocapitalize_$type } from "./TextareaAutocapitalize";
import { TextareaInputMode_$type } from "./TextareaInputMode";
import { TextareaResize_$type } from "./TextareaResize";
import { TextareaWrap_$type } from "./TextareaWrap";
import { ComponentValueChangedEventArgs } from "./ComponentValueChangedEventArgs";
import { VoidEventArgs } from "./VoidEventArgs";
import { SelectionRangeDirection_$type } from "./SelectionRangeDirection";
import { RangeTextSelectMode_$type } from "./RangeTextSelectMode";
/**
 * @hidden
 */
export let Textarea = /*@__PURE__*/ (() => {
    class Textarea extends BaseElement {
        constructor() {
            super(...arguments);
            this.i = new WCNativeHelper();
            this.u = null;
            this.input = null;
            this.change = null;
            this.focus = null;
            this.blur = null;
        }
        get j() {
            return this.i;
        }
        get nativeElement() {
            return this.u;
        }
        set nativeElement(a) {
            this.u = a;
            this.i.o = this.u;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get w() {
            let ret_ = this.j.n("autocomplete");
            return ret_;
        }
        set w(a) {
            let value_ = a;
            this.j.w("autocomplete", value_);
        }
        get c() {
            let ret_ = this.j.n("autocapitalize");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(TextareaAutocapitalize_$type, EnumUtil.getEnumValue(TextareaAutocapitalize_$type, this.j.f(TextareaAutocapitalize_$type, ret_)));
            return EnumUtil.getEnumValue(TextareaAutocapitalize_$type, ret_);
        }
        set c(a) {
            let value_ = enumGetBox(TextareaAutocapitalize_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("autocapitalize", value_);
        }
        get d() {
            let ret_ = this.j.n("inputMode");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(TextareaInputMode_$type, EnumUtil.getEnumValue(TextareaInputMode_$type, this.j.f(TextareaInputMode_$type, ret_)));
            return EnumUtil.getEnumValue(TextareaInputMode_$type, ret_);
        }
        set d(a) {
            let value_ = enumGetBox(TextareaInputMode_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("inputMode", value_);
        }
        get x() {
            let ret_ = this.j.n("label");
            return ret_;
        }
        set x(a) {
            let value_ = a;
            this.j.w("label", value_);
        }
        get r() {
            let ret_ = this.j.n("maxLength");
            return ret_;
        }
        set r(a) {
            let value_ = a;
            this.j.w("maxLength", value_);
        }
        get s() {
            let ret_ = this.j.n("minLength");
            return ret_;
        }
        set s(a) {
            let value_ = a;
            this.j.w("minLength", value_);
        }
        get m() {
            let ret_ = this.j.n("outlined");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.j.w("outlined", value_);
        }
        get z() {
            let ret_ = this.j.n("placeholder");
            return ret_;
        }
        set z(a) {
            let value_ = a;
            this.j.w("placeholder", value_);
        }
        get n() {
            let ret_ = this.j.n("readOnly");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.j.w("readOnly", value_);
        }
        get e() {
            let ret_ = this.j.n("resize");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(TextareaResize_$type, EnumUtil.getEnumValue(TextareaResize_$type, this.j.f(TextareaResize_$type, ret_)));
            return EnumUtil.getEnumValue(TextareaResize_$type, ret_);
        }
        set e(a) {
            let value_ = enumGetBox(TextareaResize_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("resize", value_);
        }
        get t() {
            let ret_ = this.j.n("rows");
            return ret_;
        }
        set t(a) {
            let value_ = a;
            this.j.w("rows", value_);
        }
        get aa() {
            let ret_ = this.j.n("value");
            return ret_;
        }
        set aa(a) {
            let value_ = a;
            this.j.w("value", value_);
        }
        get p() {
            let ret_ = this.j.n("spellcheck");
            return ret_;
        }
        set p(a) {
            let value_ = a;
            this.j.w("spellcheck", value_);
        }
        get f() {
            let ret_ = this.j.n("wrap");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(TextareaWrap_$type, EnumUtil.getEnumValue(TextareaWrap_$type, this.j.f(TextareaWrap_$type, ret_)));
            return EnumUtil.getEnumValue(TextareaWrap_$type, ret_);
        }
        set f(a) {
            let value_ = enumGetBox(TextareaWrap_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("wrap", value_);
        }
        get q() {
            let ret_ = this.j.n("validateOnly");
            return ret_;
        }
        set q(a) {
            let value_ = a;
            this.j.w("validateOnly", value_);
        }
        get k() {
            let ret_ = this.j.n("disabled");
            return ret_;
        }
        set k(a) {
            let value_ = a;
            this.j.w("disabled", value_);
        }
        get o() {
            let ret_ = this.j.n("required");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.j.w("required", value_);
        }
        get y() {
            let ret_ = this.j.n("name");
            return ret_;
        }
        set y(a) {
            let value_ = a;
            this.j.w("name", value_);
        }
        get l() {
            let ret_ = this.j.n("invalid");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.j.w("invalid", value_);
        }
        inputChanged() {
            if (this.input != null) {
                this.j.s("input", (a) => this.input(this, ComponentValueChangedEventArgs.a(a)));
            }
            else {
                this.j.v("input");
            }
        }
        changeChanged() {
            if (this.change != null) {
                this.j.s("change", (a) => this.change(this, ComponentValueChangedEventArgs.a(a)));
            }
            else {
                this.j.v("change");
            }
        }
        focusChanged() {
            if (this.focus != null) {
                this.j.s("focus", (a) => this.focus(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.j.v("focus");
            }
        }
        blurChanged() {
            if (this.blur != null) {
                this.j.s("blur", (a) => this.blur(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.j.v("blur");
            }
        }
        ae() {
            this.nativeElement.connectedCallback();
        }
        af() {
            this.nativeElement.disconnectedCallback();
        }
        aj() {
            this.nativeElement.select();
        }
        an(a, b, c) {
            this.nativeElement.setSelectionRange(this.j.i(a), this.j.i(b), this.j.i(enumGetBox(SelectionRangeDirection_$type, c)));
        }
        am(a, b, c, d) {
            this.nativeElement.setRangeText(this.j.i(a), this.j.i(b), this.j.i(c), this.j.i(enumGetBox(RangeTextSelectMode_$type, d)));
        }
        ai() {
            this.nativeElement.reportValidity();
        }
        ad() {
            this.nativeElement.checkValidity();
        }
        ak(a) {
            this.nativeElement.setCustomValidity(this.j.i(a));
        }
    }
    Textarea.$t = /*@__PURE__*/ markType(Textarea, 'Textarea', BaseElement.$);
    return Textarea;
})();
