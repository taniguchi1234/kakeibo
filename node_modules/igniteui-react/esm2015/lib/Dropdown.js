/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseComboBoxLike } from "./BaseComboBoxLike";
import { DropdownPlacement_$type } from "./DropdownPlacement";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { DropdownScrollStrategy_$type } from "./DropdownScrollStrategy";
import { DropdownItem } from "./DropdownItem";
import { DropdownGroup } from "./DropdownGroup";
import { VoidEventArgs } from "./VoidEventArgs";
import { DropdownItemComponentEventArgs } from "./DropdownItemComponentEventArgs";
/**
 * @hidden
 */
export let Dropdown = /*@__PURE__*/ (() => {
    class Dropdown extends BaseComboBoxLike {
        constructor() {
            super(...arguments);
            this.opening = null;
            this.opened = null;
            this.closing = null;
            this.closed = null;
            this.change = null;
        }
        showTarget(target_) {
            this.nativeElement.show(target_);
        }
        toggleTarget(target_) {
            this.nativeElement.toggle(target_);
        }
        o(a) {
            return (this.nativeElement.navigateTo(a));
        }
        p(a) {
            return (this.nativeElement.select(a));
        }
        get s() {
            let ret_ = this.b.n("placement");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DropdownPlacement_$type, EnumUtil.getEnumValue(DropdownPlacement_$type, this.b.f(DropdownPlacement_$type, ret_)));
            return EnumUtil.getEnumValue(DropdownPlacement_$type, ret_);
        }
        set s(a) {
            let value_ = enumGetBox(DropdownPlacement_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.b.w("placement", value_);
        }
        get t() {
            let ret_ = this.b.n("scrollStrategy");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DropdownScrollStrategy_$type, EnumUtil.getEnumValue(DropdownScrollStrategy_$type, this.b.f(DropdownScrollStrategy_$type, ret_)));
            return EnumUtil.getEnumValue(DropdownScrollStrategy_$type, ret_);
        }
        set t(a) {
            let value_ = enumGetBox(DropdownScrollStrategy_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.b.w("scrollStrategy", value_);
        }
        get y() {
            let ret_ = this.b.n("flip");
            return ret_;
        }
        set y(a) {
            let value_ = a;
            this.b.w("flip", value_);
        }
        get aa() {
            let ret_ = this.b.n("distance");
            return ret_;
        }
        set aa(a) {
            let value_ = a;
            this.b.w("distance", value_);
        }
        get z() {
            let ret_ = this.b.n("sameWidth");
            return ret_;
        }
        set z(a) {
            let value_ = a;
            this.b.w("sameWidth", value_);
        }
        get n() {
            let ret_ = this.b.m("items", (a) => new DropdownItem());
            return ret_;
        }
        get m() {
            let ret_ = this.b.m("groups", (a) => new DropdownGroup());
            return ret_;
        }
        get q() {
            let ret_ = this.b.m("selectedItem", (a) => new DropdownItem());
            return ret_;
        }
        openingChanged() {
            if (this.opening != null) {
                this.b.s("opening", (a) => this.opening(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("opening");
            }
        }
        openedChanged() {
            if (this.opened != null) {
                this.b.s("opened", (a) => this.opened(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("opened");
            }
        }
        closingChanged() {
            if (this.closing != null) {
                this.b.s("closing", (a) => this.closing(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("closing");
            }
        }
        closedChanged() {
            if (this.closed != null) {
                this.b.s("closed", (a) => this.closed(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("closed");
            }
        }
        changeChanged() {
            if (this.change != null) {
                this.b.s("change", (a) => this.change(this, DropdownItemComponentEventArgs.b(a)));
            }
            else {
                this.b.v("change");
            }
        }
        af() {
            this.nativeElement.disconnectedCallback();
        }
        ac() {
            this.nativeElement.clearSelection();
        }
    }
    Dropdown.$t = /*@__PURE__*/ markType(Dropdown, 'Dropdown', BaseComboBoxLike.$);
    return Dropdown;
})();
