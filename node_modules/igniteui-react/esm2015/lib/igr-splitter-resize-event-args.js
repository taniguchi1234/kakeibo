import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { SplitPaneOrientation_$type } from "./SplitPaneOrientation";
import { SplitterResizeEventArgs as SplitterResizeEventArgs_internal } from "./SplitterResizeEventArgs";
import { ensureEnum } from "igniteui-react-core";
export class IgrSplitterResizeEventArgs {
    createImplementation() {
        return new SplitterResizeEventArgs_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    /**
     * Gets the pane being resized with the splitter.
    */
    get pane() {
        const r = this.i.a;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrDockManagerPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set pane(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * Gets the pane's orientation.
    */
    get orientation() {
        return this.i.b;
    }
    set orientation(v) {
        this.i.b = ensureEnum(SplitPaneOrientation_$type, v);
    }
    /**
     * Gets the pane's width.
    */
    get paneWidth() {
        return this.i.d;
    }
    set paneWidth(v) {
        this.i.d = +v;
    }
    /**
     * Gets the pane's height.
    */
    get paneHeight() {
        return this.i.c;
    }
    set paneHeight(v) {
        this.i.c = +v;
    }
}
