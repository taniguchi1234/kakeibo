/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let TreeItem = /*@__PURE__*/ (() => {
    class TreeItem extends BaseElement {
        constructor() {
            super(...arguments);
            this.c = new WCNativeHelper();
            this.k = null;
        }
        get d() {
            return this.c;
        }
        get nativeElement() {
            return this.k;
        }
        set nativeElement(a) {
            this.k = a;
            this.c.o = this.k;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get b() {
            let ret_ = this.d.m("parent", (a) => new TreeItem());
            return ret_;
        }
        set b(a) {
            let value_ = a;
            this.d.w("parent", value_);
        }
        get j() {
            let ret_ = this.d.n("level");
            return ret_;
        }
        set j(a) {
            let value_ = a;
            this.d.w("level", value_);
        }
        get n() {
            let ret_ = this.d.n("label");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.d.w("label", value_);
        }
        get g() {
            let ret_ = this.d.n("expanded");
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.d.w("expanded", value_);
        }
        get e() {
            let ret_ = this.d.n("active");
            return ret_;
        }
        set e(a) {
            let value_ = a;
            this.d.w("active", value_);
        }
        get f() {
            let ret_ = this.d.n("disabled");
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.d.w("disabled", value_);
        }
        get i() {
            let ret_ = this.d.n("selected");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.d.w("selected", value_);
        }
        get h() {
            let ret_ = this.d.n("loading");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.d.w("loading", value_);
        }
        get m() {
            let ret_ = this.d.n("value");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.d.w("value", value_);
        }
        get a() {
            let ret_ = this.d.m("path", (a) => new TreeItem());
            return ret_;
        }
        q() {
            this.nativeElement.connectedCallback();
        }
        r() {
            this.nativeElement.disconnectedCallback();
        }
        t() {
            this.nativeElement.expandWithEvent();
        }
        p() {
            this.nativeElement.collapseWithEvent();
        }
        v() {
            this.nativeElement.toggle();
        }
        s() {
            this.nativeElement.expand();
        }
        o() {
            this.nativeElement.collapse();
        }
    }
    TreeItem.$t = /*@__PURE__*/ markType(TreeItem, 'TreeItem', BaseElement.$);
    return TreeItem;
})();
