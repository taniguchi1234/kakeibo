/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { SliderBaseTickOrientation_$type } from "./SliderBaseTickOrientation";
import { TickLabelRotation_$type } from "./TickLabelRotation";
/**
 * @hidden
 */
export let SliderBase = /*@__PURE__*/ (() => {
    class SliderBase extends BaseElement {
        constructor() {
            super(...arguments);
            this.d = new WCNativeHelper();
            this.r = null;
        }
        get e() {
            return this.d;
        }
        get nativeElement() {
            return this.r;
        }
        set nativeElement(a) {
            this.r = a;
            this.d.o = this.r;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get m() {
            let ret_ = this.e.n("min");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.e.w("min", value_);
        }
        get l() {
            let ret_ = this.e.n("max");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.e.w("max", value_);
        }
        get k() {
            let ret_ = this.e.n("lowerBound");
            return ret_;
        }
        set k(a) {
            let value_ = a;
            this.e.w("lowerBound", value_);
        }
        get q() {
            let ret_ = this.e.n("upperBound");
            return ret_;
        }
        set q(a) {
            let value_ = a;
            this.e.w("upperBound", value_);
        }
        get f() {
            let ret_ = this.e.n("disabled");
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.e.w("disabled", value_);
        }
        get g() {
            let ret_ = this.e.n("discreteTrack");
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.e.w("discreteTrack", value_);
        }
        get j() {
            let ret_ = this.e.n("hideTooltip");
            return ret_;
        }
        set j(a) {
            let value_ = a;
            this.e.w("hideTooltip", value_);
        }
        get p() {
            let ret_ = this.e.n("step");
            return ret_;
        }
        set p(a) {
            let value_ = a;
            this.e.w("step", value_);
        }
        get n() {
            let ret_ = this.e.n("primaryTicks");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.e.w("primaryTicks", value_);
        }
        get o() {
            let ret_ = this.e.n("secondaryTicks");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.e.w("secondaryTicks", value_);
        }
        get b() {
            let ret_ = this.e.n("tickOrientation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(SliderBaseTickOrientation_$type, EnumUtil.getEnumValue(SliderBaseTickOrientation_$type, this.e.f(SliderBaseTickOrientation_$type, ret_)));
            return EnumUtil.getEnumValue(SliderBaseTickOrientation_$type, ret_);
        }
        set b(a) {
            let value_ = enumGetBox(SliderBaseTickOrientation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("tickOrientation", value_);
        }
        get h() {
            let ret_ = this.e.n("hidePrimaryLabels");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.e.w("hidePrimaryLabels", value_);
        }
        get i() {
            let ret_ = this.e.n("hideSecondaryLabels");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.e.w("hideSecondaryLabels", value_);
        }
        get t() {
            let ret_ = this.e.n("locale");
            return ret_;
        }
        set t(a) {
            let value_ = a;
            this.e.w("locale", value_);
        }
        get u() {
            let ret_ = this.e.n("valueFormat");
            return ret_;
        }
        set u(a) {
            let value_ = a;
            this.e.w("valueFormat", value_);
        }
        get c() {
            let ret_ = this.e.n("tickLabelRotation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(TickLabelRotation_$type, EnumUtil.getEnumValue(TickLabelRotation_$type, this.e.f(TickLabelRotation_$type, ret_)));
            return EnumUtil.getEnumValue(TickLabelRotation_$type, ret_);
        }
        set c(a) {
            let value_ = enumGetBox(TickLabelRotation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("tickLabelRotation", value_);
        }
        v() {
            this.nativeElement.connectedCallback();
        }
        get a() {
            let ret_ = this.e.n("valueFormatOptions");
            return ret_;
        }
        set a(a) {
            let value_ = a;
            this.e.w("valueFormatOptions", value_);
        }
    }
    SliderBase.$t = /*@__PURE__*/ markType(SliderBase, 'SliderBase', BaseElement.$);
    return SliderBase;
})();
