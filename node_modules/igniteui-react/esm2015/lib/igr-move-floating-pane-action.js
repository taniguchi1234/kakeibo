import { PaneDragActionType_$type } from "./PaneDragActionType";
import { IgrDockManagerPoint } from "./igr-dock-manager-point";
import { IgrPaneDragAction } from "./igr-pane-drag-action";
import { MoveFloatingPaneAction } from "./MoveFloatingPaneAction";
import { ensureEnum } from "igniteui-react-core";
export class IgrMoveFloatingPaneAction extends IgrPaneDragAction {
    createImplementation() {
        return new MoveFloatingPaneAction();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    get type() {
        return this.i.c;
    }
    set type(v) {
        this.i.c = ensureEnum(PaneDragActionType_$type, v);
    }
    get oldLocation() {
        const r = this.i.b;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDockManagerPoint();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set oldLocation(v) {
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    get newLocation() {
        const r = this.i.a;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDockManagerPoint();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set newLocation(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.oldLocation && this.oldLocation.name && this.oldLocation.name == name) {
            return this.oldLocation;
        }
        if (this.newLocation && this.newLocation.name && this.newLocation.name == name) {
            return this.newLocation;
        }
        return null;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
