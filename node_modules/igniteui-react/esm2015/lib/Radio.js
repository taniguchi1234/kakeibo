/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { RadioLabelPosition_$type } from "./RadioLabelPosition";
import { RadioChangeEventArgs } from "./RadioChangeEventArgs";
import { VoidEventArgs } from "./VoidEventArgs";
/**
 * @hidden
 */
export let Radio = /*@__PURE__*/ (() => {
    class Radio extends BaseElement {
        constructor() {
            super(...arguments);
            this.e = new WCNativeHelper();
            this.k = null;
            this.change = null;
            this.focus = null;
            this.blur = null;
        }
        get f() {
            return this.e;
        }
        get nativeElement() {
            return this.k;
        }
        set nativeElement(a) {
            this.k = a;
            this.e.o = this.k;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get n() {
            let ret_ = this.f.n("value");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.f.w("value", value_);
        }
        get g() {
            let ret_ = this.f.n("checked");
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.f.w("checked", value_);
        }
        get b() {
            let ret_ = this.f.n("labelPosition");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(RadioLabelPosition_$type, EnumUtil.getEnumValue(RadioLabelPosition_$type, this.f.f(RadioLabelPosition_$type, ret_)));
            return EnumUtil.getEnumValue(RadioLabelPosition_$type, ret_);
        }
        set b(a) {
            let value_ = enumGetBox(RadioLabelPosition_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.f.w("labelPosition", value_);
        }
        get h() {
            let ret_ = this.f.n("disabled");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.f.w("disabled", value_);
        }
        get j() {
            let ret_ = this.f.n("required");
            return ret_;
        }
        set j(a) {
            let value_ = a;
            this.f.w("required", value_);
        }
        get m() {
            let ret_ = this.f.n("name");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.f.w("name", value_);
        }
        get i() {
            let ret_ = this.f.n("invalid");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.f.w("invalid", value_);
        }
        changeChanged() {
            if (this.change != null) {
                this.f.s("change", (a) => this.change(this, RadioChangeEventArgs.a(a)));
            }
            else {
                this.f.v("change");
            }
        }
        focusChanged() {
            if (this.focus != null) {
                this.f.s("focus", (a) => this.focus(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.f.v("focus");
            }
        }
        blurChanged() {
            if (this.blur != null) {
                this.f.s("blur", (a) => this.blur(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.f.v("blur");
            }
        }
        s() {
            this.nativeElement.click();
        }
        u(a) {
            this.nativeElement.focus(this.f.i(a));
        }
        p() {
            this.nativeElement.blur();
        }
        w(a) {
            this.nativeElement.setCustomValidity(this.f.i(a));
        }
        v() {
            this.nativeElement.reportValidity();
        }
        r() {
            this.nativeElement.checkValidity();
        }
    }
    Radio.$t = /*@__PURE__*/ markType(Radio, 'Radio', BaseElement.$);
    return Radio;
})();
