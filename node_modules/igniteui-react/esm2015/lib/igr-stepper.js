import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { StepperOrientation_$type } from "./StepperOrientation";
import { StepperStepType_$type } from "./StepperStepType";
import { StepperVerticalAnimation_$type } from "./StepperVerticalAnimation";
import { StepperHorizontalAnimation_$type } from "./StepperHorizontalAnimation";
import { StepperTitlePosition_$type } from "./StepperTitlePosition";
import { IgrActiveStepChangingArgsEventArgs } from "./igr-active-step-changing-args-event-args";
import { IgrActiveStepChangedArgsEventArgs } from "./igr-active-step-changed-args-event-args";
import { Stepper } from "./Stepper";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcStepperComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureEnum, ensureBool, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
import { IgrStep } from "./igr-step";
/**
 * IgxStepper provides a wizard-like workflow by dividing content into logical steps.
 * @remarks
 * The stepper component allows the user to navigate between multiple steps.
 * It supports horizontal and vertical orientation as well as keyboard navigation and provides API methods to control the active step.
*/
export class IgrStepper extends React.Component {
    createImplementation() {
        return new Stepper();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._activeStepChanging = null;
        this._activeStepChanging_wrapped = null;
        this._activeStepChanged = null;
        this._activeStepChanged_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcStepperComponent);
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-stepper", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * Returns all of the stepper's steps.
    */
    get steps() {
        if (!this.i.a) {
            return undefined;
        }
        let ret = [];
        for (let i = 0; i < this.i.a.length; i++) {
            let impl = this.i.a[i];
            if (!impl.externalObject) {
                if (impl instanceof IgrStep) {
                    ret.push(impl);
                    continue;
                }
                let e = IgrStep._createFromInternal(impl);
                e._implementation = impl;
                impl.externalObject = e;
            }
            ret.push(impl.externalObject);
        }
        return ret;
    }
    set steps(v) {
        let arr = [];
        for (let i = 0; i < v.length; i++) {
            arr.push(v[i].i);
        }
        this.i.a = arr;
    }
    /**
     * Gets/Sets the orientation of the stepper.
     * @remarks
     * Default value is `horizontal`.
    */
    get orientation() {
        return this.i.e;
    }
    set orientation(v) {
        this.i.e = ensureEnum(StepperOrientation_$type, v);
    }
    /**
     * Get/Set the type of the steps.
     * @remarks
     * Default value is `full`.
    */
    get stepType() {
        return this.i.f;
    }
    set stepType(v) {
        this.i.f = ensureEnum(StepperStepType_$type, v);
    }
    /**
     * Get/Set whether the stepper is linear.
     * @remarks
     * If the stepper is in linear mode and if the active step is valid only then the user is able to move forward.
    */
    get linear() {
        return this.i.l;
    }
    set linear(v) {
        this.i.l = ensureBool(v);
    }
    /**
     * Get/Set whether the content is displayed above the steps.
     * @remarks
     * Default value is `false` and the content is below the steps.
    */
    get contentTop() {
        return this.i.k;
    }
    set contentTop(v) {
        this.i.k = ensureBool(v);
    }
    /**
     * The animation type when in vertical mode.
    */
    get verticalAnimation() {
        return this.i.h;
    }
    set verticalAnimation(v) {
        this.i.h = ensureEnum(StepperVerticalAnimation_$type, v);
    }
    /**
     * The animation type when in horizontal mode.
    */
    get horizontalAnimation() {
        return this.i.d;
    }
    set horizontalAnimation(v) {
        this.i.d = ensureEnum(StepperHorizontalAnimation_$type, v);
    }
    /**
     * The animation duration in either vertical or horizontal mode.
    */
    get animationDuration() {
        return this.i.m;
    }
    set animationDuration(v) {
        this.i.m = +v;
    }
    /**
     * Get/Set the position of the steps title.
     * @remarks
     * The default value is undefined.
     * When the stepper is horizontally orientated the title is positioned below the indicator.
     * When the stepper is horizontally orientated the title is positioned on the right side of the indicator.
    */
    get titlePosition() {
        return this.i.g;
    }
    set titlePosition(v) {
        this.i.g = ensureEnum(StepperTitlePosition_$type, v);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Stepper");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    connectedCallback() {
        this.i.r();
    }
    /**
     * Activates the step at a given index.
    
    */
    navigateTo(index) {
        this.i.s(index);
    }
    /**
     * Activates the next enabled step.
    
    */
    next() {
        this.i.t();
    }
    /**
     * Activates the previous enabled step.
    
    */
    prev() {
        this.i.u();
    }
    /**
     * Resets the stepper to its initial state i.e. activates the first step.
     * @remarks
     * The steps' content will not be automatically reset.
    
    */
    reset() {
        this.i.v();
    }
    get activeStepChanging() {
        return this._activeStepChanging;
    }
    set activeStepChanging(ev) {
        if (this._activeStepChanging_wrapped !== null) {
            this.i.activeStepChanging = delegateRemove(this.i.activeStepChanging, this._activeStepChanging_wrapped);
            this._activeStepChanging_wrapped = null;
            this._activeStepChanging = null;
        }
        this._activeStepChanging = ev;
        this._activeStepChanging_wrapped = (o, e) => {
            let outerArgs = new IgrActiveStepChangingArgsEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeActiveStepChanging) {
                this.beforeActiveStepChanging(this, outerArgs);
            }
            if (this._activeStepChanging) {
                this._activeStepChanging(this, outerArgs);
            }
        };
        this.i.activeStepChanging = delegateCombine(this.i.activeStepChanging, this._activeStepChanging_wrapped);
        if (this.i.activeStepChangingChanged) {
            this.i.activeStepChangingChanged();
        }
        ;
    }
    get activeStepChanged() {
        return this._activeStepChanged;
    }
    set activeStepChanged(ev) {
        if (this._activeStepChanged_wrapped !== null) {
            this.i.activeStepChanged = delegateRemove(this.i.activeStepChanged, this._activeStepChanged_wrapped);
            this._activeStepChanged_wrapped = null;
            this._activeStepChanged = null;
        }
        this._activeStepChanged = ev;
        this._activeStepChanged_wrapped = (o, e) => {
            let outerArgs = new IgrActiveStepChangedArgsEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeActiveStepChanged) {
                this.beforeActiveStepChanged(this, outerArgs);
            }
            if (this._activeStepChanged) {
                this._activeStepChanged(this, outerArgs);
            }
        };
        this.i.activeStepChanged = delegateCombine(this.i.activeStepChanged, this._activeStepChanged_wrapped);
        if (this.i.activeStepChangedChanged) {
            this.i.activeStepChangedChanged();
        }
        ;
    }
}
