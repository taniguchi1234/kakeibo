/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, enumGetBox, EnumUtil } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { DockManagerPaneType_$type } from "./DockManagerPaneType";
import { UnpinnedLocation_$type } from "./UnpinnedLocation";
import { ObservableCollection$1 } from "igniteui-react-core";
import { SplitPaneOrientation_$type } from "./SplitPaneOrientation";
import { DockManagerPoint } from "./DockManagerPoint";
/**
 * @hidden
 */
export let DockManagerPane = /*@__PURE__*/ (() => {
    class DockManagerPane extends Base {
        constructor() {
            super(...arguments);
            this.___mustPassByValue = true;
        }
        get d() {
            let ret_ = this.b().n("name");
            return ret_;
        }
        set d(a) {
            let value_ = a;
            this.b().w("name", value_);
        }
        static createFromNative(native_) {
            if (native_ == null) {
                return null;
            }
            let a = (native_.type);
            if (a == null || a == undefined) {
                return null;
            }
            switch (a.toLowerCase()) {
                case "splitpane":
                    {
                        let b = new SplitPane();
                        b.setNativeElement(native_);
                        return b;
                    }
                case "contentpane":
                    {
                        let c = new ContentPane();
                        c.setNativeElement(native_);
                        return c;
                    }
                case "tabgrouppane":
                    {
                        let d = new TabGroupPane();
                        d.setNativeElement(native_);
                        return d;
                    }
                case "documenthost":
                    {
                        let e = new DocumentHost();
                        e.setNativeElement(native_);
                        return e;
                    }
            }
            return null;
        }
    }
    DockManagerPane.$t = /*@__PURE__*/ markType(DockManagerPane, 'DockManagerPane');
    return DockManagerPane;
})();
/**
 * @hidden
 */
export let DocumentHost = /*@__PURE__*/ (() => {
    class DocumentHost extends DockManagerPane {
        constructor() {
            super(...arguments);
            this.g = new WCNativeHelper();
            this.j = null;
        }
        get h() {
            return this.g;
        }
        get nativeElement() {
            return this.j;
        }
        set nativeElement(a) {
            this.j = a;
            this.g.o = this.j;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get l() {
            let ret_ = this.h.n("id");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.h.w("id", value_);
        }
        get e() {
            let ret_ = this.h.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerPaneType_$type, EnumUtil.getEnumValue(DockManagerPaneType_$type, this.h.f(DockManagerPaneType_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerPaneType_$type, ret_);
        }
        set e(a) {
            let value_ = enumGetBox(DockManagerPaneType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.h.w("type", value_);
        }
        get f() {
            let ret_ = this.h.m("rootPane", (a) => new SplitPane());
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.h.w("rootPane", value_);
        }
        get i() {
            let ret_ = this.h.n("size");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.h.w("size", value_);
        }
        b() {
            return this.h;
        }
    }
    DocumentHost.$t = /*@__PURE__*/ markType(DocumentHost, 'DocumentHost', DockManagerPane.$);
    return DocumentHost;
})();
/**
 * @hidden
 */
export let TabGroupPane = /*@__PURE__*/ (() => {
    class TabGroupPane extends DockManagerPane {
        constructor() {
            super(...arguments);
            this.g = new WCNativeHelper();
            this.m = null;
        }
        get h() {
            return this.g;
        }
        get nativeElement() {
            return this.m;
        }
        set nativeElement(a) {
            this.m = a;
            this.g.o = this.m;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get o() {
            let ret_ = this.h.n("id");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.h.w("id", value_);
        }
        get f() {
            let ret_ = this.h.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerPaneType_$type, EnumUtil.getEnumValue(DockManagerPaneType_$type, this.h.f(DockManagerPaneType_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerPaneType_$type, ret_);
        }
        set f(a) {
            let value_ = enumGetBox(DockManagerPaneType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.h.w("type", value_);
        }
        get e() {
            let ret_ = this.h.k("panes", (a) => new ContentPaneCollection(), (a) => new ContentPane());
            return ret_;
        }
        get l() {
            let ret_ = this.h.n("size");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.h.w("size", value_);
        }
        get k() {
            let ret_ = this.h.n("selectedIndex");
            return ret_;
        }
        set k(a) {
            let value_ = a;
            this.h.w("selectedIndex", value_);
        }
        get i() {
            let ret_ = this.h.n("allowEmpty");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.h.w("allowEmpty", value_);
        }
        get j() {
            let ret_ = this.h.n("isMaximized");
            return ret_;
        }
        set j(a) {
            let value_ = a;
            this.h.w("isMaximized", value_);
        }
        b() {
            return this.h;
        }
    }
    TabGroupPane.$t = /*@__PURE__*/ markType(TabGroupPane, 'TabGroupPane', DockManagerPane.$);
    return TabGroupPane;
})();
/**
 * @hidden
 */
export let ContentPane = /*@__PURE__*/ (() => {
    class ContentPane extends DockManagerPane {
        constructor() {
            super(...arguments);
            this.g = new WCNativeHelper();
            this.v = null;
        }
        b() {
            return this.h;
        }
        get h() {
            return this.g;
        }
        get nativeElement() {
            return this.v;
        }
        set nativeElement(a) {
            this.v = a;
            this.g.o = this.v;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get ab() {
            let ret_ = this.h.n("id");
            return ret_;
        }
        set ab(a) {
            let value_ = a;
            this.h.w("id", value_);
        }
        get e() {
            let ret_ = this.h.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerPaneType_$type, EnumUtil.getEnumValue(DockManagerPaneType_$type, this.h.f(DockManagerPaneType_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerPaneType_$type, ret_);
        }
        set e(a) {
            let value_ = enumGetBox(DockManagerPaneType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.h.w("type", value_);
        }
        get x() {
            let ret_ = this.h.n("contentId");
            return ret_;
        }
        set x(a) {
            let value_ = a;
            this.h.w("contentId", value_);
        }
        get z() {
            let ret_ = this.h.n("header");
            return ret_;
        }
        set z(a) {
            let value_ = a;
            this.h.w("header", value_);
        }
        get aa() {
            let ret_ = this.h.n("headerId");
            return ret_;
        }
        set aa(a) {
            let value_ = a;
            this.h.w("headerId", value_);
        }
        get ac() {
            let ret_ = this.h.n("tabHeaderId");
            return ret_;
        }
        set ac(a) {
            let value_ = a;
            this.h.w("tabHeaderId", value_);
        }
        get ad() {
            let ret_ = this.h.n("unpinnedHeaderId");
            return ret_;
        }
        set ad(a) {
            let value_ = a;
            this.h.w("unpinnedHeaderId", value_);
        }
        get y() {
            let ret_ = this.h.n("floatingHeaderId");
            return ret_;
        }
        set y(a) {
            let value_ = a;
            this.h.w("floatingHeaderId", value_);
        }
        get t() {
            let ret_ = this.h.n("size");
            return ret_;
        }
        set t(a) {
            let value_ = a;
            this.h.w("size", value_);
        }
        get j() {
            let ret_ = this.h.n("allowClose");
            return ret_;
        }
        set j(a) {
            let value_ = a;
            this.h.w("allowClose", value_);
        }
        get m() {
            let ret_ = this.h.n("allowMaximize");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.h.w("allowMaximize", value_);
        }
        get n() {
            let ret_ = this.h.n("allowPinning");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.h.w("allowPinning", value_);
        }
        get k() {
            let ret_ = this.h.n("allowDocking");
            return ret_;
        }
        set k(a) {
            let value_ = a;
            this.h.w("allowDocking", value_);
        }
        get i() {
            let ret_ = this.h.n("acceptsInnerDock");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.h.w("acceptsInnerDock", value_);
        }
        get l() {
            let ret_ = this.h.n("allowFloating");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.h.w("allowFloating", value_);
        }
        get u() {
            let ret_ = this.h.n("unpinnedSize");
            return ret_;
        }
        set u(a) {
            let value_ = a;
            this.h.w("unpinnedSize", value_);
        }
        get s() {
            let ret_ = this.h.n("isPinned");
            return ret_;
        }
        set s(a) {
            let value_ = a;
            this.h.w("isPinned", value_);
        }
        get r() {
            let ret_ = this.h.n("isMaximized");
            return ret_;
        }
        set r(a) {
            let value_ = a;
            this.h.w("isMaximized", value_);
        }
        get f() {
            let ret_ = this.h.n("unpinnedLocation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(UnpinnedLocation_$type, EnumUtil.getEnumValue(UnpinnedLocation_$type, this.h.f(UnpinnedLocation_$type, ret_)));
            return EnumUtil.getEnumValue(UnpinnedLocation_$type, ret_);
        }
        set f(a) {
            let value_ = enumGetBox(UnpinnedLocation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.h.w("unpinnedLocation", value_);
        }
        get q() {
            let ret_ = this.h.n("hidden");
            return ret_;
        }
        set q(a) {
            let value_ = a;
            this.h.w("hidden", value_);
        }
        get o() {
            let ret_ = this.h.n("disabled");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.h.w("disabled", value_);
        }
        get p() {
            let ret_ = this.h.n("documentOnly");
            return ret_;
        }
        set p(a) {
            let value_ = a;
            this.h.w("documentOnly", value_);
        }
    }
    ContentPane.$t = /*@__PURE__*/ markType(ContentPane, 'ContentPane', DockManagerPane.$);
    return ContentPane;
})();
/**
 * @hidden
 */
export let ContentPaneCollection = /*@__PURE__*/ (() => {
    class ContentPaneCollection extends ObservableCollection$1 {
        constructor() {
            super(ContentPane.$, 0);
        }
    }
    ContentPaneCollection.$t = /*@__PURE__*/ markType(ContentPaneCollection, 'ContentPaneCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(ContentPane.$));
    return ContentPaneCollection;
})();
/**
 * @hidden
 */
export let SplitPane = /*@__PURE__*/ (() => {
    class SplitPane extends DockManagerPane {
        constructor() {
            super(...arguments);
            this.i = new WCNativeHelper();
            this.q = null;
        }
        b() {
            return this.j;
        }
        get j() {
            return this.i;
        }
        get nativeElement() {
            return this.q;
        }
        set nativeElement(a) {
            this.q = a;
            this.i.o = this.q;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get s() {
            let ret_ = this.j.n("id");
            return ret_;
        }
        set s(a) {
            let value_ = a;
            this.j.w("id", value_);
        }
        get f() {
            let ret_ = this.j.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerPaneType_$type, EnumUtil.getEnumValue(DockManagerPaneType_$type, this.j.f(DockManagerPaneType_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerPaneType_$type, ret_);
        }
        set f(a) {
            let value_ = enumGetBox(DockManagerPaneType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("type", value_);
        }
        get h() {
            let ret_ = this.j.n("orientation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(SplitPaneOrientation_$type, EnumUtil.getEnumValue(SplitPaneOrientation_$type, this.j.f(SplitPaneOrientation_$type, ret_)));
            return EnumUtil.getEnumValue(SplitPaneOrientation_$type, ret_);
        }
        set h(a) {
            let value_ = enumGetBox(SplitPaneOrientation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("orientation", value_);
        }
        get e() {
            let ret_ = this.j.k("panes", (a) => new DockManagerPaneCollection(), (a) => DockManagerPane.createFromNative(a));
            return ret_;
        }
        get p() {
            let ret_ = this.j.n("size");
            return ret_;
        }
        set p(a) {
            let value_ = a;
            this.j.w("size", value_);
        }
        get g() {
            let ret_ = this.j.m("floatingLocation", (a) => new DockManagerPoint());
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.j.w("floatingLocation", value_);
        }
        get o() {
            let ret_ = this.j.n("floatingWidth");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.j.w("floatingWidth", value_);
        }
        get n() {
            let ret_ = this.j.n("floatingHeight");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.j.w("floatingHeight", value_);
        }
        get l() {
            let ret_ = this.j.n("floatingResizable");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.j.w("floatingResizable", value_);
        }
        get k() {
            let ret_ = this.j.n("allowEmpty");
            return ret_;
        }
        set k(a) {
            let value_ = a;
            this.j.w("allowEmpty", value_);
        }
        get m() {
            let ret_ = this.j.n("isMaximized");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.j.w("isMaximized", value_);
        }
    }
    SplitPane.$t = /*@__PURE__*/ markType(SplitPane, 'SplitPane', DockManagerPane.$);
    return SplitPane;
})();
/**
 * @hidden
 */
export let DockManagerPaneCollection = /*@__PURE__*/ (() => {
    class DockManagerPaneCollection extends ObservableCollection$1 {
        constructor() {
            super(DockManagerPane.$, 0);
        }
    }
    DockManagerPaneCollection.$t = /*@__PURE__*/ markType(DockManagerPaneCollection, 'DockManagerPaneCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(DockManagerPane.$));
    return DockManagerPaneCollection;
})();
