import * as React from 'react';
import { DockManagerPaneType_$type } from "./DockManagerPaneType";
import { UnpinnedLocation_$type } from "./UnpinnedLocation";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { ContentPane } from "./ContentPane";
import { defineCustomElements } from "igniteui-dockmanager/loader";
import { isValidProp, ensureEnum, ensureBool } from "igniteui-react-core";
export class IgrContentPane extends IgrDockManagerPane {
    createImplementation() {
        return new ContentPane();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._getMainRef = this._getMainRef.bind(this);
        defineCustomElements();
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The id of the pane. If not set the Dock Manager generates it automatically.
    */
    get id() {
        return this.i.ab;
    }
    set id(v) {
        this.i.ab = v;
    }
    /**
     * The type of the pane.
    */
    get type() {
        return this.i.e;
    }
    set type(v) {
        this.i.e = ensureEnum(DockManagerPaneType_$type, v);
    }
    /**
     * The slot attribute's value of the content element.
    */
    get contentId() {
        return this.i.x;
    }
    set contentId(v) {
        this.i.x = v;
    }
    /**
     * The text header of the content pane. Even if header slot templates are used, the text header is used for aria label.
    */
    get header() {
        return this.i.z;
    }
    set header(v) {
        this.i.z = v;
    }
    /**
     * The slot attribute's value of the content pane header element. If not set, the `header` property value is used.
    */
    get headerId() {
        return this.i.aa;
    }
    set headerId(v) {
        this.i.aa = v;
    }
    /**
     * The slot attribute's value of the tab header element. If not set, the `header` property value is used.
    */
    get tabHeaderId() {
        return this.i.ac;
    }
    set tabHeaderId(v) {
        this.i.ac = v;
    }
    /**
     * The slot attribute's value of the unpinned header element. If not set, the `header` property value is used.
    */
    get unpinnedHeaderId() {
        return this.i.ad;
    }
    set unpinnedHeaderId(v) {
        this.i.ad = v;
    }
    /**
     * The slot attribute's value of the floating header element. If not set, the `headerId` property value is used.
    */
    get floatingHeaderId() {
        return this.i.y;
    }
    set floatingHeaderId(v) {
        this.i.y = v;
    }
    /**
     * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
    */
    get size() {
        return this.i.t;
    }
    set size(v) {
        this.i.t = +v;
    }
    /**
     * Determines whether the end user is allowed to close the pane. Defaults to true.
    */
    get allowClose() {
        return this.i.j;
    }
    set allowClose(v) {
        this.i.j = ensureBool(v);
    }
    /**
     * Determines whether the end user is allowed to maximize the pane.
    */
    get allowMaximize() {
        return this.i.m;
    }
    set allowMaximize(v) {
        this.i.m = ensureBool(v);
    }
    /**
     * Determines whether the end user is allowed to pin/unpin the pane. Defaults to true.
    */
    get allowPinning() {
        return this.i.n;
    }
    set allowPinning(v) {
        this.i.n = ensureBool(v);
    }
    /**
     * Determines whether the end user is allowed to dock the pane. Defaults to true.
    */
    get allowDocking() {
        return this.i.k;
    }
    set allowDocking(v) {
        this.i.k = ensureBool(v);
    }
    /**
     * Determines whether the end user can inner dock another pane in this one. Defaults to true.
    */
    get acceptsInnerDock() {
        return this.i.i;
    }
    set acceptsInnerDock(v) {
        this.i.i = ensureBool(v);
    }
    /**
     * Determines whether the end user is allowed to make the pane floating. Defaults to true.
    */
    get allowFloating() {
        return this.i.l;
    }
    set allowFloating(v) {
        this.i.l = ensureBool(v);
    }
    /**
     * The absolute size of the pane in an unpinned state. Defaults to 200.
    */
    get unpinnedSize() {
        return this.i.u;
    }
    set unpinnedSize(v) {
        this.i.u = +v;
    }
    /**
     * Determines whether a content pane is pinned or not. Defaults to true.
    */
    get isPinned() {
        return this.i.s;
    }
    set isPinned(v) {
        this.i.s = ensureBool(v);
    }
    /**
     * Determines whether a content pane is maximized or not. Defaults to false.
    */
    get isMaximized() {
        return this.i.r;
    }
    set isMaximized(v) {
        this.i.r = ensureBool(v);
    }
    /**
     * The desired unpinned location of the content pane.
     * If not set the Dock Manager automatically calculates it based on the location of the pane relatively to the document host.
     * If more than one document host is presented, the closest one in the pane hierarchy will be used for the calculation.
     * If there is no document host, the default location is left.
    */
    get unpinnedLocation() {
        return this.i.f;
    }
    set unpinnedLocation(v) {
        this.i.f = ensureEnum(UnpinnedLocation_$type, v);
    }
    /**
     * Determines whether a pane is hidden in the UI. Defaults to false.
    */
    get hidden() {
        return this.i.q;
    }
    set hidden(v) {
        this.i.q = ensureBool(v);
    }
    /**
     * Determines whether a pane is disabled. Defaults to false.
    */
    get disabled() {
        return this.i.o;
    }
    set disabled(v) {
        this.i.o = ensureBool(v);
    }
    /**
     * Marks that a content pane can be docked only inside a document host.
    */
    get documentOnly() {
        return this.i.p;
    }
    set documentOnly(v) {
        this.i.p = ensureBool(v);
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
