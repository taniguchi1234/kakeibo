/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { InputBase } from "./InputBase";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { InputType_$type } from "./InputType";
import { ComponentDataValueChangedEventArgs } from "./ComponentDataValueChangedEventArgs";
/**
 * @hidden
 */
export let Input = /*@__PURE__*/ (() => {
    class Input extends InputBase {
        constructor() {
            super(...arguments);
            this.change = null;
        }
        changeChanged() {
            if (this.change != null) {
                this.e.s("change", (a) => this.change(this, ComponentDataValueChangedEventArgs.a(a)));
            }
            else {
                this.e.v("change");
            }
        }
        get am() {
            let ret_ = this.e.n("value");
            return ret_;
        }
        set am(a) {
            let value_ = a;
            this.e.w("value", value_);
        }
        get ab() {
            let ret_ = this.e.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(InputType_$type, EnumUtil.getEnumValue(InputType_$type, this.e.f(InputType_$type, ret_)));
            return EnumUtil.getEnumValue(InputType_$type, ret_);
        }
        set ab(a) {
            let value_ = enumGetBox(InputType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("type", value_);
        }
        get ai() {
            let ret_ = this.e.n("inputMode");
            return ret_;
        }
        set ai(a) {
            let value_ = a;
            this.e.w("inputMode", value_);
        }
        get al() {
            let ret_ = this.e.n("pattern");
            return ret_;
        }
        set al(a) {
            let value_ = a;
            this.e.w("pattern", value_);
        }
        get af() {
            let ret_ = this.e.n("minLength");
            return ret_;
        }
        set af(a) {
            let value_ = a;
            this.e.w("minLength", value_);
        }
        get ae() {
            let ret_ = this.e.n("maxLength");
            return ret_;
        }
        set ae(a) {
            let value_ = a;
            this.e.w("maxLength", value_);
        }
        get ak() {
            let ret_ = this.e.n("min");
            return ret_;
        }
        set ak(a) {
            let value_ = a;
            this.e.w("min", value_);
        }
        get aj() {
            let ret_ = this.e.n("max");
            return ret_;
        }
        set aj(a) {
            let value_ = a;
            this.e.w("max", value_);
        }
        get ag() {
            let ret_ = this.e.n("step");
            return ret_;
        }
        set ag(a) {
            let value_ = a;
            this.e.w("step", value_);
        }
        get ac() {
            let ret_ = this.e.n("autofocus");
            return ret_;
        }
        set ac(a) {
            let value_ = a;
            this.e.w("autofocus", value_);
        }
        get ah() {
            let ret_ = this.e.n("autocomplete");
            return ret_;
        }
        set ah(a) {
            let value_ = a;
            this.e.w("autocomplete", value_);
        }
        get ad() {
            let ret_ = this.e.n("validateOnly");
            return ret_;
        }
        set ad(a) {
            let value_ = a;
            this.e.w("validateOnly", value_);
        }
        ao() {
            this.nativeElement.select();
        }
        aq(a = -1) {
            this.nativeElement.stepUp(this.e.i(a));
        }
        ap(a = -1) {
            this.nativeElement.stepDown(this.e.i(a));
        }
    }
    Input.$t = /*@__PURE__*/ markType(Input, 'Input', InputBase.$);
    return Input;
})();
