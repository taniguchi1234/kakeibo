import * as React from 'react';
import { DockManagerPaneType_$type } from "./DockManagerPaneType";
import { IgrSplitPane } from "./igr-split-pane";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { DocumentHost } from "./DocumentHost";
import { defineCustomElements } from "igniteui-dockmanager/loader";
import { isValidProp, ensureEnum } from "igniteui-react-core";
export class IgrDocumentHost extends IgrDockManagerPane {
    createImplementation() {
        return new DocumentHost();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._getMainRef = this._getMainRef.bind(this);
        defineCustomElements();
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The id of the pane. If not set the Dock Manager generates it automatically.
    */
    get id() {
        return this.i.l;
    }
    set id(v) {
        this.i.l = v;
    }
    /**
     * The type of the pane.
    */
    get type() {
        return this.i.e;
    }
    set type(v) {
        this.i.e = ensureEnum(DockManagerPaneType_$type, v);
    }
    /**
     * The root split pane of the document host.
    */
    get rootPane() {
        const r = this.i.f;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrSplitPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set rootPane(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.f = null : this.i.f = v.i;
    }
    /**
     * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
    */
    get size() {
        return this.i.i;
    }
    set size(v) {
        this.i.i = +v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.rootPane && this.rootPane.name && this.rootPane.name == name) {
            return this.rootPane;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.rootPane && this.rootPane._styling) {
            this.rootPane._styling(container, component, this);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
