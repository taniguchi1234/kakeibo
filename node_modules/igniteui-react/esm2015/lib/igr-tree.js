import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { TreeSelection_$type } from "./TreeSelection";
import { IgrTreeSelectionChangeEventArgs } from "./igr-tree-selection-change-event-args";
import { IgrTreeItemComponentEventArgs } from "./igr-tree-item-component-event-args";
import { Tree } from "./Tree";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcTreeComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * The tree allows users to represent hierarchical data in a tree-view structure,
 * maintaining parent-child relationships, as well as to define static tree-view structure without a corresponding data model.
*/
export class IgrTree extends React.Component {
    createImplementation() {
        return new Tree();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._selectionChanged = null;
        this._selectionChanged_wrapped = null;
        this._itemExpanding = null;
        this._itemExpanding_wrapped = null;
        this._itemExpanded = null;
        this._itemExpanded_wrapped = null;
        this._itemCollapsing = null;
        this._itemCollapsing_wrapped = null;
        this._itemCollapsed = null;
        this._itemCollapsed_wrapped = null;
        this._activeItem = null;
        this._activeItem_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcTreeComponent);
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-tree", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * Whether a single or multiple of a parent's child items can be expanded.
    */
    get singleBranchExpand() {
        return this.i.j;
    }
    set singleBranchExpand(v) {
        this.i.j = ensureBool(v);
    }
    /**
     * Whether clicking over nodes will change their expanded state or not.
    */
    get toggleNodeOnClick() {
        return this.i.k;
    }
    set toggleNodeOnClick(v) {
        this.i.k = ensureBool(v);
    }
    /**
     * The selection state of the tree.
    */
    get selection() {
        return this.i.f;
    }
    set selection(v) {
        this.i.f = ensureEnum(TreeSelection_$type, v);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Tree");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    connectedCallback() {
        this.i.o();
    }
    /**
     * @private
    
    */
    expandToItem(item) {
        this.i.p((item == null ? null : item.i));
    }
    get selectionChanged() {
        return this._selectionChanged;
    }
    set selectionChanged(ev) {
        if (this._selectionChanged_wrapped !== null) {
            this.i.selectionChanged = delegateRemove(this.i.selectionChanged, this._selectionChanged_wrapped);
            this._selectionChanged_wrapped = null;
            this._selectionChanged = null;
        }
        this._selectionChanged = ev;
        this._selectionChanged_wrapped = (o, e) => {
            let outerArgs = new IgrTreeSelectionChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectionChanged) {
                this.beforeSelectionChanged(this, outerArgs);
            }
            if (this._selectionChanged) {
                this._selectionChanged(this, outerArgs);
            }
        };
        this.i.selectionChanged = delegateCombine(this.i.selectionChanged, this._selectionChanged_wrapped);
        if (this.i.selectionChangedChanged) {
            this.i.selectionChangedChanged();
        }
        ;
    }
    get itemExpanding() {
        return this._itemExpanding;
    }
    set itemExpanding(ev) {
        if (this._itemExpanding_wrapped !== null) {
            this.i.itemExpanding = delegateRemove(this.i.itemExpanding, this._itemExpanding_wrapped);
            this._itemExpanding_wrapped = null;
            this._itemExpanding = null;
        }
        this._itemExpanding = ev;
        this._itemExpanding_wrapped = (o, e) => {
            let outerArgs = new IgrTreeItemComponentEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeItemExpanding) {
                this.beforeItemExpanding(this, outerArgs);
            }
            if (this._itemExpanding) {
                this._itemExpanding(this, outerArgs);
            }
        };
        this.i.itemExpanding = delegateCombine(this.i.itemExpanding, this._itemExpanding_wrapped);
        if (this.i.itemExpandingChanged) {
            this.i.itemExpandingChanged();
        }
        ;
    }
    get itemExpanded() {
        return this._itemExpanded;
    }
    set itemExpanded(ev) {
        if (this._itemExpanded_wrapped !== null) {
            this.i.itemExpanded = delegateRemove(this.i.itemExpanded, this._itemExpanded_wrapped);
            this._itemExpanded_wrapped = null;
            this._itemExpanded = null;
        }
        this._itemExpanded = ev;
        this._itemExpanded_wrapped = (o, e) => {
            let outerArgs = new IgrTreeItemComponentEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeItemExpanded) {
                this.beforeItemExpanded(this, outerArgs);
            }
            if (this._itemExpanded) {
                this._itemExpanded(this, outerArgs);
            }
        };
        this.i.itemExpanded = delegateCombine(this.i.itemExpanded, this._itemExpanded_wrapped);
        if (this.i.itemExpandedChanged) {
            this.i.itemExpandedChanged();
        }
        ;
    }
    get itemCollapsing() {
        return this._itemCollapsing;
    }
    set itemCollapsing(ev) {
        if (this._itemCollapsing_wrapped !== null) {
            this.i.itemCollapsing = delegateRemove(this.i.itemCollapsing, this._itemCollapsing_wrapped);
            this._itemCollapsing_wrapped = null;
            this._itemCollapsing = null;
        }
        this._itemCollapsing = ev;
        this._itemCollapsing_wrapped = (o, e) => {
            let outerArgs = new IgrTreeItemComponentEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeItemCollapsing) {
                this.beforeItemCollapsing(this, outerArgs);
            }
            if (this._itemCollapsing) {
                this._itemCollapsing(this, outerArgs);
            }
        };
        this.i.itemCollapsing = delegateCombine(this.i.itemCollapsing, this._itemCollapsing_wrapped);
        if (this.i.itemCollapsingChanged) {
            this.i.itemCollapsingChanged();
        }
        ;
    }
    get itemCollapsed() {
        return this._itemCollapsed;
    }
    set itemCollapsed(ev) {
        if (this._itemCollapsed_wrapped !== null) {
            this.i.itemCollapsed = delegateRemove(this.i.itemCollapsed, this._itemCollapsed_wrapped);
            this._itemCollapsed_wrapped = null;
            this._itemCollapsed = null;
        }
        this._itemCollapsed = ev;
        this._itemCollapsed_wrapped = (o, e) => {
            let outerArgs = new IgrTreeItemComponentEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeItemCollapsed) {
                this.beforeItemCollapsed(this, outerArgs);
            }
            if (this._itemCollapsed) {
                this._itemCollapsed(this, outerArgs);
            }
        };
        this.i.itemCollapsed = delegateCombine(this.i.itemCollapsed, this._itemCollapsed_wrapped);
        if (this.i.itemCollapsedChanged) {
            this.i.itemCollapsedChanged();
        }
        ;
    }
    get activeItem() {
        return this._activeItem;
    }
    set activeItem(ev) {
        if (this._activeItem_wrapped !== null) {
            this.i.activeItem = delegateRemove(this.i.activeItem, this._activeItem_wrapped);
            this._activeItem_wrapped = null;
            this._activeItem = null;
        }
        this._activeItem = ev;
        this._activeItem_wrapped = (o, e) => {
            let outerArgs = new IgrTreeItemComponentEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeActiveItem) {
                this.beforeActiveItem(this, outerArgs);
            }
            if (this._activeItem) {
                this._activeItem(this, outerArgs);
            }
        };
        this.i.activeItem = delegateCombine(this.i.activeItem, this._activeItem_wrapped);
        if (this.i.activeItemChanged) {
            this.i.activeItemChanged();
        }
        ;
    }
}
