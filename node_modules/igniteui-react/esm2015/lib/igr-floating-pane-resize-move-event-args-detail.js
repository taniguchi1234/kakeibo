import { IgrDockManagerPoint } from "./igr-dock-manager-point";
import { IgrFloatingPaneResizeEventArgsDetail } from "./igr-floating-pane-resize-event-args-detail";
import { FloatingPaneResizeMoveEventArgsDetail as FloatingPaneResizeMoveEventArgsDetail_internal } from "./FloatingPaneResizeMoveEventArgsDetail";
export class IgrFloatingPaneResizeMoveEventArgsDetail extends IgrFloatingPaneResizeEventArgsDetail {
    createImplementation() {
        return new FloatingPaneResizeMoveEventArgsDetail_internal();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor() {
        super();
    }
    /**
     * Gets the pane's width before the resizing operation.
    */
    get oldWidth() {
        return this.i.m;
    }
    set oldWidth(v) {
        this.i.m = +v;
    }
    /**
     * Gets the pane's width after the resizing operation.
    */
    get newWidth() {
        return this.i.k;
    }
    set newWidth(v) {
        this.i.k = +v;
    }
    /**
     * Gets the pane's height before the resizing operation.
    */
    get oldHeight() {
        return this.i.l;
    }
    set oldHeight(v) {
        this.i.l = +v;
    }
    /**
     * Gets the pane's height after the resizing operation.
    */
    get newHeight() {
        return this.i.j;
    }
    set newHeight(v) {
        this.i.j = +v;
    }
    /**
     * Gets the pane's floating location before the resizing operation.
    */
    get oldLocation() {
        const r = this.i.i;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDockManagerPoint();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set oldLocation(v) {
        v == null ? this.i.i = null : this.i.i = v.i;
    }
    /**
     * Gets the pane's floating location after the resizing operation.
    */
    get newLocation() {
        const r = this.i.h;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDockManagerPoint();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set newLocation(v) {
        v == null ? this.i.h = null : this.i.h = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.oldLocation && this.oldLocation.name && this.oldLocation.name == name) {
            return this.oldLocation;
        }
        if (this.newLocation && this.newLocation.name && this.newLocation.name == name) {
            return this.newLocation;
        }
        return null;
    }
}
