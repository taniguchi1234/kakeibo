/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CalendarBase } from "./CalendarBase";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { CalendarHeaderOrientation_$type } from "./CalendarHeaderOrientation";
import { CalendarOrientation_$type } from "./CalendarOrientation";
import { CalendarActiveView_$type } from "./CalendarActiveView";
import { CalendarFormatOptions } from "./CalendarFormatOptions";
import { CalendarResourceStrings } from "./CalendarResourceStrings";
import { ComponentDataValueChangedEventArgs } from "./ComponentDataValueChangedEventArgs";
/**
 * @hidden
 */
export let Calendar = /*@__PURE__*/ (() => {
    class Calendar extends CalendarBase {
        constructor() {
            super(...arguments);
            this.change = null;
        }
        get v() {
            let ret_ = this.e.n("value");
            return ret_;
        }
        set v(a) {
            let value_ = a;
            this.e.w("value", value_);
        }
        get l() {
            let ret_ = this.e.n("values");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.e.w("values", value_);
        }
        get u() {
            let ret_ = this.e.n("activeDate");
            return ret_;
        }
        set u(a) {
            let value_ = a;
            this.e.w("activeDate", value_);
        }
        get t() {
            let ret_ = this.e.n("hideOutsideDays");
            return ret_;
        }
        set t(a) {
            let value_ = a;
            this.e.w("hideOutsideDays", value_);
        }
        get s() {
            let ret_ = this.e.n("hideHeader");
            return ret_;
        }
        set s(a) {
            let value_ = a;
            this.e.w("hideHeader", value_);
        }
        get o() {
            let ret_ = this.e.n("headerOrientation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(CalendarHeaderOrientation_$type, EnumUtil.getEnumValue(CalendarHeaderOrientation_$type, this.e.f(CalendarHeaderOrientation_$type, ret_)));
            return EnumUtil.getEnumValue(CalendarHeaderOrientation_$type, ret_);
        }
        set o(a) {
            let value_ = enumGetBox(CalendarHeaderOrientation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("headerOrientation", value_);
        }
        get p() {
            let ret_ = this.e.n("orientation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(CalendarOrientation_$type, EnumUtil.getEnumValue(CalendarOrientation_$type, this.e.f(CalendarOrientation_$type, ret_)));
            return EnumUtil.getEnumValue(CalendarOrientation_$type, ret_);
        }
        set p(a) {
            let value_ = enumGetBox(CalendarOrientation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("orientation", value_);
        }
        get w() {
            let ret_ = this.e.n("visibleMonths");
            return ret_;
        }
        set w(a) {
            let value_ = a;
            this.e.w("visibleMonths", value_);
        }
        get m() {
            let ret_ = this.e.n("activeView");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(CalendarActiveView_$type, EnumUtil.getEnumValue(CalendarActiveView_$type, this.e.f(CalendarActiveView_$type, ret_)));
            return EnumUtil.getEnumValue(CalendarActiveView_$type, ret_);
        }
        set m(a) {
            let value_ = enumGetBox(CalendarActiveView_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("activeView", value_);
        }
        get n() {
            let ret_ = this.e.m("formatOptions", (a) => new CalendarFormatOptions());
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.e.w("formatOptions", value_);
        }
        get q() {
            let ret_ = this.e.m("resourceStrings", (a) => new CalendarResourceStrings());
            return ret_;
        }
        set q(a) {
            let value_ = a;
            this.e.w("resourceStrings", value_);
        }
        changeChanged() {
            if (this.change != null) {
                this.e.s("change", (a) => this.change(this, ComponentDataValueChangedEventArgs.a(a)));
            }
            else {
                this.e.v("change");
            }
        }
    }
    Calendar.$t = /*@__PURE__*/ markType(Calendar, 'Calendar', CalendarBase.$);
    return Calendar;
})();
