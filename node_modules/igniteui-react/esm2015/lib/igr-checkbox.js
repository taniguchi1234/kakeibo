import * as React from 'react';
import { IgrCheckboxBase } from "./igr-checkbox-base";
import { Checkbox } from "./Checkbox";
import { IgcCheckboxComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool } from "igniteui-react-core";
/**
 * A check box allowing single values to be selected/deselected.
*/
export class IgrCheckbox extends IgrCheckboxBase {
    createImplementation() {
        return new Checkbox();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcCheckboxComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-checkbox", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * Draws the checkbox in indeterminate state.
    */
    get indeterminate() {
        return this.i.y;
    }
    set indeterminate(v) {
        this.i.y = ensureBool(v);
    }
}
