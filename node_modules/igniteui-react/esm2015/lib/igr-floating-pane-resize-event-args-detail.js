import { IgrSplitPane } from "./igr-split-pane";
import { ResizerLocation_$type } from "./ResizerLocation";
import { FloatingPaneResizeEventArgsDetail as FloatingPaneResizeEventArgsDetail_internal } from "./FloatingPaneResizeEventArgsDetail";
import { ensureEnum } from "igniteui-react-core";
export class IgrFloatingPaneResizeEventArgsDetail {
    createImplementation() {
        return new FloatingPaneResizeEventArgsDetail_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    /**
     * Gets the source pane that triggers the resize operation.
    */
    get sourcePane() {
        const r = this.i.b;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrSplitPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set sourcePane(v) {
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets the edge/corner that is being dragged.
    */
    get resizerLocation() {
        return this.i.a;
    }
    set resizerLocation(v) {
        this.i.a = ensureEnum(ResizerLocation_$type, v);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.sourcePane && this.sourcePane.name && this.sourcePane.name == name) {
            return this.sourcePane;
        }
        return null;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
