import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrRangeSliderValueEventArgs } from "./igr-range-slider-value-event-args";
import { IgrSliderBase } from "./igr-slider-base";
import { RangeSlider } from "./RangeSlider";
import { IgcRangeSliderComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp } from "igniteui-react-core";
/**
 * A range slider component used to select two numeric values within a range.
*/
export class IgrRangeSlider extends IgrSliderBase {
    createImplementation() {
        return new RangeSlider();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._input = null;
        this._input_wrapped = null;
        this._change = null;
        this._change_wrapped = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcRangeSliderComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-range-slider", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The current value of the lower thumb.
    */
    get lower() {
        return this.i.z;
    }
    set lower(v) {
        this.i.z = +v;
    }
    /**
     * The current value of the upper thumb.
    */
    get upper() {
        return this.i.aa;
    }
    set upper(v) {
        this.i.aa = +v;
    }
    /**
     * The aria label for the lower thumb.
    */
    get thumbLabelLower() {
        return this.i.ab;
    }
    set thumbLabelLower(v) {
        this.i.ab = v;
    }
    /**
     * The aria label for the upper thumb.
    */
    get thumbLabelUpper() {
        return this.i.ac;
    }
    set thumbLabelUpper(v) {
        this.i.ac = v;
    }
    /**
     * Emitted when a value is changed via thumb drag or keyboard interaction.
    */
    get input() {
        return this._input;
    }
    set input(ev) {
        if (this._input_wrapped !== null) {
            this.i.input = delegateRemove(this.i.input, this._input_wrapped);
            this._input_wrapped = null;
            this._input = null;
        }
        this._input = ev;
        this._input_wrapped = (o, e) => {
            let outerArgs = new IgrRangeSliderValueEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeInput) {
                this.beforeInput(this, outerArgs);
            }
            if (this._input) {
                this._input(this, outerArgs);
            }
        };
        this.i.input = delegateCombine(this.i.input, this._input_wrapped);
        if (this.i.inputChanged) {
            this.i.inputChanged();
        }
        ;
    }
    /**
     * Emitted when a value change is committed on a thumb drag end or keyboard interaction.
    */
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrRangeSliderValueEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
}
