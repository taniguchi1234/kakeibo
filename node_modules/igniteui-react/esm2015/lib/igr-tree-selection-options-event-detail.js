import { IgrTreeItemCollection } from "./igr-tree-item-collection";
import { TreeSelectionOptionsEventDetail as TreeSelectionOptionsEventDetail_internal } from "./TreeSelectionOptionsEventDetail";
import { TreeItemCollection as TreeItemCollection_internal } from "./TreeItemCollection";
import { TreeItem } from "./TreeItem";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
export class IgrTreeSelectionOptionsEventDetail {
    createImplementation() {
        return new TreeSelectionOptionsEventDetail_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._newSelection = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    get newSelection() {
        if (this._newSelection === null) {
            let coll = new IgrTreeItemCollection();
            let innerColl = this.i.a;
            if (!innerColl) {
                innerColl = new TreeItemCollection_internal();
            }
            this._newSelection = coll._fromInner(innerColl);
            this.i.a = innerColl;
        }
        return this._newSelection;
    }
    set newSelection(v) {
        if (this._newSelection !== null) {
            this._newSelection._setSyncTarget(null);
            this._newSelection = null;
        }
        let coll = new IgrTreeItemCollection();
        this._newSelection = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(TreeItem.$type);
        let innerColl = this.i.a;
        if (!innerColl) {
            innerColl = new TreeItemCollection_internal();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._newSelection._setSyncTarget(syncColl);
        this.i.a = innerColl;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.newSelection != null && this.newSelection.findByName && this.newSelection.findByName(name)) {
            return this.newSelection.findByName(name);
        }
        return null;
    }
}
