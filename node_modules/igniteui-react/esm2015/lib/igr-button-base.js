import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { ButtonBaseType_$type } from "./ButtonBaseType";
import { ButtonBaseTarget_$type } from "./ButtonBaseTarget";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { NamePatcher, getModifiedProps, isValidProp, ensureEnum, ensureBool, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
export class IgrButtonBase extends React.Component {
    createImplementation() {
        return null;
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._clicked = null;
        this._clicked_wrapped = null;
        this._focus = null;
        this._focus_wrapped = null;
        this._blur = null;
        this._blur_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    /**
     * The type of the button. Defaults to `button`.
    */
    get type() {
        return this.i.b;
    }
    set type(v) {
        this.i.b = ensureEnum(ButtonBaseType_$type, v);
    }
    /**
     * The URL the button points to.
    */
    get href() {
        return this.i.m;
    }
    set href(v) {
        this.i.m = v;
    }
    /**
     * Prompts to save the linked URL instead of navigating to it.
    */
    get download() {
        return this.i.l;
    }
    set download(v) {
        this.i.l = v;
    }
    /**
     * Where to display the linked URL, as the name for a browsing context.
    */
    get target() {
        return this.i.a;
    }
    set target(v) {
        this.i.a = ensureEnum(ButtonBaseTarget_$type, v);
    }
    /**
     * The relationship of the linked URL.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types
    */
    get rel() {
        return this.i.n;
    }
    set rel(v) {
        this.i.n = v;
    }
    get disabled() {
        return this.i.h;
    }
    set disabled(v) {
        this.i.h = ensureBool(v);
    }
    /**
     * Returns the HTMLFormElement associated with this element.
    */
    get form() {
        return this.i.j;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("ButtonBase");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    /**
     * Sets focus in the button.
    
    */
    focusComponent(options) {
        this.i.t((options == null ? null : options.i));
    }
    /**
     * Simulates a mouse click on the element
    
    */
    click() {
        this.i.q();
    }
    /**
     * Removes focus from the button.
    
    */
    blurComponent() {
        this.i.p();
    }
    get clicked() {
        return this._clicked;
    }
    set clicked(ev) {
        if (this._clicked_wrapped !== null) {
            this.i.clicked = delegateRemove(this.i.clicked, this._clicked_wrapped);
            this._clicked_wrapped = null;
            this._clicked = null;
        }
        this._clicked = ev;
        this._clicked_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClicked) {
                this.beforeClicked(this, outerArgs);
            }
            if (this._clicked) {
                this._clicked(this, outerArgs);
            }
        };
        this.i.clicked = delegateCombine(this.i.clicked, this._clicked_wrapped);
        if (this.i.clickedChanged) {
            this.i.clickedChanged();
        }
        ;
    }
    get focus() {
        return this._focus;
    }
    set focus(ev) {
        if (this._focus_wrapped !== null) {
            this.i.focus = delegateRemove(this.i.focus, this._focus_wrapped);
            this._focus_wrapped = null;
            this._focus = null;
        }
        this._focus = ev;
        this._focus_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFocus) {
                this.beforeFocus(this, outerArgs);
            }
            if (this._focus) {
                this._focus(this, outerArgs);
            }
        };
        this.i.focus = delegateCombine(this.i.focus, this._focus_wrapped);
        if (this.i.focusChanged) {
            this.i.focusChanged();
        }
        ;
    }
    get blur() {
        return this._blur;
    }
    set blur(ev) {
        if (this._blur_wrapped !== null) {
            this.i.blur = delegateRemove(this.i.blur, this._blur_wrapped);
            this._blur_wrapped = null;
            this._blur = null;
        }
        this._blur = ev;
        this._blur_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeBlur) {
                this.beforeBlur(this, outerArgs);
            }
            if (this._blur) {
                this._blur(this, outerArgs);
            }
        };
        this.i.blur = delegateCombine(this.i.blur, this._blur_wrapped);
        if (this.i.blurChanged) {
            this.i.blurChanged();
        }
        ;
    }
}
