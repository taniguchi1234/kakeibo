import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrNumberEventArgs } from "./igr-number-event-args";
import { IgrSliderBase } from "./igr-slider-base";
import { Slider } from "./Slider";
import { IgcSliderComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool } from "igniteui-react-core";
/**
 * A slider component used to select numeric value within a range.
*/
export class IgrSlider extends IgrSliderBase {
    createImplementation() {
        return new Slider();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._input = null;
        this._input_wrapped = null;
        this._change = null;
        this._change_wrapped = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcSliderComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-slider", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The current value of the component.
    */
    get value() {
        return this.i.aa;
    }
    set value(v) {
        this.i.aa = +v;
    }
    /**
     * The name attribute of the control.
    */
    get name() {
        return this.i.ab;
    }
    set name(v) {
        this.i.ab = v;
    }
    /**
     * Control the validity of the control.
    */
    get invalid() {
        return this.i.z;
    }
    set invalid(v) {
        this.i.z = ensureBool(v);
    }
    /**
     * Increments the value of the slider by `stepIncrement * step`, where `stepIncrement` defaults to 1.
     * stepIncrement Optional step increment. If no parameter is passed, it defaults to 1.
    
    * @param stepIncrement  * Optional step increment. If no parameter is passed, it defaults to 1.
    */
    stepUp(stepIncrement) {
        this.i.ai(stepIncrement);
    }
    /**
     * Decrements the value of the slider by `stepDecrement * step`, where `stepDecrement` defaults to 1.
     * stepDecrement Optional step decrement. If no parameter is passed, it defaults to 1.
    
    * @param stepDecrement  * Optional step decrement. If no parameter is passed, it defaults to 1.
    */
    stepDown(stepDecrement) {
        this.i.ah(stepDecrement);
    }
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity() {
        this.i.af();
    }
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity() {
        this.i.ad();
    }
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message) {
        this.i.ag(message);
    }
    /**
     * Emitted when a value is changed via thumb drag or keyboard interaction.
    */
    get input() {
        return this._input;
    }
    set input(ev) {
        if (this._input_wrapped !== null) {
            this.i.input = delegateRemove(this.i.input, this._input_wrapped);
            this._input_wrapped = null;
            this._input = null;
        }
        this._input = ev;
        this._input_wrapped = (o, e) => {
            let outerArgs = new IgrNumberEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeInput) {
                this.beforeInput(this, outerArgs);
            }
            if (this._input) {
                this._input(this, outerArgs);
            }
        };
        this.i.input = delegateCombine(this.i.input, this._input_wrapped);
        if (this.i.inputChanged) {
            this.i.inputChanged();
        }
        ;
    }
    /**
     * Emitted when a value change is committed on a thumb drag end or keyboard interaction.
    */
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrNumberEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
}
