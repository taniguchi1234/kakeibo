/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { Step } from "./Step";
import { StepperOrientation_$type } from "./StepperOrientation";
import { StepperStepType_$type } from "./StepperStepType";
import { StepperVerticalAnimation_$type } from "./StepperVerticalAnimation";
import { StepperHorizontalAnimation_$type } from "./StepperHorizontalAnimation";
import { StepperTitlePosition_$type } from "./StepperTitlePosition";
import { ActiveStepChangingArgsEventArgs } from "./ActiveStepChangingArgsEventArgs";
import { ActiveStepChangedArgsEventArgs } from "./ActiveStepChangedArgsEventArgs";
/**
 * @hidden
 */
export let Stepper = /*@__PURE__*/ (() => {
    class Stepper extends BaseElement {
        constructor() {
            super(...arguments);
            this.i = new WCNativeHelper();
            this.n = null;
            this.activeStepChanging = null;
            this.activeStepChanged = null;
        }
        get j() {
            return this.i;
        }
        get nativeElement() {
            return this.n;
        }
        set nativeElement(a) {
            this.n = a;
            this.i.o = this.n;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get a() {
            let ret_ = this.j.m("steps", (a) => new Step());
            return ret_;
        }
        set a(a) {
            let value_ = a;
            this.j.w("steps", value_);
        }
        get e() {
            let ret_ = this.j.n("orientation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StepperOrientation_$type, EnumUtil.getEnumValue(StepperOrientation_$type, this.j.f(StepperOrientation_$type, ret_)));
            return EnumUtil.getEnumValue(StepperOrientation_$type, ret_);
        }
        set e(a) {
            let value_ = enumGetBox(StepperOrientation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("orientation", value_);
        }
        get f() {
            let ret_ = this.j.n("stepType");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StepperStepType_$type, EnumUtil.getEnumValue(StepperStepType_$type, this.j.f(StepperStepType_$type, ret_)));
            return EnumUtil.getEnumValue(StepperStepType_$type, ret_);
        }
        set f(a) {
            let value_ = enumGetBox(StepperStepType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("stepType", value_);
        }
        get l() {
            let ret_ = this.j.n("linear");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.j.w("linear", value_);
        }
        get k() {
            let ret_ = this.j.n("contentTop");
            return ret_;
        }
        set k(a) {
            let value_ = a;
            this.j.w("contentTop", value_);
        }
        get h() {
            let ret_ = this.j.n("verticalAnimation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StepperVerticalAnimation_$type, EnumUtil.getEnumValue(StepperVerticalAnimation_$type, this.j.f(StepperVerticalAnimation_$type, ret_)));
            return EnumUtil.getEnumValue(StepperVerticalAnimation_$type, ret_);
        }
        set h(a) {
            let value_ = enumGetBox(StepperVerticalAnimation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("verticalAnimation", value_);
        }
        get d() {
            let ret_ = this.j.n("horizontalAnimation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StepperHorizontalAnimation_$type, EnumUtil.getEnumValue(StepperHorizontalAnimation_$type, this.j.f(StepperHorizontalAnimation_$type, ret_)));
            return EnumUtil.getEnumValue(StepperHorizontalAnimation_$type, ret_);
        }
        set d(a) {
            let value_ = enumGetBox(StepperHorizontalAnimation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("horizontalAnimation", value_);
        }
        get m() {
            let ret_ = this.j.n("animationDuration");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.j.w("animationDuration", value_);
        }
        get g() {
            let ret_ = this.j.n("titlePosition");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StepperTitlePosition_$type, EnumUtil.getEnumValue(StepperTitlePosition_$type, this.j.f(StepperTitlePosition_$type, ret_)));
            return EnumUtil.getEnumValue(StepperTitlePosition_$type, ret_);
        }
        set g(a) {
            let value_ = enumGetBox(StepperTitlePosition_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("titlePosition", value_);
        }
        activeStepChangingChanged() {
            if (this.activeStepChanging != null) {
                this.j.s("activeStepChanging", (a) => this.activeStepChanging(this, ActiveStepChangingArgsEventArgs.b(a)));
            }
            else {
                this.j.v("activeStepChanging");
            }
        }
        activeStepChangedChanged() {
            if (this.activeStepChanged != null) {
                this.j.s("activeStepChanged", (a) => this.activeStepChanged(this, ActiveStepChangedArgsEventArgs.b(a)));
            }
            else {
                this.j.v("activeStepChanged");
            }
        }
        r() {
            this.nativeElement.connectedCallback();
        }
        s(a) {
            this.nativeElement.navigateTo(this.j.i(a));
        }
        t() {
            this.nativeElement.next();
        }
        u() {
            this.nativeElement.prev();
        }
        v() {
            this.nativeElement.reset();
        }
    }
    Stepper.$t = /*@__PURE__*/ markType(Stepper, 'Stepper', BaseElement.$);
    return Stepper;
})();
