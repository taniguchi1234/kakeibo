/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseComboBoxLike } from "./BaseComboBoxLike";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { DropdownPlacement_$type } from "./DropdownPlacement";
import { SelectScrollStrategy_$type } from "./SelectScrollStrategy";
import { SelectItem } from "./SelectItem";
import { SelectGroup } from "./SelectGroup";
import { SelectItemComponentEventArgs } from "./SelectItemComponentEventArgs";
import { VoidEventArgs } from "./VoidEventArgs";
/**
 * @hidden
 */
export let Select = /*@__PURE__*/ (() => {
    class Select extends BaseComboBoxLike {
        constructor() {
            super(...arguments);
            this.change = null;
            this.focus = null;
            this.blur = null;
            this.opening = null;
            this.opened = null;
            this.closing = null;
            this.closed = null;
        }
        get ah() {
            let ret_ = this.b.n("value");
            return ret_;
        }
        set ah(a) {
            let value_ = a;
            this.b.w("value", value_);
        }
        get ab() {
            let ret_ = this.b.n("outlined");
            return ret_;
        }
        set ab(a) {
            let value_ = a;
            this.b.w("outlined", value_);
        }
        get y() {
            let ret_ = this.b.n("autofocus");
            return ret_;
        }
        set y(a) {
            let value_ = a;
            this.b.w("autofocus", value_);
        }
        get ad() {
            let ret_ = this.b.n("distance");
            return ret_;
        }
        set ad(a) {
            let value_ = a;
            this.b.w("distance", value_);
        }
        get ae() {
            let ret_ = this.b.n("label");
            return ret_;
        }
        set ae(a) {
            let value_ = a;
            this.b.w("label", value_);
        }
        get ag() {
            let ret_ = this.b.n("placeholder");
            return ret_;
        }
        set ag(a) {
            let value_ = a;
            this.b.w("placeholder", value_);
        }
        get o() {
            let ret_ = this.b.n("placement");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DropdownPlacement_$type, EnumUtil.getEnumValue(DropdownPlacement_$type, this.b.f(DropdownPlacement_$type, ret_)));
            return EnumUtil.getEnumValue(DropdownPlacement_$type, ret_);
        }
        set o(a) {
            let value_ = enumGetBox(DropdownPlacement_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.b.w("placement", value_);
        }
        get r() {
            let ret_ = this.b.n("scrollStrategy");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(SelectScrollStrategy_$type, EnumUtil.getEnumValue(SelectScrollStrategy_$type, this.b.f(SelectScrollStrategy_$type, ret_)));
            return EnumUtil.getEnumValue(SelectScrollStrategy_$type, ret_);
        }
        set r(a) {
            let value_ = enumGetBox(SelectScrollStrategy_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.b.w("scrollStrategy", value_);
        }
        get n() {
            let ret_ = this.b.m("items", (a) => new SelectItem());
            return ret_;
        }
        get m() {
            let ret_ = this.b.m("groups", (a) => new SelectGroup());
            return ret_;
        }
        get p() {
            let ret_ = this.b.m("selectedItem", (a) => new SelectItem());
            return ret_;
        }
        get z() {
            let ret_ = this.b.n("disabled");
            return ret_;
        }
        set z(a) {
            let value_ = a;
            this.b.w("disabled", value_);
        }
        get ac() {
            let ret_ = this.b.n("required");
            return ret_;
        }
        set ac(a) {
            let value_ = a;
            this.b.w("required", value_);
        }
        get af() {
            let ret_ = this.b.n("name");
            return ret_;
        }
        set af(a) {
            let value_ = a;
            this.b.w("name", value_);
        }
        get aa() {
            let ret_ = this.b.n("invalid");
            return ret_;
        }
        set aa(a) {
            let value_ = a;
            this.b.w("invalid", value_);
        }
        changeChanged() {
            if (this.change != null) {
                this.b.s("change", (a) => this.change(this, SelectItemComponentEventArgs.b(a)));
            }
            else {
                this.b.v("change");
            }
        }
        focusChanged() {
            if (this.focus != null) {
                this.b.s("focus", (a) => this.focus(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.b.v("focus");
            }
        }
        blurChanged() {
            if (this.blur != null) {
                this.b.s("blur", (a) => this.blur(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.b.v("blur");
            }
        }
        openingChanged() {
            if (this.opening != null) {
                this.b.s("opening", (a) => this.opening(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("opening");
            }
        }
        openedChanged() {
            if (this.opened != null) {
                this.b.s("opened", (a) => this.opened(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("opened");
            }
        }
        closingChanged() {
            if (this.closing != null) {
                this.b.s("closing", (a) => this.closing(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("closing");
            }
        }
        closedChanged() {
            if (this.closed != null) {
                this.b.s("closed", (a) => this.closed(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("closed");
            }
        }
        aq(a) {
            this.nativeElement.focus(this.b.i(a));
        }
        aj() {
            this.nativeElement.blur();
        }
        at() {
            this.nativeElement.reportValidity();
        }
        am() {
            this.nativeElement.clearSelection();
        }
        al() {
            this.nativeElement.checkValidity();
        }
        au(a) {
            this.nativeElement.setCustomValidity(this.b.i(a));
        }
    }
    Select.$t = /*@__PURE__*/ markType(Select, 'Select', BaseComboBoxLike.$);
    return Select;
})();
