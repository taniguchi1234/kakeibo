/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { TabsAlignment_$type } from "./TabsAlignment";
import { TabsActivation_$type } from "./TabsActivation";
import { TabComponentEventArgs } from "./TabComponentEventArgs";
/**
 * @hidden
 */
export let Tabs = /*@__PURE__*/ (() => {
    class Tabs extends BaseElement {
        constructor() {
            super(...arguments);
            this.d = new WCNativeHelper();
            this.f = null;
            this.change = null;
        }
        get e() {
            return this.d;
        }
        get nativeElement() {
            return this.f;
        }
        set nativeElement(a) {
            this.f = a;
            this.d.o = this.f;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get h() {
            let ret_ = this.e.n("selected");
            return ret_;
        }
        get c() {
            let ret_ = this.e.n("alignment");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(TabsAlignment_$type, EnumUtil.getEnumValue(TabsAlignment_$type, this.e.f(TabsAlignment_$type, ret_)));
            return EnumUtil.getEnumValue(TabsAlignment_$type, ret_);
        }
        set c(a) {
            let value_ = enumGetBox(TabsAlignment_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("alignment", value_);
        }
        get b() {
            let ret_ = this.e.n("activation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(TabsActivation_$type, EnumUtil.getEnumValue(TabsActivation_$type, this.e.f(TabsActivation_$type, ret_)));
            return EnumUtil.getEnumValue(TabsActivation_$type, ret_);
        }
        set b(a) {
            let value_ = enumGetBox(TabsActivation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("activation", value_);
        }
        changeChanged() {
            if (this.change != null) {
                this.e.s("change", (a) => this.change(this, TabComponentEventArgs.b(a)));
            }
            else {
                this.e.v("change");
            }
        }
        j() {
            this.nativeElement.disconnectedCallback();
        }
        k(a) {
            this.nativeElement.select(this.e.i(a));
        }
    }
    Tabs.$t = /*@__PURE__*/ markType(Tabs, 'Tabs', BaseElement.$);
    return Tabs;
})();
