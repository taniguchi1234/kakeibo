/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { markType } from "igniteui-react-core";
import { VoidEventArgs } from "./VoidEventArgs";
/**
 * @hidden
 */
export let Dialog = /*@__PURE__*/ (() => {
    class Dialog extends BaseElement {
        constructor() {
            super(...arguments);
            this.c = new WCNativeHelper();
            this.l = null;
            this.closing = null;
            this.closed = null;
        }
        get d() {
            return this.c;
        }
        get nativeElement() {
            return this.l;
        }
        set nativeElement(a) {
            this.l = a;
            this.c.o = this.l;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get h() {
            let ret_ = this.d.n("keepOpenOnEscape");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.d.w("keepOpenOnEscape", value_);
        }
        get e() {
            let ret_ = this.d.n("closeOnOutsideClick");
            return ret_;
        }
        set e(a) {
            let value_ = a;
            this.d.w("closeOnOutsideClick", value_);
        }
        get g() {
            let ret_ = this.d.n("hideDefaultAction");
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.d.w("hideDefaultAction", value_);
        }
        get i() {
            let ret_ = this.d.n("open");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.d.w("open", value_);
        }
        get o() {
            let ret_ = this.d.n("title");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.d.w("title", value_);
        }
        get n() {
            let ret_ = this.d.n("returnValue");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.d.w("returnValue", value_);
        }
        closingChanged() {
            if (this.closing != null) {
                this.d.s("closing", (a) => this.closing(this, VoidEventArgs.b(a)));
            }
            else {
                this.d.v("closing");
            }
        }
        closedChanged() {
            if (this.closed != null) {
                this.d.s("closed", (a) => this.closed(this, VoidEventArgs.b(a)));
            }
            else {
                this.d.v("closed");
            }
        }
        j() {
            return (this.nativeElement.show());
        }
        f() {
            return (this.nativeElement.hide());
        }
        k() {
            return (this.nativeElement.toggle());
        }
    }
    Dialog.$t = /*@__PURE__*/ markType(Dialog, 'Dialog', BaseElement.$);
    return Dialog;
})();
