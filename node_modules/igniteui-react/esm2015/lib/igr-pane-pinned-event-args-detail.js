import { IgrContentPane } from "./igr-content-pane";
import { IgrContentPaneCollection } from "./igr-content-pane-collection";
import { UnpinnedLocation_$type } from "./UnpinnedLocation";
import { PanePinnedEventArgsDetail as PanePinnedEventArgsDetail_internal } from "./PanePinnedEventArgsDetail";
import { ensureBool, ensureEnum } from "igniteui-react-core";
import { ContentPaneCollection as ContentPaneCollection_internal } from "./ContentPaneCollection";
import { ContentPane } from "./ContentPane";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
export class IgrPanePinnedEventArgsDetail {
    createImplementation() {
        return new PanePinnedEventArgsDetail_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._panes = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    /**
     * Gets the source pane that triggers the pinned state change.
    */
    get sourcePane() {
        const r = this.i.a;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrContentPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set sourcePane(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * Gets/sets the panes that are about to get pinned/unpinned.
    */
    get panes() {
        if (this._panes === null) {
            let coll = new IgrContentPaneCollection();
            let innerColl = this.i.b;
            if (!innerColl) {
                innerColl = new ContentPaneCollection_internal();
            }
            this._panes = coll._fromInner(innerColl);
            this.i.b = innerColl;
        }
        return this._panes;
    }
    set panes(v) {
        if (this._panes !== null) {
            this._panes._setSyncTarget(null);
            this._panes = null;
        }
        let coll = new IgrContentPaneCollection();
        this._panes = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(ContentPane.$type);
        let innerColl = this.i.b;
        if (!innerColl) {
            innerColl = new ContentPaneCollection_internal();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._panes._setSyncTarget(syncColl);
        this.i.b = innerColl;
    }
    /**
     * Gets the new pinned value.
    */
    get newValue() {
        return this.i.f;
    }
    set newValue(v) {
        this.i.f = ensureBool(v);
    }
    /**
     * Gets the unpinned location.
    */
    get location() {
        return this.i.c;
    }
    set location(v) {
        this.i.c = ensureEnum(UnpinnedLocation_$type, v);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.sourcePane && this.sourcePane.name && this.sourcePane.name == name) {
            return this.sourcePane;
        }
        if (this.panes != null && this.panes.findByName && this.panes.findByName(name)) {
            return this.panes.findByName(name);
        }
        return null;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
