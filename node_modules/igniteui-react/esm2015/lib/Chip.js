/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { StyleVariant_$type } from "./StyleVariant";
import { ComponentBoolValueChangedEventArgs } from "./ComponentBoolValueChangedEventArgs";
/**
 * @hidden
 */
export let Chip = /*@__PURE__*/ (() => {
    class Chip extends BaseElement {
        constructor() {
            super(...arguments);
            this.d = new WCNativeHelper();
            this.j = null;
            this.remove = null;
            this.select = null;
        }
        get e() {
            return this.d;
        }
        get nativeElement() {
            return this.j;
        }
        set nativeElement(a) {
            this.j = a;
            this.d.o = this.j;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get f() {
            let ret_ = this.e.n("disabled");
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.e.w("disabled", value_);
        }
        get g() {
            let ret_ = this.e.n("removable");
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.e.w("removable", value_);
        }
        get h() {
            let ret_ = this.e.n("selectable");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.e.w("selectable", value_);
        }
        get i() {
            let ret_ = this.e.n("selected");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.e.w("selected", value_);
        }
        get c() {
            let ret_ = this.e.n("variant");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StyleVariant_$type, EnumUtil.getEnumValue(StyleVariant_$type, this.e.f(StyleVariant_$type, ret_)));
            return EnumUtil.getEnumValue(StyleVariant_$type, ret_);
        }
        set c(a) {
            let value_ = enumGetBox(StyleVariant_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("variant", value_);
        }
        removeChanged() {
            if (this.remove != null) {
                this.e.s("remove", (a) => this.remove(this, ComponentBoolValueChangedEventArgs.a(a)));
            }
            else {
                this.e.v("remove");
            }
        }
        selectChanged() {
            if (this.select != null) {
                this.e.s("select", (a) => this.select(this, ComponentBoolValueChangedEventArgs.a(a)));
            }
            else {
                this.e.v("select");
            }
        }
    }
    Chip.$t = /*@__PURE__*/ markType(Chip, 'Chip', BaseElement.$);
    return Chip;
})();
