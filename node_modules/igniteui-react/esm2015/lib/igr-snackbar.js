import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrBaseAlertLike } from "./igr-base-alert-like";
import { Snackbar } from "./Snackbar";
import { IgcSnackbarComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp } from "igniteui-react-core";
/**
 * A snackbar component is used to provide feedback about an operation
 * by showing a brief message at the bottom of the screen.
*/
export class IgrSnackbar extends IgrBaseAlertLike {
    createImplementation() {
        return new Snackbar();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._action = null;
        this._action_wrapped = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcSnackbarComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-snackbar", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The snackbar action button.
    */
    get actionText() {
        return this.i.n;
    }
    set actionText(v) {
        this.i.n = v;
    }
    get action() {
        return this._action;
    }
    set action(ev) {
        if (this._action_wrapped !== null) {
            this.i.action = delegateRemove(this.i.action, this._action_wrapped);
            this._action_wrapped = null;
            this._action = null;
        }
        this._action = ev;
        this._action_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeAction) {
                this.beforeAction(this, outerArgs);
            }
            if (this._action) {
                this._action(this, outerArgs);
            }
        };
        this.i.action = delegateCombine(this.i.action, this._action_wrapped);
        if (this.i.actionChanged) {
            this.i.actionChanged();
        }
        ;
    }
}
