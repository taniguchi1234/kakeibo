/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { DockManagerLayout } from "./DockManagerLayout";
import { DockManagerPane } from "./DockManagerPane";
import { DockManagerPoint } from "./DockManagerPoint";
import { ContentPane } from "./ContentPane";
import { DockManagerShowHeaderIconOnHover_$type } from "./DockManagerShowHeaderIconOnHover";
import { DockManagerResourceStrings } from "./DockManagerResourceStrings";
import { DockManagerShowPaneHeaders_$type } from "./DockManagerShowPaneHeaders";
import { LayoutChangeEventArgs } from "./LayoutChangeEventArgs";
/**
 * @hidden
 */
export let DockManager = /*@__PURE__*/ (() => {
    class DockManager extends BaseElement {
        constructor() {
            super(...arguments);
            this.layoutChange = null;
            this.j = new WCNativeHelper();
            this.r = null;
        }
        layoutChangeChanged() {
            if (this.layoutChange != null) {
                this.k.s("layoutChange", (a) => this.layoutChange(this, LayoutChangeEventArgs.b(this.b)), false);
            }
            else {
                this.k.v("layoutChange");
            }
        }
        get k() {
            return this.j;
        }
        get nativeElement() {
            return this.r;
        }
        set nativeElement(a) {
            this.r = a;
            this.j.o = this.r;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get b() {
            let ret_ = this.k.m("layout", (a) => new DockManagerLayout());
            return ret_;
        }
        set b(a) {
            let value_ = a;
            this.k.w("layout", value_);
        }
        get c() {
            let ret_ = this.k.m("draggedPane", (a) => DockManagerPane.createFromNative(a));
            return ret_;
        }
        set c(a) {
            let value_ = a;
            this.k.w("draggedPane", value_);
        }
        get e() {
            let ret_ = this.k.m("dropPosition", (a) => new DockManagerPoint());
            return ret_;
        }
        set e(a) {
            let value_ = a;
            this.k.w("dropPosition", value_);
        }
        get a() {
            let ret_ = this.k.m("activePane", (a) => new ContentPane());
            return ret_;
        }
        set a(a) {
            let value_ = a;
            this.k.w("activePane", value_);
        }
        get n() {
            let ret_ = this.k.n("allowMaximize");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.k.w("allowMaximize", value_);
        }
        get o() {
            let ret_ = this.k.n("containedInBoundaries");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.k.w("containedInBoundaries", value_);
        }
        get g() {
            let ret_ = this.k.n("showHeaderIconOnHover");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerShowHeaderIconOnHover_$type, EnumUtil.getEnumValue(DockManagerShowHeaderIconOnHover_$type, this.k.f(DockManagerShowHeaderIconOnHover_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerShowHeaderIconOnHover_$type, ret_);
        }
        set g(a) {
            let value_ = enumGetBox(DockManagerShowHeaderIconOnHover_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.k.w("showHeaderIconOnHover", value_);
        }
        get d() {
            let ret_ = this.k.m("maximizedPane", (a) => DockManagerPane.createFromNative(a));
            return ret_;
        }
        set d(a) {
            let value_ = a;
            this.k.w("maximizedPane", value_);
        }
        get f() {
            let ret_ = this.k.m("resourceStrings", (a) => new DockManagerResourceStrings());
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.k.w("resourceStrings", value_);
        }
        get l() {
            let ret_ = this.k.n("allowFloatingPanesResize");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.k.w("allowFloatingPanesResize", value_);
        }
        get p() {
            let ret_ = this.k.n("disableKeyboardNavigation");
            return ret_;
        }
        set p(a) {
            let value_ = a;
            this.k.w("disableKeyboardNavigation", value_);
        }
        get m() {
            let ret_ = this.k.n("allowInnerDock");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.k.w("allowInnerDock", value_);
        }
        get h() {
            let ret_ = this.k.n("showPaneHeaders");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerShowPaneHeaders_$type, EnumUtil.getEnumValue(DockManagerShowPaneHeaders_$type, this.k.f(DockManagerShowPaneHeaders_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerShowPaneHeaders_$type, ret_);
        }
        set h(a) {
            let value_ = enumGetBox(DockManagerShowPaneHeaders_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.k.w("showPaneHeaders", value_);
        }
        get q() {
            let ret_ = this.k.n("proximityDock");
            return ret_;
        }
        set q(a) {
            let value_ = a;
            this.k.w("proximityDock", value_);
        }
        t(a) {
            this.nativeElement.focusPane(this.k.i(a));
        }
    }
    DockManager.$t = /*@__PURE__*/ markType(DockManager, 'DockManager', BaseElement.$);
    return DockManager;
})();
