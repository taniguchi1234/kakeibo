/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { MaskInputBase } from "./MaskInputBase";
import { MaskInputValueMode_$type } from "./MaskInputValueMode";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { ComponentDataValueChangedEventArgs } from "./ComponentDataValueChangedEventArgs";
/**
 * @hidden
 */
export let MaskInput = /*@__PURE__*/ (() => {
    class MaskInput extends MaskInputBase {
        constructor() {
            super(...arguments);
            this.change = null;
        }
        get ae() {
            let ret_ = this.e.n("valueMode");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(MaskInputValueMode_$type, EnumUtil.getEnumValue(MaskInputValueMode_$type, this.e.f(MaskInputValueMode_$type, ret_)));
            return EnumUtil.getEnumValue(MaskInputValueMode_$type, ret_);
        }
        set ae(a) {
            let value_ = enumGetBox(MaskInputValueMode_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("valueMode", value_);
        }
        get ag() {
            let ret_ = this.e.n("value");
            return ret_;
        }
        set ag(a) {
            let value_ = a;
            this.e.w("value", value_);
        }
        get af() {
            let ret_ = this.e.n("mask");
            return ret_;
        }
        set af(a) {
            let value_ = a;
            this.e.w("mask", value_);
        }
        ai() {
            this.nativeElement.connectedCallback();
        }
        changeChanged() {
            if (this.change != null) {
                this.e.s("change", (a) => this.change(this, ComponentDataValueChangedEventArgs.a(a)));
            }
            else {
                this.e.v("change");
            }
        }
    }
    MaskInput.$t = /*@__PURE__*/ markType(MaskInput, 'MaskInput', MaskInputBase.$);
    return MaskInput;
})();
