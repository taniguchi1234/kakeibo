/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { ButtonBaseType_$type } from "./ButtonBaseType";
import { ButtonBaseTarget_$type } from "./ButtonBaseTarget";
import { VoidEventArgs } from "./VoidEventArgs";
/**
 * @hidden
 */
export let ButtonBase = /*@__PURE__*/ (() => {
    class ButtonBase extends BaseElement {
        constructor() {
            super(...arguments);
            this.clicked = null;
            this.f = new WCNativeHelper();
            this.i = null;
            this.focus = null;
            this.blur = null;
        }
        clickedChanged() {
            if (this.clicked != null) {
                this.g.s("click", (a) => this.clicked(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.g.v("click");
            }
        }
        get g() {
            return this.f;
        }
        get nativeElement() {
            return this.i;
        }
        set nativeElement(a) {
            this.i = a;
            this.f.o = this.i;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get b() {
            let ret_ = this.g.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ButtonBaseType_$type, EnumUtil.getEnumValue(ButtonBaseType_$type, this.g.f(ButtonBaseType_$type, ret_)));
            return EnumUtil.getEnumValue(ButtonBaseType_$type, ret_);
        }
        set b(a) {
            let value_ = enumGetBox(ButtonBaseType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.g.w("type", value_);
        }
        get m() {
            let ret_ = this.g.n("href");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.g.w("href", value_);
        }
        get l() {
            let ret_ = this.g.n("download");
            return ret_;
        }
        set l(a) {
            let value_ = a;
            this.g.w("download", value_);
        }
        get a() {
            let ret_ = this.g.n("target");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ButtonBaseTarget_$type, EnumUtil.getEnumValue(ButtonBaseTarget_$type, this.g.f(ButtonBaseTarget_$type, ret_)));
            return EnumUtil.getEnumValue(ButtonBaseTarget_$type, ret_);
        }
        set a(a) {
            let value_ = enumGetBox(ButtonBaseTarget_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.g.w("target", value_);
        }
        get n() {
            let ret_ = this.g.n("rel");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.g.w("rel", value_);
        }
        get h() {
            let ret_ = this.g.n("disabled");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.g.w("disabled", value_);
        }
        get j() {
            let ret_ = this.g.n("form");
            return ret_;
        }
        focusChanged() {
            if (this.focus != null) {
                this.g.s("focus", (a) => this.focus(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.g.v("focus");
            }
        }
        blurChanged() {
            if (this.blur != null) {
                this.g.s("blur", (a) => this.blur(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.g.v("blur");
            }
        }
        t(a) {
            this.nativeElement.focus(this.g.i(a));
        }
        q() {
            this.nativeElement.click();
        }
        p() {
            this.nativeElement.blur();
        }
    }
    ButtonBase.$t = /*@__PURE__*/ markType(ButtonBase, 'ButtonBase', BaseElement.$);
    return ButtonBase;
})();
