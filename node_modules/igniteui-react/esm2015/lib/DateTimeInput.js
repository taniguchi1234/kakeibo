/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { MaskInputBase } from "./MaskInputBase";
import { enumGetBox, markType } from "igniteui-react-core";
import { DatePartDeltas } from "./DatePartDeltas";
import { ComponentDateValueChangedEventArgs } from "./ComponentDateValueChangedEventArgs";
import { DatePart_$type } from "./DatePart";
/**
 * @hidden
 */
export let DateTimeInput = /*@__PURE__*/ (() => {
    class DateTimeInput extends MaskInputBase {
        constructor() {
            super(...arguments);
            this.change = null;
        }
        get ak() {
            let ret_ = this.e.n("inputFormat");
            return ret_;
        }
        set ak(a) {
            let value_ = a;
            this.e.w("inputFormat", value_);
        }
        get ai() {
            let ret_ = this.e.n("value");
            return ret_;
        }
        set ai(a) {
            let value_ = a;
            this.e.w("value", value_);
        }
        get ah() {
            let ret_ = this.e.n("min");
            return ret_;
        }
        set ah(a) {
            let value_ = a;
            this.e.w("min", value_);
        }
        get ag() {
            let ret_ = this.e.n("max");
            return ret_;
        }
        set ag(a) {
            let value_ = a;
            this.e.w("max", value_);
        }
        get aj() {
            let ret_ = this.e.n("displayFormat");
            return ret_;
        }
        set aj(a) {
            let value_ = a;
            this.e.w("displayFormat", value_);
        }
        get ae() {
            let ret_ = this.e.m("spinDelta", (a) => new DatePartDeltas());
            return ret_;
        }
        set ae(a) {
            let value_ = a;
            this.e.w("spinDelta", value_);
        }
        get af() {
            let ret_ = this.e.n("spinLoop");
            return ret_;
        }
        set af(a) {
            let value_ = a;
            this.e.w("spinLoop", value_);
        }
        get al() {
            let ret_ = this.e.n("locale");
            return ret_;
        }
        set al(a) {
            let value_ = a;
            this.e.w("locale", value_);
        }
        changeChanged() {
            if (this.change != null) {
                this.e.s("change", (a) => this.change(this, ComponentDateValueChangedEventArgs.a(a)));
            }
            else {
                this.e.v("change");
            }
        }
        ao() {
            this.nativeElement.connectedCallback();
        }
        aq(a, b = -1) {
            this.nativeElement.stepUp(this.e.i(enumGetBox(DatePart_$type, a)), this.e.i(b));
        }
        ap(a, b = -1) {
            this.nativeElement.stepDown(this.e.i(enumGetBox(DatePart_$type, a)), this.e.i(b));
        }
        an() {
            this.nativeElement.clear();
        }
    }
    DateTimeInput.$t = /*@__PURE__*/ markType(DateTimeInput, 'DateTimeInput', MaskInputBase.$);
    return DateTimeInput;
})();
