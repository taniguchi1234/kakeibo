/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { ButtonGroupAlignment_$type } from "./ButtonGroupAlignment";
import { ButtonGroupSelection_$type } from "./ButtonGroupSelection";
import { ComponentValueChangedEventArgs } from "./ComponentValueChangedEventArgs";
/**
 * @hidden
 */
export let ButtonGroup = /*@__PURE__*/ (() => {
    class ButtonGroup extends BaseElement {
        constructor() {
            super(...arguments);
            this.f = new WCNativeHelper();
            this.i = null;
            this.select = null;
            this.deselect = null;
        }
        get g() {
            return this.f;
        }
        get nativeElement() {
            return this.i;
        }
        set nativeElement(a) {
            this.i = a;
            this.f.o = this.i;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get h() {
            let ret_ = this.g.n("disabled");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.g.w("disabled", value_);
        }
        get b() {
            let ret_ = this.g.n("alignment");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ButtonGroupAlignment_$type, EnumUtil.getEnumValue(ButtonGroupAlignment_$type, this.g.f(ButtonGroupAlignment_$type, ret_)));
            return EnumUtil.getEnumValue(ButtonGroupAlignment_$type, ret_);
        }
        set b(a) {
            let value_ = enumGetBox(ButtonGroupAlignment_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.g.w("alignment", value_);
        }
        get c() {
            let ret_ = this.g.n("selection");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ButtonGroupSelection_$type, EnumUtil.getEnumValue(ButtonGroupSelection_$type, this.g.f(ButtonGroupSelection_$type, ret_)));
            return EnumUtil.getEnumValue(ButtonGroupSelection_$type, ret_);
        }
        set c(a) {
            let value_ = enumGetBox(ButtonGroupSelection_$type, a);
            value_ = WCNativeHelper.getActualName(value_);
            value_ = WCNativeHelper.camel(value_);
            this.g.w("selection", value_);
        }
        get a() {
            let ret_ = this.g.n("selectedItems");
            return ret_;
        }
        set a(a) {
            let value_ = a;
            this.g.w("selectedItems", value_);
        }
        selectChanged() {
            if (this.select != null) {
                this.g.s("select", (a) => this.select(this, ComponentValueChangedEventArgs.a(a)));
            }
            else {
                this.g.v("select");
            }
        }
        deselectChanged() {
            if (this.deselect != null) {
                this.g.s("deselect", (a) => this.deselect(this, ComponentValueChangedEventArgs.a(a)));
            }
            else {
                this.g.v("deselect");
            }
        }
    }
    ButtonGroup.$t = /*@__PURE__*/ markType(ButtonGroup, 'ButtonGroup', BaseElement.$);
    return ButtonGroup;
})();
