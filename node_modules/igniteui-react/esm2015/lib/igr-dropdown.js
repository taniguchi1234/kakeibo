import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { DropdownPlacement_$type } from "./DropdownPlacement";
import { DropdownScrollStrategy_$type } from "./DropdownScrollStrategy";
import { IgrDropdownItem } from "./igr-dropdown-item";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrDropdownItemComponentEventArgs } from "./igr-dropdown-item-component-event-args";
import { IgrBaseComboBoxLike } from "./igr-base-combo-box-like";
import { Dropdown } from "./Dropdown";
import { IgcDropdownComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureEnum, ensureBool } from "igniteui-react-core";
import { IgrDropdownGroup } from "./igr-dropdown-group";
/**
 * Represents a DropDown component.
*/
export class IgrDropdown extends IgrBaseComboBoxLike {
    createImplementation() {
        return new Dropdown();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._opening = null;
        this._opening_wrapped = null;
        this._opened = null;
        this._opened_wrapped = null;
        this._closing = null;
        this._closing_wrapped = null;
        this._closed = null;
        this._closed_wrapped = null;
        this._change = null;
        this._change_wrapped = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcDropdownComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-dropdown", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The preferred placement of the component around the target element.
     * @type {'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'}
    */
    get placement() {
        return this.i.s;
    }
    set placement(v) {
        this.i.s = ensureEnum(DropdownPlacement_$type, v);
    }
    /**
     * Determines the behavior of the component during scrolling of the parent container.
    */
    get scrollStrategy() {
        return this.i.t;
    }
    set scrollStrategy(v) {
        this.i.t = ensureEnum(DropdownScrollStrategy_$type, v);
    }
    /**
     * Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.
     * When true, once enough space is detected on its preferred side, it will flip back.
    */
    get flip() {
        return this.i.y;
    }
    set flip(v) {
        this.i.y = ensureBool(v);
    }
    /**
     * The distance from the target element.
    */
    get distance() {
        return this.i.aa;
    }
    set distance(v) {
        this.i.aa = +v;
    }
    /**
     * Whether the dropdown's width should be the same as the target's one.
    */
    get sameWidth() {
        return this.i.z;
    }
    set sameWidth(v) {
        this.i.z = ensureBool(v);
    }
    /**
     * Returns the items of the dropdown.
    */
    get items() {
        if (!this.i.n) {
            return undefined;
        }
        let ret = [];
        for (let i = 0; i < this.i.n.length; i++) {
            let impl = this.i.n[i];
            if (!impl.externalObject) {
                if (impl instanceof IgrDropdownItem) {
                    ret.push(impl);
                    continue;
                }
                let e = IgrDropdownItem._createFromInternal(impl);
                e._implementation = impl;
                impl.externalObject = e;
            }
            ret.push(impl.externalObject);
        }
        return ret;
    }
    /**
     * Returns the group items of the dropdown.
    */
    get groups() {
        if (!this.i.m) {
            return undefined;
        }
        let ret = [];
        for (let i = 0; i < this.i.m.length; i++) {
            let impl = this.i.m[i];
            if (!impl.externalObject) {
                if (impl instanceof IgrDropdownGroup) {
                    ret.push(impl);
                    continue;
                }
                let e = IgrDropdownGroup._createFromInternal(impl);
                e._implementation = impl;
                impl.externalObject = e;
            }
            ret.push(impl.externalObject);
        }
        return ret;
    }
    /**
     * Returns the selected item from the dropdown or null.
    */
    get selectedItem() {
        const r = this.i.q;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDropdownItem({});
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.selectedItem && this.selectedItem._styling) {
            this.selectedItem._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Shows the dropdown.
    
    */
    showTarget(target_) {
        this.i.showTarget(target_);
    }
    /**
     * Toggles the open state of the dropdown.
    
    */
    toggleTarget(target_) {
        this.i.toggleTarget(target_);
    }
    /**
     * Navigates to the item at the specified index. If it exists, returns the found item, otherwise - null.
    
    */
    navigateTo(index) {
        let iv = this.i.o(index);
        let ret = null;
        if (iv && iv.externalObject) {
            ret = iv.externalObject;
        }
        else {
            if (iv) {
                let e = IgrDropdownItem._createFromInternal(iv);
                e._implementation = iv;
                iv.externalObject = e;
                ret = e;
            }
        }
        return ret;
    }
    /**
     * Selects the item with the specified value. If it exists, returns the found item, otherwise - null.
    
    */
    select(value) {
        let iv = this.i.p(value);
        let ret = null;
        if (iv && iv.externalObject) {
            ret = iv.externalObject;
        }
        else {
            if (iv) {
                let e = IgrDropdownItem._createFromInternal(iv);
                e._implementation = iv;
                iv.externalObject = e;
                ret = e;
            }
        }
        return ret;
    }
    disconnectedCallback() {
        this.i.af();
    }
    /**
     * Clears the current selection of the dropdown.
    
    */
    clearSelection() {
        this.i.ac();
    }
    get opening() {
        return this._opening;
    }
    set opening(ev) {
        if (this._opening_wrapped !== null) {
            this.i.opening = delegateRemove(this.i.opening, this._opening_wrapped);
            this._opening_wrapped = null;
            this._opening = null;
        }
        this._opening = ev;
        this._opening_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeOpening) {
                this.beforeOpening(this, outerArgs);
            }
            if (this._opening) {
                this._opening(this, outerArgs);
            }
        };
        this.i.opening = delegateCombine(this.i.opening, this._opening_wrapped);
        if (this.i.openingChanged) {
            this.i.openingChanged();
        }
        ;
    }
    get opened() {
        return this._opened;
    }
    set opened(ev) {
        if (this._opened_wrapped !== null) {
            this.i.opened = delegateRemove(this.i.opened, this._opened_wrapped);
            this._opened_wrapped = null;
            this._opened = null;
        }
        this._opened = ev;
        this._opened_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeOpened) {
                this.beforeOpened(this, outerArgs);
            }
            if (this._opened) {
                this._opened(this, outerArgs);
            }
        };
        this.i.opened = delegateCombine(this.i.opened, this._opened_wrapped);
        if (this.i.openedChanged) {
            this.i.openedChanged();
        }
        ;
    }
    get closing() {
        return this._closing;
    }
    set closing(ev) {
        if (this._closing_wrapped !== null) {
            this.i.closing = delegateRemove(this.i.closing, this._closing_wrapped);
            this._closing_wrapped = null;
            this._closing = null;
        }
        this._closing = ev;
        this._closing_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClosing) {
                this.beforeClosing(this, outerArgs);
            }
            if (this._closing) {
                this._closing(this, outerArgs);
            }
        };
        this.i.closing = delegateCombine(this.i.closing, this._closing_wrapped);
        if (this.i.closingChanged) {
            this.i.closingChanged();
        }
        ;
    }
    get closed() {
        return this._closed;
    }
    set closed(ev) {
        if (this._closed_wrapped !== null) {
            this.i.closed = delegateRemove(this.i.closed, this._closed_wrapped);
            this._closed_wrapped = null;
            this._closed = null;
        }
        this._closed = ev;
        this._closed_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClosed) {
                this.beforeClosed(this, outerArgs);
            }
            if (this._closed) {
                this._closed(this, outerArgs);
            }
        };
        this.i.closed = delegateCombine(this.i.closed, this._closed_wrapped);
        if (this.i.closedChanged) {
            this.i.closedChanged();
        }
        ;
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrDropdownItemComponentEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
}
