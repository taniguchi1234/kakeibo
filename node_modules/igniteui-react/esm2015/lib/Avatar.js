/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { AvatarShape_$type } from "./AvatarShape";
/**
 * @hidden
 */
export let Avatar = /*@__PURE__*/ (() => {
    class Avatar extends BaseElement {
        constructor() {
            super(...arguments);
            this.b = new WCNativeHelper();
            this.d = null;
        }
        get c() {
            return this.b;
        }
        get nativeElement() {
            return this.d;
        }
        set nativeElement(a) {
            this.d = a;
            this.b.o = this.d;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get h() {
            let ret_ = this.c.n("src");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.c.w("src", value_);
        }
        get f() {
            let ret_ = this.c.n("alt");
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.c.w("alt", value_);
        }
        get g() {
            let ret_ = this.c.n("initials");
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.c.w("initials", value_);
        }
        get a() {
            let ret_ = this.c.n("shape");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(AvatarShape_$type, EnumUtil.getEnumValue(AvatarShape_$type, this.c.f(AvatarShape_$type, ret_)));
            return EnumUtil.getEnumValue(AvatarShape_$type, ret_);
        }
        set a(a) {
            let value_ = enumGetBox(AvatarShape_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.c.w("shape", value_);
        }
    }
    Avatar.$t = /*@__PURE__*/ markType(Avatar, 'Avatar', BaseElement.$);
    return Avatar;
})();
