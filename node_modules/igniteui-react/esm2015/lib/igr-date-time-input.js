import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrDatePartDeltas } from "./igr-date-part-deltas";
import { IgrComponentDateValueChangedEventArgs } from "./igr-component-date-value-changed-event-args";
import { IgrMaskInputBase } from "./igr-mask-input-base";
import { DateTimeInput } from "./DateTimeInput";
import { IgcDateTimeInputComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool } from "igniteui-react-core";
/**
 * A date time input is an input field that lets you set and edit the date and time in a chosen input element
 * using customizable display and input formats.
*/
export class IgrDateTimeInput extends IgrMaskInputBase {
    createImplementation() {
        return new DateTimeInput();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._change = null;
        this._change_wrapped = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcDateTimeInputComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-date-time-input", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    get inputFormat() {
        return this.i.ak;
    }
    set inputFormat(v) {
        this.i.ak = v;
    }
    /**
     * The value of the input.
    */
    get value() {
        return this.i.ai;
    }
    set value(v) {
        this.i.ai = v;
    }
    /**
     * The minimum value required for the input to remain valid.
    */
    get min() {
        return this.i.ah;
    }
    set min(v) {
        this.i.ah = v;
    }
    /**
     * The maximum value required for the input to remain valid.
    */
    get max() {
        return this.i.ag;
    }
    set max(v) {
        this.i.ag = v;
    }
    /**
     * Format to display the value in when not editing.
     * Defaults to the input format if not set.
    */
    get displayFormat() {
        return this.i.aj;
    }
    set displayFormat(v) {
        this.i.aj = v;
    }
    /**
     * Delta values used to increment or decrement each date part on step actions.
     * All values default to `1`.
    */
    get spinDelta() {
        const r = this.i.ae;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDatePartDeltas();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set spinDelta(v) {
        v == null ? this.i.ae = null : this.i.ae = v.i;
    }
    /**
     * Sets whether to loop over the currently spun segment.
    */
    get spinLoop() {
        return this.i.af;
    }
    set spinLoop(v) {
        this.i.af = ensureBool(v);
    }
    /**
     * The locale settings used to display the value.
    */
    get locale() {
        return this.i.al;
    }
    set locale(v) {
        this.i.al = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.spinDelta && this.spinDelta.name && this.spinDelta.name == name) {
            return this.spinDelta;
        }
        return null;
    }
    connectedCallback() {
        this.i.ao();
    }
    stepUp(datePart, delta) {
        this.i.aq((datePart == null ? null : datePart), delta);
    }
    stepDown(datePart, delta) {
        this.i.ap((datePart == null ? null : datePart), delta);
    }
    /**
     * Clears the input element of user input.
    
    */
    clear() {
        this.i.an();
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrComponentDateValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
}
