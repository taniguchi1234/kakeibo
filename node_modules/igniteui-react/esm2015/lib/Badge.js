/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { StyleVariant_$type } from "./StyleVariant";
import { BadgeShape_$type } from "./BadgeShape";
/**
 * @hidden
 */
export let Badge = /*@__PURE__*/ (() => {
    class Badge extends BaseElement {
        constructor() {
            super(...arguments);
            this.c = new WCNativeHelper();
            this.f = null;
        }
        get d() {
            return this.c;
        }
        get nativeElement() {
            return this.f;
        }
        set nativeElement(a) {
            this.f = a;
            this.c.o = this.f;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get b() {
            let ret_ = this.d.n("variant");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StyleVariant_$type, EnumUtil.getEnumValue(StyleVariant_$type, this.d.f(StyleVariant_$type, ret_)));
            return EnumUtil.getEnumValue(StyleVariant_$type, ret_);
        }
        set b(a) {
            let value_ = enumGetBox(StyleVariant_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.d.w("variant", value_);
        }
        get e() {
            let ret_ = this.d.n("outlined");
            return ret_;
        }
        set e(a) {
            let value_ = a;
            this.d.w("outlined", value_);
        }
        get a() {
            let ret_ = this.d.n("shape");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(BadgeShape_$type, EnumUtil.getEnumValue(BadgeShape_$type, this.d.f(BadgeShape_$type, ret_)));
            return EnumUtil.getEnumValue(BadgeShape_$type, ret_);
        }
        set a(a) {
            let value_ = enumGetBox(BadgeShape_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.d.w("shape", value_);
        }
    }
    Badge.$t = /*@__PURE__*/ markType(Badge, 'Badge', BaseElement.$);
    return Badge;
})();
