/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { GroupingDirection_$type } from "./GroupingDirection";
import { FilteringOptions } from "./FilteringOptions";
import { ComboChangeEventArgs } from "./ComboChangeEventArgs";
import { VoidEventArgs } from "./VoidEventArgs";
/**
 * @hidden
 */
export let Combo = /*@__PURE__*/ (() => {
    class Combo extends BaseElement {
        constructor() {
            super(...arguments);
            this.m = new WCNativeHelper();
            this.ab = null;
            this.change = null;
            this.focus = null;
            this.blur = null;
            this.opening = null;
            this.opened = null;
            this.closing = null;
            this.closed = null;
            this.ae = null;
            this.ad = null;
        }
        get n() {
            return this.m;
        }
        get nativeElement() {
            return this.ab;
        }
        set nativeElement(a) {
            this.ab = a;
            this.m.o = this.ab;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get a() {
            let ret_ = this.n.n("data");
            return ret_;
        }
        set a(a) {
            let value_ = a;
            this.n.w("data", value_);
        }
        get w() {
            let ret_ = this.n.n("outlined");
            return ret_;
        }
        set w(a) {
            let value_ = a;
            this.n.w("outlined", value_);
        }
        get z() {
            let ret_ = this.n.n("singleSelect");
            return ret_;
        }
        set z(a) {
            let value_ = a;
            this.n.w("singleSelect", value_);
        }
        get o() {
            let ret_ = this.n.n("autofocus");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.n.w("autofocus", value_);
        }
        get p() {
            let ret_ = this.n.n("autofocusList");
            return ret_;
        }
        set p(a) {
            let value_ = a;
            this.n.w("autofocusList", value_);
        }
        get ah() {
            let ret_ = this.n.n("label");
            return ret_;
        }
        set ah(a) {
            let value_ = a;
            this.n.w("label", value_);
        }
        get aj() {
            let ret_ = this.n.n("placeholder");
            return ret_;
        }
        set aj(a) {
            let value_ = a;
            this.n.w("placeholder", value_);
        }
        get ak() {
            let ret_ = this.n.n("placeholderSearch");
            return ret_;
        }
        set ak(a) {
            let value_ = a;
            this.n.w("placeholderSearch", value_);
        }
        get v() {
            let ret_ = this.n.n("open");
            return ret_;
        }
        set v(a) {
            let value_ = a;
            this.n.w("open", value_);
        }
        get al() {
            let ret_ = this.n.n("valueKey");
            return ret_;
        }
        set al(a) {
            let value_ = a;
            this.n.w("valueKey", value_);
        }
        get af() {
            let ret_ = this.n.n("displayKey");
            return ret_;
        }
        set af(a) {
            let value_ = a;
            this.n.w("displayKey", value_);
        }
        get ag() {
            let ret_ = this.n.n("groupKey");
            return ret_;
        }
        set ag(a) {
            let value_ = a;
            this.n.w("groupKey", value_);
        }
        get f() {
            let ret_ = this.n.n("groupSorting");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(GroupingDirection_$type, EnumUtil.getEnumValue(GroupingDirection_$type, this.n.f(GroupingDirection_$type, ret_)));
            return EnumUtil.getEnumValue(GroupingDirection_$type, ret_);
        }
        set f(a) {
            let value_ = enumGetBox(GroupingDirection_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.n.w("groupSorting", value_);
        }
        get e() {
            let ret_ = this.n.m("filteringOptions", (a) => new FilteringOptions());
            return ret_;
        }
        set e(a) {
            let value_ = a;
            this.n.w("filteringOptions", value_);
        }
        get q() {
            let ret_ = this.n.n("caseSensitiveIcon");
            return ret_;
        }
        set q(a) {
            let value_ = a;
            this.n.w("caseSensitiveIcon", value_);
        }
        get s() {
            let ret_ = this.n.n("disableFiltering");
            return ret_;
        }
        set s(a) {
            let value_ = a;
            this.n.w("disableFiltering", value_);
        }
        get c() {
            let ret_ = this.n.n("value");
            return ret_;
        }
        set c(a) {
            let value_ = a;
            this.n.w("value", value_);
        }
        get b() {
            let ret_ = this.n.n("selection");
            return ret_;
        }
        get r() {
            let ret_ = this.n.n("disabled");
            return ret_;
        }
        set r(a) {
            let value_ = a;
            this.n.w("disabled", value_);
        }
        get x() {
            let ret_ = this.n.n("required");
            return ret_;
        }
        set x(a) {
            let value_ = a;
            this.n.w("required", value_);
        }
        get ai() {
            let ret_ = this.n.n("name");
            return ret_;
        }
        set ai(a) {
            let value_ = a;
            this.n.w("name", value_);
        }
        get u() {
            let ret_ = this.n.n("invalid");
            return ret_;
        }
        set u(a) {
            let value_ = a;
            this.n.w("invalid", value_);
        }
        changeChanged() {
            if (this.change != null) {
                this.n.s("change", (a) => this.change(this, ComboChangeEventArgs.a(a)));
            }
            else {
                this.n.v("change");
            }
        }
        focusChanged() {
            if (this.focus != null) {
                this.n.s("focus", (a) => this.focus(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.n.v("focus");
            }
        }
        blurChanged() {
            if (this.blur != null) {
                this.n.s("blur", (a) => this.blur(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.n.v("blur");
            }
        }
        openingChanged() {
            if (this.opening != null) {
                this.n.s("opening", (a) => this.opening(this, VoidEventArgs.b(a)));
            }
            else {
                this.n.v("opening");
            }
        }
        openedChanged() {
            if (this.opened != null) {
                this.n.s("opened", (a) => this.opened(this, VoidEventArgs.b(a)));
            }
            else {
                this.n.v("opened");
            }
        }
        closingChanged() {
            if (this.closing != null) {
                this.n.s("closing", (a) => this.closing(this, VoidEventArgs.b(a)));
            }
            else {
                this.n.v("closing");
            }
        }
        closedChanged() {
            if (this.closed != null) {
                this.n.s("closed", (a) => this.closed(this, VoidEventArgs.b(a)));
            }
            else {
                this.n.v("closed");
            }
        }
        as() {
            this.nativeElement.connectedCallback();
        }
        av(a) {
            this.nativeElement.focus(this.n.i(a));
        }
        an() {
            this.nativeElement.blur();
        }
        az(a) {
            this.nativeElement.select(this.n.i(a));
        }
        at(a) {
            this.nativeElement.deselect(this.n.i(a));
        }
        y() {
            return (this.nativeElement.show());
        }
        t() {
            return (this.nativeElement.hide());
        }
        aa() {
            return (this.nativeElement.toggle());
        }
        ay() {
            this.nativeElement.reportValidity();
        }
        ap() {
            this.nativeElement.checkValidity();
        }
        a0(a) {
            this.nativeElement.setCustomValidity(this.n.i(a));
        }
    }
    Combo.$t = /*@__PURE__*/ markType(Combo, 'Combo', BaseElement.$);
    return Combo;
})();
