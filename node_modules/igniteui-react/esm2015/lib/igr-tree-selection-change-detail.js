import { TreeSelectionChangeDetail as TreeSelectionChangeDetail_internal } from "./TreeSelectionChangeDetail";
import { IgrTreeItem } from "./igr-tree-item";
export class IgrTreeSelectionChangeDetail {
    createImplementation() {
        return new TreeSelectionChangeDetail_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    get newSelection() {
        if (!this.i.a) {
            return undefined;
        }
        let ret = [];
        for (let i = 0; i < this.i.a.length; i++) {
            let impl = this.i.a[i];
            if (!impl.externalObject) {
                if (impl instanceof IgrTreeItem) {
                    ret.push(impl);
                    continue;
                }
                let e = IgrTreeItem._createFromInternal(impl);
                e._implementation = impl;
                impl.externalObject = e;
            }
            ret.push(impl.externalObject);
        }
        return ret;
    }
    set newSelection(v) {
        let arr = [];
        for (let i = 0; i < v.length; i++) {
            arr.push(v[i].i);
        }
        this.i.a = arr;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    }
}
