import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { MaskInputValueMode_$type } from "./MaskInputValueMode";
import { IgrComponentDataValueChangedEventArgs } from "./igr-component-data-value-changed-event-args";
import { IgrMaskInputBase } from "./igr-mask-input-base";
import { MaskInput } from "./MaskInput";
import { IgcMaskInputComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureEnum } from "igniteui-react-core";
/**
 * A masked input is an input field where a developer can control user input and format the visible value,
 * based on configurable rules
*/
export class IgrMaskInput extends IgrMaskInputBase {
    createImplementation() {
        return new MaskInput();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._change = null;
        this._change_wrapped = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcMaskInputComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-mask-input", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * Dictates the behavior when retrieving the value of the control:
     * - `raw` will return the clean user input.
     * - `withFormatting` will return the value with all literals and prompts.
    */
    get valueMode() {
        return this.i.ae;
    }
    set valueMode(v) {
        this.i.ae = ensureEnum(MaskInputValueMode_$type, v);
    }
    get value() {
        return this.i.ag;
    }
    set value(v) {
        this.i.ag = v;
    }
    /**
     * The mask pattern to apply on the input.
    */
    get mask() {
        return this.i.af;
    }
    set mask(v) {
        this.i.af = v;
    }
    connectedCallback() {
        this.i.ai();
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrComponentDataValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
}
