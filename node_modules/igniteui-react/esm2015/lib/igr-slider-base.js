import * as React from 'react';
import { SliderBaseTickOrientation_$type } from "./SliderBaseTickOrientation";
import { TickLabelRotation_$type } from "./TickLabelRotation";
import { SliderBase } from "./SliderBase";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
export class IgrSliderBase extends React.Component {
    createImplementation() {
        return new SliderBase();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-slider-base", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The minimum value of the slider scale. Defaults to 0.
     * If `min` is greater than `max` the call is a no-op.
     * If `labels` are provided (projected), then `min` is always set to 0.
     * If `lowerBound` ends up being less than than the current `min` value,
     * it is automatically assigned the new `min` value.
    */
    get min() {
        return this.i.m;
    }
    set min(v) {
        this.i.m = +v;
    }
    /**
     * The maximum value of the slider scale. Defaults to 100.
     * If `max` is less than `min` the call is a no-op.
     * If `labels` are provided (projected), then `max` is always set to
     * the number of labels.
     * If `upperBound` ends up being greater than than the current `max` value,
     * it is automatically assigned the new `max` value.
    */
    get max() {
        return this.i.l;
    }
    set max(v) {
        this.i.l = +v;
    }
    /**
     * The lower bound of the slider value. If not set, the `min` value is applied.
    */
    get lowerBound() {
        return this.i.k;
    }
    set lowerBound(v) {
        this.i.k = +v;
    }
    /**
     * The upper bound of the slider value. If not set, the `max` value is applied.
    */
    get upperBound() {
        return this.i.q;
    }
    set upperBound(v) {
        this.i.q = +v;
    }
    /**
     * Disables the UI interactions of the slider.
    */
    get disabled() {
        return this.i.f;
    }
    set disabled(v) {
        this.i.f = ensureBool(v);
    }
    /**
     * Marks the slider track as discrete so it displays the steps.
     * If the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.
    */
    get discreteTrack() {
        return this.i.g;
    }
    set discreteTrack(v) {
        this.i.g = ensureBool(v);
    }
    /**
     * Hides the thumb tooltip.
    */
    get hideTooltip() {
        return this.i.j;
    }
    set hideTooltip(v) {
        this.i.j = ensureBool(v);
    }
    /**
     * Specifies the granularity that the value must adhere to.
     * If set to 0 no stepping is implied and any value in the range is allowed.
     * If `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.
    */
    get step() {
        return this.i.p;
    }
    set step(v) {
        this.i.p = +v;
    }
    /**
     * The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.
    */
    get primaryTicks() {
        return this.i.n;
    }
    set primaryTicks(v) {
        this.i.n = +v;
    }
    /**
     * The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.
    */
    get secondaryTicks() {
        return this.i.o;
    }
    set secondaryTicks(v) {
        this.i.o = +v;
    }
    /**
     * Changes the orientation of the ticks.
    */
    get tickOrientation() {
        return this.i.b;
    }
    set tickOrientation(v) {
        this.i.b = ensureEnum(SliderBaseTickOrientation_$type, v);
    }
    /**
     * Hides the primary tick labels.
    */
    get hidePrimaryLabels() {
        return this.i.h;
    }
    set hidePrimaryLabels(v) {
        this.i.h = ensureBool(v);
    }
    /**
     * Hides the secondary tick labels.
    */
    get hideSecondaryLabels() {
        return this.i.i;
    }
    set hideSecondaryLabels(v) {
        this.i.i = ensureBool(v);
    }
    /**
     * The locale used to format the thumb and tick label values in the slider.
    */
    get locale() {
        return this.i.t;
    }
    set locale(v) {
        this.i.t = v;
    }
    /**
     * String format used for the thumb and tick label values in the slider.
    */
    get valueFormat() {
        return this.i.u;
    }
    set valueFormat(v) {
        this.i.u = v;
    }
    /**
     * The degrees for the rotation of the tick labels. Defaults to 0.
    */
    get tickLabelRotation() {
        return this.i.c;
    }
    set tickLabelRotation(v) {
        this.i.c = ensureEnum(TickLabelRotation_$type, v);
    }
    /**
     * Number format options used for the thumb and tick label values in the slider.
    */
    get valueFormatOptions() {
        return this.i.a;
    }
    set valueFormatOptions(v) {
        this.i.a = v;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.valueFormatOptions && this.valueFormatOptions.name && this.valueFormatOptions.name == name) {
            return this.valueFormatOptions;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("SliderBase");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    connectedCallback() {
        this.i.v();
    }
}
