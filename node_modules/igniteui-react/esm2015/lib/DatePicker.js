/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseComboBoxLike } from "./BaseComboBoxLike";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { DatePickerMode_$type } from "./DatePickerMode";
import { DatePickerHeaderOrientation_$type } from "./DatePickerHeaderOrientation";
import { DatePickerOrientation_$type } from "./DatePickerOrientation";
import { DateRangeDescriptor } from "./DateRangeDescriptor";
import { CalendarResourceStrings } from "./CalendarResourceStrings";
import { WeekDays_$type } from "./WeekDays";
import { VoidEventArgs } from "./VoidEventArgs";
import { ComponentDateValueChangedEventArgs } from "./ComponentDateValueChangedEventArgs";
import { DatePart_$type } from "./DatePart";
import { SelectionRangeDirection_$type } from "./SelectionRangeDirection";
import { RangeTextSelectMode_$type } from "./RangeTextSelectMode";
/**
 * @hidden
 */
export let DatePicker = /*@__PURE__*/ (() => {
    class DatePicker extends BaseComboBoxLike {
        constructor() {
            super(...arguments);
            this.opening = null;
            this.opened = null;
            this.closing = null;
            this.closed = null;
            this.change = null;
            this.input = null;
        }
        get ap() {
            let ret_ = this.b.n("label");
            return ret_;
        }
        set ap(a) {
            let value_ = a;
            this.b.w("label", value_);
        }
        get s() {
            let ret_ = this.b.n("mode");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DatePickerMode_$type, EnumUtil.getEnumValue(DatePickerMode_$type, this.b.f(DatePickerMode_$type, ret_)));
            return EnumUtil.getEnumValue(DatePickerMode_$type, ret_);
        }
        set s(a) {
            let value_ = enumGetBox(DatePickerMode_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.b.w("mode", value_);
        }
        get ad() {
            let ret_ = this.b.n("nonEditable");
            return ret_;
        }
        set ad(a) {
            let value_ = a;
            this.b.w("nonEditable", value_);
        }
        get af() {
            let ret_ = this.b.n("readOnly");
            return ret_;
        }
        set af(a) {
            let value_ = a;
            this.b.w("readOnly", value_);
        }
        get al() {
            let ret_ = this.b.n("value");
            return ret_;
        }
        set al(a) {
            let value_ = a;
            this.b.w("value", value_);
        }
        get ai() {
            let ret_ = this.b.n("activeDate");
            return ret_;
        }
        set ai(a) {
            let value_ = a;
            this.b.w("activeDate", value_);
        }
        get ak() {
            let ret_ = this.b.n("min");
            return ret_;
        }
        set ak(a) {
            let value_ = a;
            this.b.w("min", value_);
        }
        get aj() {
            let ret_ = this.b.n("max");
            return ret_;
        }
        set aj(a) {
            let value_ = a;
            this.b.w("max", value_);
        }
        get r() {
            let ret_ = this.b.n("headerOrientation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DatePickerHeaderOrientation_$type, EnumUtil.getEnumValue(DatePickerHeaderOrientation_$type, this.b.f(DatePickerHeaderOrientation_$type, ret_)));
            return EnumUtil.getEnumValue(DatePickerHeaderOrientation_$type, ret_);
        }
        set r(a) {
            let value_ = enumGetBox(DatePickerHeaderOrientation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.b.w("headerOrientation", value_);
        }
        get t() {
            let ret_ = this.b.n("orientation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DatePickerOrientation_$type, EnumUtil.getEnumValue(DatePickerOrientation_$type, this.b.f(DatePickerOrientation_$type, ret_)));
            return EnumUtil.getEnumValue(DatePickerOrientation_$type, ret_);
        }
        set t(a) {
            let value_ = enumGetBox(DatePickerOrientation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.b.w("orientation", value_);
        }
        get aa() {
            let ret_ = this.b.n("hideHeader");
            return ret_;
        }
        set aa(a) {
            let value_ = a;
            this.b.w("hideHeader", value_);
        }
        get ab() {
            let ret_ = this.b.n("hideOutsideDays");
            return ret_;
        }
        set ab(a) {
            let value_ = a;
            this.b.w("hideOutsideDays", value_);
        }
        get m() {
            let ret_ = this.b.m("disabledDates", (a) => new DateRangeDescriptor());
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.b.w("disabledDates", value_);
        }
        get n() {
            let ret_ = this.b.m("specialDates", (a) => new DateRangeDescriptor());
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.b.w("specialDates", value_);
        }
        get ae() {
            let ret_ = this.b.n("outlined");
            return ret_;
        }
        set ae(a) {
            let value_ = a;
            this.b.w("outlined", value_);
        }
        get as() {
            let ret_ = this.b.n("placeholder");
            return ret_;
        }
        set as(a) {
            let value_ = a;
            this.b.w("placeholder", value_);
        }
        get am() {
            let ret_ = this.b.n("visibleMonths");
            return ret_;
        }
        set am(a) {
            let value_ = a;
            this.b.w("visibleMonths", value_);
        }
        get ah() {
            let ret_ = this.b.n("showWeekNumbers");
            return ret_;
        }
        set ah(a) {
            let value_ = a;
            this.b.w("showWeekNumbers", value_);
        }
        get an() {
            let ret_ = this.b.n("displayFormat");
            return ret_;
        }
        set an(a) {
            let value_ = a;
            this.b.w("displayFormat", value_);
        }
        get ao() {
            let ret_ = this.b.n("inputFormat");
            return ret_;
        }
        set ao(a) {
            let value_ = a;
            this.b.w("inputFormat", value_);
        }
        get aq() {
            let ret_ = this.b.n("locale");
            return ret_;
        }
        set aq(a) {
            let value_ = a;
            this.b.w("locale", value_);
        }
        get at() {
            let ret_ = this.b.n("prompt");
            return ret_;
        }
        set at(a) {
            let value_ = a;
            this.b.w("prompt", value_);
        }
        get o() {
            let ret_ = this.b.m("resourceStrings", (a) => new CalendarResourceStrings());
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.b.w("resourceStrings", value_);
        }
        get y() {
            let ret_ = this.b.n("weekStart");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(WeekDays_$type, EnumUtil.getEnumValue(WeekDays_$type, this.b.f(WeekDays_$type, ret_)));
            return EnumUtil.getEnumValue(WeekDays_$type, ret_);
        }
        set y(a) {
            let value_ = enumGetBox(WeekDays_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.b.w("weekStart", value_);
        }
        get z() {
            let ret_ = this.b.n("disabled");
            return ret_;
        }
        set z(a) {
            let value_ = a;
            this.b.w("disabled", value_);
        }
        get ag() {
            let ret_ = this.b.n("required");
            return ret_;
        }
        set ag(a) {
            let value_ = a;
            this.b.w("required", value_);
        }
        get ar() {
            let ret_ = this.b.n("name");
            return ret_;
        }
        set ar(a) {
            let value_ = a;
            this.b.w("name", value_);
        }
        get ac() {
            let ret_ = this.b.n("invalid");
            return ret_;
        }
        set ac(a) {
            let value_ = a;
            this.b.w("invalid", value_);
        }
        openingChanged() {
            if (this.opening != null) {
                this.b.s("opening", (a) => this.opening(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("opening");
            }
        }
        openedChanged() {
            if (this.opened != null) {
                this.b.s("opened", (a) => this.opened(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("opened");
            }
        }
        closingChanged() {
            if (this.closing != null) {
                this.b.s("closing", (a) => this.closing(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("closing");
            }
        }
        closedChanged() {
            if (this.closed != null) {
                this.b.s("closed", (a) => this.closed(this, VoidEventArgs.b(a)));
            }
            else {
                this.b.v("closed");
            }
        }
        changeChanged() {
            if (this.change != null) {
                this.b.s("change", (a) => this.change(this, ComponentDateValueChangedEventArgs.a(a)));
            }
            else {
                this.b.v("change");
            }
        }
        inputChanged() {
            if (this.input != null) {
                this.b.s("input", (a) => this.input(this, ComponentDateValueChangedEventArgs.a(a)));
            }
            else {
                this.b.v("input");
            }
        }
        az() {
            this.nativeElement.connectedCallback();
        }
        aw() {
            this.nativeElement.clear();
        }
        a9(a, b = -1) {
            this.nativeElement.stepUp(this.b.i(enumGetBox(DatePart_$type, a)), this.b.i(b));
        }
        a8(a, b = -1) {
            this.nativeElement.stepDown(this.b.i(enumGetBox(DatePart_$type, a)), this.b.i(b));
        }
        a4() {
            this.nativeElement.select();
        }
        a7(a, b, c) {
            this.nativeElement.setSelectionRange(this.b.i(a), this.b.i(b), this.b.i(enumGetBox(SelectionRangeDirection_$type, c)));
        }
        a6(a, b, c, d) {
            this.nativeElement.setRangeText(this.b.i(a), this.b.i(b), this.b.i(c), this.b.i(enumGetBox(RangeTextSelectMode_$type, d)));
        }
        a3() {
            this.nativeElement.reportValidity();
        }
        av() {
            this.nativeElement.checkValidity();
        }
        a5(a) {
            this.nativeElement.setCustomValidity(this.b.i(a));
        }
    }
    DatePicker.$t = /*@__PURE__*/ markType(DatePicker, 'DatePicker', BaseComboBoxLike.$);
    return DatePicker;
})();
