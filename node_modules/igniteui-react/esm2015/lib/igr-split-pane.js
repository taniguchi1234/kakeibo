import * as React from 'react';
import { DockManagerPaneType_$type } from "./DockManagerPaneType";
import { SplitPaneOrientation_$type } from "./SplitPaneOrientation";
import { IgrDockManagerPaneCollection } from "./igr-dock-manager-pane-collection";
import { IgrDockManagerPoint } from "./igr-dock-manager-point";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { SplitPane } from "./SplitPane";
import { defineCustomElements } from "igniteui-dockmanager/loader";
import { isValidProp, ensureEnum, ensureBool } from "igniteui-react-core";
import { DockManagerPaneCollection as DockManagerPaneCollection_internal } from "./DockManagerPaneCollection";
import { DockManagerPane } from "./DockManagerPane";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
export class IgrSplitPane extends IgrDockManagerPane {
    createImplementation() {
        return new SplitPane();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._panes = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineCustomElements();
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The id of the pane. If not set the Dock Manager generates it automatically.
    */
    get id() {
        return this.i.s;
    }
    set id(v) {
        this.i.s = v;
    }
    /**
     * The type of the pane.
    */
    get type() {
        return this.i.f;
    }
    set type(v) {
        this.i.f = ensureEnum(DockManagerPaneType_$type, v);
    }
    /**
     * The orientation of the split pane.
    */
    get orientation() {
        return this.i.h;
    }
    set orientation(v) {
        this.i.h = ensureEnum(SplitPaneOrientation_$type, v);
    }
    /**
     * The child panes of the split pane.
    */
    get panes() {
        if (this._panes === null) {
            let coll = new IgrDockManagerPaneCollection();
            let innerColl = this.i.e;
            if (!innerColl) {
                innerColl = new DockManagerPaneCollection_internal();
            }
            this._panes = coll._fromInner(innerColl);
        }
        return this._panes;
    }
    set panes(v) {
        if (this._panes !== null) {
            this._panes._setSyncTarget(null);
            this._panes = null;
        }
        let coll = new IgrDockManagerPaneCollection();
        this._panes = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(DockManagerPane.$type);
        let innerColl = this.i.e;
        if (!innerColl) {
            innerColl = new DockManagerPaneCollection_internal();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._panes._setSyncTarget(syncColl);
    }
    /**
     * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
    */
    get size() {
        return this.i.p;
    }
    set size(v) {
        this.i.p = +v;
    }
    /**
     * The absolute location point of the pane. Applies only for floating panes.
    */
    get floatingLocation() {
        const r = this.i.g;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrDockManagerPoint();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set floatingLocation(v) {
        v == null ? this.i.g = null : this.i.g = v.i;
    }
    /**
     * The absolute width of the pane. Applies only for floating panes. Defaults to 100.
    */
    get floatingWidth() {
        return this.i.o;
    }
    set floatingWidth(v) {
        this.i.o = +v;
    }
    /**
     * The absolute height of the pane. Applies only for floating panes. Defaults to 100.
    */
    get floatingHeight() {
        return this.i.n;
    }
    set floatingHeight(v) {
        this.i.n = +v;
    }
    /**
     * Determines whether floating pane resizing is allowed. Applies only for floating panes.
    */
    get floatingResizable() {
        return this.i.l;
    }
    set floatingResizable(v) {
        this.i.l = ensureBool(v);
    }
    /**
     * Determines whether the pane should present in the UI when empty.
    */
    get allowEmpty() {
        return this.i.k;
    }
    set allowEmpty(v) {
        this.i.k = ensureBool(v);
    }
    /**
     * Determines whether a split pane is maximized or not. Defaults to false.
     * @deprecated Use the `isMaximized` property of TabGroupPane and/or ContentPane instead.  Having isMaximized set to true on a split pane level has no real effect as split panes serve as containers only, meaning they have no actual content to be shown maximized.
    */
    get isMaximized() {
        return this.i.m;
    }
    set isMaximized(v) {
        this.i.m = ensureBool(v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.panes != null && this.panes.findByName && this.panes.findByName(name)) {
            return this.panes.findByName(name);
        }
        if (this.floatingLocation && this.floatingLocation.name && this.floatingLocation.name == name) {
            return this.floatingLocation;
        }
        return null;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
