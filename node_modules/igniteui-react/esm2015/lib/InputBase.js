/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, markType } from "igniteui-react-core";
import { ComponentValueChangedEventArgs } from "./ComponentValueChangedEventArgs";
import { VoidEventArgs } from "./VoidEventArgs";
import { SelectionRangeDirection_$type } from "./SelectionRangeDirection";
import { RangeTextSelectMode_$type } from "./RangeTextSelectMode";
/**
 * @hidden
 */
export let InputBase = /*@__PURE__*/ (() => {
    class InputBase extends BaseElement {
        constructor() {
            super(...arguments);
            this.d = new WCNativeHelper();
            this.k = null;
            this.inputOcurred = null;
            this.focus = null;
            this.blur = null;
        }
        get e() {
            return this.d;
        }
        get nativeElement() {
            return this.k;
        }
        set nativeElement(a) {
            this.k = a;
            this.d.o = this.k;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get h() {
            let ret_ = this.e.n("outlined");
            return ret_;
        }
        set h(a) {
            let value_ = a;
            this.e.w("outlined", value_);
        }
        get i() {
            let ret_ = this.e.n("readOnly");
            return ret_;
        }
        set i(a) {
            let value_ = a;
            this.e.w("readOnly", value_);
        }
        get o() {
            let ret_ = this.e.n("placeholder");
            return ret_;
        }
        set o(a) {
            let value_ = a;
            this.e.w("placeholder", value_);
        }
        get m() {
            let ret_ = this.e.n("label");
            return ret_;
        }
        set m(a) {
            let value_ = a;
            this.e.w("label", value_);
        }
        get f() {
            let ret_ = this.e.n("disabled");
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.e.w("disabled", value_);
        }
        get j() {
            let ret_ = this.e.n("required");
            return ret_;
        }
        set j(a) {
            let value_ = a;
            this.e.w("required", value_);
        }
        get n() {
            let ret_ = this.e.n("name");
            return ret_;
        }
        set n(a) {
            let value_ = a;
            this.e.w("name", value_);
        }
        get g() {
            let ret_ = this.e.n("invalid");
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.e.w("invalid", value_);
        }
        inputOcurredChanged() {
            if (this.inputOcurred != null) {
                this.e.s("input", (a) => this.inputOcurred(this, ComponentValueChangedEventArgs.a(a)));
            }
            else {
                this.e.v("input");
            }
        }
        focusChanged() {
            if (this.focus != null) {
                this.e.s("focus", (a) => this.focus(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.e.v("focus");
            }
        }
        blurChanged() {
            if (this.blur != null) {
                this.e.s("blur", (a) => this.blur(this, VoidEventArgs.b(a)), false);
            }
            else {
                this.e.v("blur");
            }
        }
        t(a) {
            this.nativeElement.focus(this.e.i(a));
        }
        q() {
            this.nativeElement.blur();
        }
        z(a, b, c) {
            this.nativeElement.setSelectionRange(this.e.i(a), this.e.i(b), this.e.i(enumGetBox(SelectionRangeDirection_$type, c)));
        }
        y(a, b, c, d) {
            this.nativeElement.setRangeText(this.e.i(a), this.e.i(b), this.e.i(c), this.e.i(enumGetBox(RangeTextSelectMode_$type, d)));
        }
        v() {
            this.nativeElement.reportValidity();
        }
        r() {
            this.nativeElement.checkValidity();
        }
        w(a) {
            this.nativeElement.setCustomValidity(this.e.i(a));
        }
    }
    InputBase.$t = /*@__PURE__*/ markType(InputBase, 'InputBase', BaseElement.$);
    return InputBase;
})();
