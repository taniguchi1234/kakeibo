/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { TreeSelection_$type } from "./TreeSelection";
import { TreeSelectionChangeEventArgs } from "./TreeSelectionChangeEventArgs";
import { TreeItemComponentEventArgs } from "./TreeItemComponentEventArgs";
/**
 * @hidden
 */
export let Tree = /*@__PURE__*/ (() => {
    class Tree extends BaseElement {
        constructor() {
            super(...arguments);
            this.h = new WCNativeHelper();
            this.l = null;
            this.selectionChanged = null;
            this.itemExpanding = null;
            this.itemExpanded = null;
            this.itemCollapsing = null;
            this.itemCollapsed = null;
            this.activeItem = null;
        }
        get i() {
            return this.h;
        }
        get nativeElement() {
            return this.l;
        }
        set nativeElement(a) {
            this.l = a;
            this.h.o = this.l;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get j() {
            let ret_ = this.i.n("singleBranchExpand");
            return ret_;
        }
        set j(a) {
            let value_ = a;
            this.i.w("singleBranchExpand", value_);
        }
        get k() {
            let ret_ = this.i.n("toggleNodeOnClick");
            return ret_;
        }
        set k(a) {
            let value_ = a;
            this.i.w("toggleNodeOnClick", value_);
        }
        get f() {
            let ret_ = this.i.n("selection");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(TreeSelection_$type, EnumUtil.getEnumValue(TreeSelection_$type, this.i.f(TreeSelection_$type, ret_)));
            return EnumUtil.getEnumValue(TreeSelection_$type, ret_);
        }
        set f(a) {
            let value_ = enumGetBox(TreeSelection_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.i.w("selection", value_);
        }
        selectionChangedChanged() {
            if (this.selectionChanged != null) {
                this.i.s("selection", (a) => this.selectionChanged(this, TreeSelectionChangeEventArgs.b(a)));
            }
            else {
                this.i.v("selection");
            }
        }
        itemExpandingChanged() {
            if (this.itemExpanding != null) {
                this.i.s("itemExpanding", (a) => this.itemExpanding(this, TreeItemComponentEventArgs.b(a)));
            }
            else {
                this.i.v("itemExpanding");
            }
        }
        itemExpandedChanged() {
            if (this.itemExpanded != null) {
                this.i.s("itemExpanded", (a) => this.itemExpanded(this, TreeItemComponentEventArgs.b(a)));
            }
            else {
                this.i.v("itemExpanded");
            }
        }
        itemCollapsingChanged() {
            if (this.itemCollapsing != null) {
                this.i.s("itemCollapsing", (a) => this.itemCollapsing(this, TreeItemComponentEventArgs.b(a)));
            }
            else {
                this.i.v("itemCollapsing");
            }
        }
        itemCollapsedChanged() {
            if (this.itemCollapsed != null) {
                this.i.s("itemCollapsed", (a) => this.itemCollapsed(this, TreeItemComponentEventArgs.b(a)));
            }
            else {
                this.i.v("itemCollapsed");
            }
        }
        activeItemChanged() {
            if (this.activeItem != null) {
                this.i.s("activeItem", (a) => this.activeItem(this, TreeItemComponentEventArgs.b(a)));
            }
            else {
                this.i.v("activeItem");
            }
        }
        o() {
            this.nativeElement.connectedCallback();
        }
        p(a) {
            this.nativeElement.expandToItem(this.i.i(a));
        }
    }
    Tree.$t = /*@__PURE__*/ markType(Tree, 'Tree', BaseElement.$);
    return Tree;
})();
