import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { GroupingDirection_$type } from "./GroupingDirection";
import { IgrFilteringOptions } from "./igr-filtering-options";
import { IgrComboChangeEventArgs } from "./igr-combo-change-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { Combo } from "./Combo";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcComboComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
import { ReactTemplateAdapter } from "igniteui-react-core";
import { html } from "lit-html";
/**
 * The Combo component is similar to the Select component in that it provides a list of options from which the user can make a selection.
 * In contrast to the Select component, the Combo component displays all options in a virtualized list of items,
 * meaning the combo box can simultaneously show thousands of options, where one or more options can be selected.
 * Additionally, users can create custom item templates, allowing for robust data visualization.
 * The Combo component features case-sensitive filtering, grouping, complex data binding, dynamic addition of values and more.
*/
export class IgrCombo extends React.Component {
    createImplementation() {
        return new Combo();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    constructor(props) {
        super(props);
        this.mounted = false;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._change = null;
        this._change_wrapped = null;
        this._focus = null;
        this._focus_wrapped = null;
        this._blur = null;
        this._blur_wrapped = null;
        this._opening = null;
        this._opening_wrapped = null;
        this._opened = null;
        this._opened_wrapped = null;
        this._closing = null;
        this._closing_wrapped = null;
        this._closed = null;
        this._closed_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcComboComponent);
        this._implementation = this.createImplementation();
        this._portalManager = new PortalManager("templates", () => {
            if (this.mounted) {
                this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            this._renderer = new ReactRenderer(this._implementation.nativeElement, document, false, null, this._portalManager);
        }
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-combo", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The data source used to generate the list of options.
    */
    get data() {
        return this.i.a;
    }
    set data(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.a = v;
    }
    /**
     * The outlined attribute of the control.
    */
    get outlined() {
        return this.i.w;
    }
    set outlined(v) {
        this.i.w = ensureBool(v);
    }
    /**
     * Enables single selection mode and moves item filtering to the main input.
    */
    get singleSelect() {
        return this.i.z;
    }
    set singleSelect(v) {
        this.i.z = ensureBool(v);
    }
    /**
     * The autofocus attribute of the control.
    */
    get autofocus() {
        return this.i.o;
    }
    set autofocus(v) {
        this.i.o = ensureBool(v);
    }
    /**
     * Focuses the list of options when the menu opens.
    */
    get autofocusList() {
        return this.i.p;
    }
    set autofocusList(v) {
        this.i.p = ensureBool(v);
    }
    /**
     * The label attribute of the control.
    */
    get label() {
        return this.i.ah;
    }
    set label(v) {
        this.i.ah = v;
    }
    /**
     * The placeholder attribute of the control.
    */
    get placeholder() {
        return this.i.aj;
    }
    set placeholder(v) {
        this.i.aj = v;
    }
    /**
     * The placeholder attribute of the search input.
    */
    get placeholderSearch() {
        return this.i.ak;
    }
    set placeholderSearch(v) {
        this.i.ak = v;
    }
    /**
     * Sets the open state of the component.
    */
    get open() {
        return this.i.v;
    }
    set open(v) {
        this.i.v = ensureBool(v);
    }
    /**
     * The key in the data source used when selecting items.
    */
    get valueKey() {
        return this.i.al;
    }
    set valueKey(v) {
        this.i.al = v;
    }
    /**
     * The key in the data source used to display items in the list.
    */
    get displayKey() {
        return this.i.af;
    }
    set displayKey(v) {
        this.i.af = v;
    }
    /**
     * The key in the data source used to group items in the list.
    */
    get groupKey() {
        return this.i.ag;
    }
    set groupKey(v) {
        this.i.ag = v;
    }
    /**
     * Sorts the items in each group by ascending or descending order.
     * @type {"asc" | "desc" | "none"}
    */
    get groupSorting() {
        return this.i.f;
    }
    set groupSorting(v) {
        this.i.f = ensureEnum(GroupingDirection_$type, v);
    }
    get filteringOptions() {
        const r = this.i.e;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrFilteringOptions();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set filteringOptions(v) {
        v == null ? this.i.e = null : this.i.e = v.i;
    }
    /**
     * Enables the case sensitive search icon in the filtering input.
    */
    get caseSensitiveIcon() {
        return this.i.q;
    }
    set caseSensitiveIcon(v) {
        this.i.q = ensureBool(v);
    }
    /**
     * Disables the filtering of the list of options.
    */
    get disableFiltering() {
        return this.i.s;
    }
    set disableFiltering(v) {
        this.i.s = ensureBool(v);
    }
    get value() {
        return this.i.c;
    }
    set value(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.c = v;
    }
    /**
     * Returns the current selection as an array of objects as provided in the `data` source.
    */
    get selection() {
        return this.i.b;
    }
    /**
     * The disabled state of the component
    */
    get disabled() {
        return this.i.r;
    }
    set disabled(v) {
        this.i.r = ensureBool(v);
    }
    /**
     * Makes the control a required field in a form context.
    */
    get required() {
        return this.i.x;
    }
    set required(v) {
        this.i.x = ensureBool(v);
    }
    /**
     * The name attribute of the control.
    */
    get name() {
        return this.i.ai;
    }
    set name(v) {
        this.i.ai = v;
    }
    /**
     * Control the validity of the control.
    */
    get invalid() {
        return this.i.u;
    }
    set invalid(v) {
        this.i.u = ensureBool(v);
    }
    get itemTemplate() {
        return this._itemTemplate;
    }
    set itemTemplate(v) {
        this._itemTemplate = v;
        if (!this._itemTemplateAdapter) {
            this._itemTemplateAdapter = new ReactTemplateAdapter(this._renderer, this._portalManager, "ae", { html: html });
        }
        this._itemTemplateAdapter.setValue(this.i, this._itemTemplate);
    }
    get groupHeaderTemplate() {
        return this._groupHeaderTemplate;
    }
    set groupHeaderTemplate(v) {
        this._groupHeaderTemplate = v;
        if (!this._groupHeaderTemplateAdapter) {
            this._groupHeaderTemplateAdapter = new ReactTemplateAdapter(this._renderer, this._portalManager, "ad", { html: html });
        }
        this._groupHeaderTemplateAdapter.setValue(this.i, this._groupHeaderTemplate);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.filteringOptions && this.filteringOptions.name && this.filteringOptions.name == name) {
            return this.filteringOptions;
        }
        return null;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Combo");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
    connectedCallback() {
        this.i.as();
    }
    /**
     * Sets focus on the component.
    
    */
    focusComponent(options) {
        this.i.av((options == null ? null : options.i));
    }
    /**
     * Removes focus from the component.
    
    */
    blurComponent() {
        this.i.an();
    }
    select(items) {
        this.i.az(items);
    }
    deselect(items) {
        this.i.at(items);
    }
    /**
     * Shows the list of options.
    
    */
    show() {
        let iv = this.i.y();
        return (iv);
    }
    /**
     * Hides the list of options.
    
    */
    hide() {
        let iv = this.i.t();
        return (iv);
    }
    /**
     * Toggles the list of options.
    
    */
    toggle() {
        let iv = this.i.aa();
        return (iv);
    }
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    reportValidity() {
        this.i.ay();
    }
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    checkValidity() {
        this.i.ap();
    }
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    setCustomValidity(message) {
        this.i.a0(message);
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrComboChangeEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
    get focus() {
        return this._focus;
    }
    set focus(ev) {
        if (this._focus_wrapped !== null) {
            this.i.focus = delegateRemove(this.i.focus, this._focus_wrapped);
            this._focus_wrapped = null;
            this._focus = null;
        }
        this._focus = ev;
        this._focus_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeFocus) {
                this.beforeFocus(this, outerArgs);
            }
            if (this._focus) {
                this._focus(this, outerArgs);
            }
        };
        this.i.focus = delegateCombine(this.i.focus, this._focus_wrapped);
        if (this.i.focusChanged) {
            this.i.focusChanged();
        }
        ;
    }
    get blur() {
        return this._blur;
    }
    set blur(ev) {
        if (this._blur_wrapped !== null) {
            this.i.blur = delegateRemove(this.i.blur, this._blur_wrapped);
            this._blur_wrapped = null;
            this._blur = null;
        }
        this._blur = ev;
        this._blur_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeBlur) {
                this.beforeBlur(this, outerArgs);
            }
            if (this._blur) {
                this._blur(this, outerArgs);
            }
        };
        this.i.blur = delegateCombine(this.i.blur, this._blur_wrapped);
        if (this.i.blurChanged) {
            this.i.blurChanged();
        }
        ;
    }
    get opening() {
        return this._opening;
    }
    set opening(ev) {
        if (this._opening_wrapped !== null) {
            this.i.opening = delegateRemove(this.i.opening, this._opening_wrapped);
            this._opening_wrapped = null;
            this._opening = null;
        }
        this._opening = ev;
        this._opening_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeOpening) {
                this.beforeOpening(this, outerArgs);
            }
            if (this._opening) {
                this._opening(this, outerArgs);
            }
        };
        this.i.opening = delegateCombine(this.i.opening, this._opening_wrapped);
        if (this.i.openingChanged) {
            this.i.openingChanged();
        }
        ;
    }
    get opened() {
        return this._opened;
    }
    set opened(ev) {
        if (this._opened_wrapped !== null) {
            this.i.opened = delegateRemove(this.i.opened, this._opened_wrapped);
            this._opened_wrapped = null;
            this._opened = null;
        }
        this._opened = ev;
        this._opened_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeOpened) {
                this.beforeOpened(this, outerArgs);
            }
            if (this._opened) {
                this._opened(this, outerArgs);
            }
        };
        this.i.opened = delegateCombine(this.i.opened, this._opened_wrapped);
        if (this.i.openedChanged) {
            this.i.openedChanged();
        }
        ;
    }
    get closing() {
        return this._closing;
    }
    set closing(ev) {
        if (this._closing_wrapped !== null) {
            this.i.closing = delegateRemove(this.i.closing, this._closing_wrapped);
            this._closing_wrapped = null;
            this._closing = null;
        }
        this._closing = ev;
        this._closing_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClosing) {
                this.beforeClosing(this, outerArgs);
            }
            if (this._closing) {
                this._closing(this, outerArgs);
            }
        };
        this.i.closing = delegateCombine(this.i.closing, this._closing_wrapped);
        if (this.i.closingChanged) {
            this.i.closingChanged();
        }
        ;
    }
    get closed() {
        return this._closed;
    }
    set closed(ev) {
        if (this._closed_wrapped !== null) {
            this.i.closed = delegateRemove(this.i.closed, this._closed_wrapped);
            this._closed_wrapped = null;
            this._closed = null;
        }
        this._closed = ev;
        this._closed_wrapped = (o, e) => {
            let outerArgs = new IgrVoidEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeClosed) {
                this.beforeClosed(this, outerArgs);
            }
            if (this._closed) {
                this._closed(this, outerArgs);
            }
        };
        this.i.closed = delegateCombine(this.i.closed, this._closed_wrapped);
        if (this.i.closedChanged) {
            this.i.closedChanged();
        }
        ;
    }
}
