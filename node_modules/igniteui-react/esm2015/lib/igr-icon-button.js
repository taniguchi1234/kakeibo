import * as React from 'react';
import { IconButtonVariant_$type } from "./IconButtonVariant";
import { IgrButtonBase } from "./igr-button-base";
import { IconButton } from "./IconButton";
import { IgcIconButtonComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool, ensureEnum } from "igniteui-react-core";
/**

*/
export class IgrIconButton extends IgrButtonBase {
    createImplementation() {
        return new IconButton();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcIconButtonComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-icon-button", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    /**
     * The name of the icon.
    */
    get name() {
        return this.i.y;
    }
    set name(v) {
        this.i.y = v;
    }
    /**
     * The name of the icon collection.
    */
    get collection() {
        return this.i.x;
    }
    set collection(v) {
        this.i.x = v;
    }
    /**
     * Whether to flip the icon button. Useful for RTL layouts.
    */
    get mirrored() {
        return this.i.w;
    }
    set mirrored(v) {
        this.i.w = ensureBool(v);
    }
    /**
     * The visual variant of the icon button.
    */
    get variant() {
        return this.i.v;
    }
    set variant(v) {
        this.i.v = ensureEnum(IconButtonVariant_$type, v);
    }
    registerIcon(name, url, collection) {
        this.i.z(name, url, collection);
    }
    registerIconFromText(name, iconText, collection) {
        this.i.aa(name, iconText, collection);
    }
}
