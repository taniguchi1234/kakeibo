import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { IgrContentPaneCollection } from "./igr-content-pane-collection";
import { IgrPaneDragAction } from "./igr-pane-drag-action";
import { PaneDragOverEventArgsDetail as PaneDragOverEventArgsDetail_internal } from "./PaneDragOverEventArgsDetail";
import { ensureBool } from "igniteui-react-core";
import { ContentPaneCollection as ContentPaneCollection_internal } from "./ContentPaneCollection";
import { ContentPane } from "./ContentPane";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
export class IgrPaneDragOverEventArgsDetail {
    createImplementation() {
        return new PaneDragOverEventArgsDetail_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._panes = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    /**
     * Gets the source pane that triggers the drag over.
    */
    get sourcePane() {
        const r = this.i.b;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrDockManagerPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set sourcePane(v) {
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    /**
     * Gets the panes that are dragged over.
    */
    get panes() {
        if (this._panes === null) {
            let coll = new IgrContentPaneCollection();
            let innerColl = this.i.a;
            if (!innerColl) {
                innerColl = new ContentPaneCollection_internal();
            }
            this._panes = coll._fromInner(innerColl);
            this.i.a = innerColl;
        }
        return this._panes;
    }
    set panes(v) {
        if (this._panes !== null) {
            this._panes._setSyncTarget(null);
            this._panes = null;
        }
        let coll = new IgrContentPaneCollection();
        this._panes = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(ContentPane.$type);
        let innerColl = this.i.a;
        if (!innerColl) {
            innerColl = new ContentPaneCollection_internal();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._panes._setSyncTarget(syncColl);
        this.i.a = innerColl;
    }
    /**
     * Gets information about the action being performed.
    */
    get action() {
        const r = this.i.c;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrPaneDragAction({});
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set action(v) {
        v == null ? this.i.c = null : this.i.c = v.i;
    }
    /**
     * Gets/sets whether the action is valid.
    */
    get isValid() {
        return this.i.f;
    }
    set isValid(v) {
        this.i.f = ensureBool(v);
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.sourcePane && this.sourcePane.name && this.sourcePane.name == name) {
            return this.sourcePane;
        }
        if (this.panes != null && this.panes.findByName && this.panes.findByName(name)) {
            return this.panes.findByName(name);
        }
        if (this.action && this.action.name && this.action.name == name) {
            return this.action;
        }
        return null;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
