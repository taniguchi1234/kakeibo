import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { CalendarHeaderOrientation_$type } from "./CalendarHeaderOrientation";
import { CalendarOrientation_$type } from "./CalendarOrientation";
import { CalendarActiveView_$type } from "./CalendarActiveView";
import { IgrCalendarFormatOptions } from "./igr-calendar-format-options";
import { IgrCalendarResourceStrings } from "./igr-calendar-resource-strings";
import { IgrComponentDataValueChangedEventArgs } from "./igr-component-data-value-changed-event-args";
import { IgrCalendarBase } from "./igr-calendar-base";
import { Calendar } from "./Calendar";
import { IgcCalendarComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool, ensureEnum } from "igniteui-react-core";
/**
 * Represents a calendar that lets users
 * to select a date value in a variety of different ways.
*/
export class IgrCalendar extends IgrCalendarBase {
    createImplementation() {
        return new Calendar();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
        this._change = null;
        this._change_wrapped = null;
        this._getMainRef = this._getMainRef.bind(this);
        defineComponents(IgcCalendarComponent);
    }
    componentDidMount() {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        super.componentDidMount();
    }
    render() {
        const nativePropsName = Object.keys(this.props).filter(prop => !isValidProp(this, prop) && prop !== "originalRef");
        const nativeProps = {};
        nativePropsName.forEach(propName => {
            nativeProps[propName] = this.props[propName];
        });
        let propChildren = this.props.children;
        let children = [];
        React.Children.forEach(propChildren, (ch) => {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        let style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        let div = React.createElement("igc-calendar", Object.assign(Object.assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    }
    _getMainRef(ref) {
        this._elRef = ref;
    }
    get value() {
        return this.i.v;
    }
    set value(v) {
        this.i.v = v;
    }
    get values() {
        return this.i.l;
    }
    set values(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.l = v;
    }
    /**
     * Sets the date which is shown in view and is highlighted. By default it is the current date.
    */
    get activeDate() {
        return this.i.u;
    }
    set activeDate(v) {
        this.i.u = v;
    }
    /**
     * Whether to show the dates that do not belong to the current active month.
    */
    get hideOutsideDays() {
        return this.i.t;
    }
    set hideOutsideDays(v) {
        this.i.t = ensureBool(v);
    }
    /**
     * Whether to render the calendar header part.
     * When the calendar selection is set to `multiple` the header is always hidden.
    */
    get hideHeader() {
        return this.i.s;
    }
    set hideHeader(v) {
        this.i.s = ensureBool(v);
    }
    /**
     * The orientation of the calendar header.
    */
    get headerOrientation() {
        return this.i.o;
    }
    set headerOrientation(v) {
        this.i.o = ensureEnum(CalendarHeaderOrientation_$type, v);
    }
    /**
     * The orientation of the calendar months when more than one month
     * is being shown.
    */
    get orientation() {
        return this.i.p;
    }
    set orientation(v) {
        this.i.p = ensureEnum(CalendarOrientation_$type, v);
    }
    /**
     * The number of months displayed in the days view.
    */
    get visibleMonths() {
        return this.i.w;
    }
    set visibleMonths(v) {
        this.i.w = +v;
    }
    /**
     * The current active view of the component.
    */
    get activeView() {
        return this.i.m;
    }
    set activeView(v) {
        this.i.m = ensureEnum(CalendarActiveView_$type, v);
    }
    /**
     * The options used to format the months and the weekdays in the calendar views.
    */
    get formatOptions() {
        const r = this.i.n;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrCalendarFormatOptions();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set formatOptions(v) {
        v == null ? this.i.n = null : this.i.n = v.i;
    }
    /**
     * The resource strings for localization.
    */
    get resourceStrings() {
        const r = this.i.q;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = new IgrCalendarResourceStrings();
            if (r.$type) {
                e._implementation = r;
            }
            else {
                if (e.i.setNativeElement) {
                    e.i.setNativeElement(r);
                }
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set resourceStrings(v) {
        v == null ? this.i.q = null : this.i.q = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatOptions && this.formatOptions.name && this.formatOptions.name == name) {
            return this.formatOptions;
        }
        if (this.resourceStrings && this.resourceStrings.name && this.resourceStrings.name == name) {
            return this.resourceStrings;
        }
        return null;
    }
    get change() {
        return this._change;
    }
    set change(ev) {
        if (this._change_wrapped !== null) {
            this.i.change = delegateRemove(this.i.change, this._change_wrapped);
            this._change_wrapped = null;
            this._change = null;
        }
        this._change = ev;
        this._change_wrapped = (o, e) => {
            let outerArgs = new IgrComponentDataValueChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeChange) {
                this.beforeChange(this, outerArgs);
            }
            if (this._change) {
                this._change(this, outerArgs);
            }
        };
        this.i.change = delegateCombine(this.i.change, this._change_wrapped);
        if (this.i.changeChanged) {
            this.i.changeChanged();
        }
        ;
    }
}
