import { IgCollection } from "igniteui-react-core";
import { markType } from "igniteui-react-core";
import { SyncableObservableCollection$2 } from "igniteui-react-core";
import { ContentPane as ContentPane_internal } from './ContentPane';
import { IgrContentPane as IgrContentPane } from './igr-content-pane';
export class IgrContentPaneCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgrContentPane.$type) {
            IgrContentPane.$type = markType(IgrContentPane, "IgrContentPane");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgrContentPane.$type) {
            IgrContentPane.$type = markType(IgrContentPane, "IgrContentPane");
        }
        let coll = new SyncableObservableCollection$2(IgrContentPane.$type, ContentPane_internal.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = IgrContentPane._createFromInternal(int);
                if (ext) {
                    if (!int.$type && ext._implementation.setNativeElement) {
                        ext._implementation.setNativeElement(int);
                    }
                    else {
                        ext._implementation = int;
                    }
                }
            }
            return ext;
        };
        return coll;
    }
}
