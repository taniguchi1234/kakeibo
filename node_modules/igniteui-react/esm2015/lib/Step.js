/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, markType } from "igniteui-react-core";
import { StepType_$type } from "./StepType";
import { StepDirection_$type } from "./StepDirection";
/**
 * @hidden
 */
export let Step = /*@__PURE__*/ (() => {
    class Step extends BaseElement {
        constructor() {
            super(...arguments);
            this.a = new WCNativeHelper();
            this.h = null;
        }
        get b() {
            return this.a;
        }
        get nativeElement() {
            return this.h;
        }
        set nativeElement(a) {
            this.h = a;
            this.a.o = this.h;
        }
        setNativeElement(a) {
            this.nativeElement = a;
        }
        get f() {
            let ret_ = this.b.n("invalid");
            return ret_;
        }
        set f(a) {
            let value_ = a;
            this.b.w("invalid", value_);
        }
        get c() {
            let ret_ = this.b.n("active");
            return ret_;
        }
        set c(a) {
            let value_ = a;
            this.b.w("active", value_);
        }
        get g() {
            let ret_ = this.b.n("optional");
            return ret_;
        }
        set g(a) {
            let value_ = a;
            this.b.w("optional", value_);
        }
        get e() {
            let ret_ = this.b.n("disabled");
            return ret_;
        }
        set e(a) {
            let value_ = a;
            this.b.w("disabled", value_);
        }
        get d() {
            let ret_ = this.b.n("complete");
            return ret_;
        }
        set d(a) {
            let value_ = a;
            this.b.w("complete", value_);
        }
        k(a, b) {
            this.nativeElement.toggleAnimation(this.b.i(enumGetBox(StepType_$type, a)), this.b.i(enumGetBox(StepDirection_$type, b)));
        }
    }
    Step.$t = /*@__PURE__*/ markType(Step, 'Step', BaseElement.$);
    return Step;
})();
