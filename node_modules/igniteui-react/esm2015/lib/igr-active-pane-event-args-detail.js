import { IgrContentPane } from "./igr-content-pane";
import { ActivePaneEventArgsDetail as ActivePaneEventArgsDetail_internal } from "./ActivePaneEventArgsDetail";
export class IgrActivePaneEventArgsDetail {
    createImplementation() {
        return new ActivePaneEventArgsDetail_internal();
    }
    get nativeElement() {
        return this._implementation.nativeElement;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this.mounted = false;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    /**
     * Gets the new active pane.
    */
    get newPane() {
        const r = this.i.a;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrContentPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set newPane(v) {
        v == null ? this.i.a = null : this.i.a = v.i;
    }
    /**
     * Gets the old active pane.
    */
    get oldPane() {
        const r = this.i.b;
        if (r == null) {
            return null;
        }
        if (!r.externalObject) {
            let e = IgrContentPane._createFromInternal(r);
            if (e) {
                e._implementation = r;
            }
            r.externalObject = e;
        }
        return r.externalObject;
    }
    set oldPane(v) {
        v == null ? this.i.b = null : this.i.b = v.i;
    }
    findByName(name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.newPane && this.newPane.name && this.newPane.name == name) {
            return this.newPane;
        }
        if (this.oldPane && this.oldPane.name && this.oldPane.name == name) {
            return this.oldPane;
        }
        return null;
    }
    setNativeElement(element) {
        this.i.setNativeElement(element);
    }
}
