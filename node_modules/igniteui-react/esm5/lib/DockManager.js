/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { DockManagerLayout } from "./DockManagerLayout";
import { DockManagerPane } from "./DockManagerPane";
import { DockManagerPoint } from "./DockManagerPoint";
import { ContentPane } from "./ContentPane";
import { DockManagerShowHeaderIconOnHover_$type } from "./DockManagerShowHeaderIconOnHover";
import { DockManagerResourceStrings } from "./DockManagerResourceStrings";
import { DockManagerShowPaneHeaders_$type } from "./DockManagerShowPaneHeaders";
import { LayoutChangeEventArgs } from "./LayoutChangeEventArgs";
/**
 * @hidden
 */
var DockManager = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DockManager, _super);
    function DockManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.layoutChange = null;
        _this.j = new WCNativeHelper();
        _this.r = null;
        return _this;
    }
    DockManager.prototype.layoutChangeChanged = function () {
        var _this = this;
        if (this.layoutChange != null) {
            this.k.s("layoutChange", function (a) { return _this.layoutChange(_this, LayoutChangeEventArgs.b(_this.b)); }, false);
        }
        else {
            this.k.v("layoutChange");
        }
    };
    Object.defineProperty(DockManager.prototype, "k", {
        get: function () {
            return this.j;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "nativeElement", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.j.o = this.r;
        },
        enumerable: false,
        configurable: true
    });
    DockManager.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(DockManager.prototype, "b", {
        get: function () {
            var ret_ = this.k.m("layout", function (a) { return new DockManagerLayout(); });
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("layout", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "c", {
        get: function () {
            var ret_ = this.k.m("draggedPane", function (a) { return DockManagerPane.createFromNative(a); });
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("draggedPane", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "e", {
        get: function () {
            var ret_ = this.k.m("dropPosition", function (a) { return new DockManagerPoint(); });
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("dropPosition", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "a", {
        get: function () {
            var ret_ = this.k.m("activePane", function (a) { return new ContentPane(); });
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("activePane", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "n", {
        get: function () {
            var ret_ = this.k.n("allowMaximize");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("allowMaximize", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "o", {
        get: function () {
            var ret_ = this.k.n("containedInBoundaries");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("containedInBoundaries", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "g", {
        get: function () {
            var ret_ = this.k.n("showHeaderIconOnHover");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerShowHeaderIconOnHover_$type, EnumUtil.getEnumValue(DockManagerShowHeaderIconOnHover_$type, this.k.f(DockManagerShowHeaderIconOnHover_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerShowHeaderIconOnHover_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(DockManagerShowHeaderIconOnHover_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.k.w("showHeaderIconOnHover", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "d", {
        get: function () {
            var ret_ = this.k.m("maximizedPane", function (a) { return DockManagerPane.createFromNative(a); });
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("maximizedPane", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "f", {
        get: function () {
            var ret_ = this.k.m("resourceStrings", function (a) { return new DockManagerResourceStrings(); });
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("resourceStrings", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "l", {
        get: function () {
            var ret_ = this.k.n("allowFloatingPanesResize");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("allowFloatingPanesResize", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "p", {
        get: function () {
            var ret_ = this.k.n("disableKeyboardNavigation");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("disableKeyboardNavigation", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "m", {
        get: function () {
            var ret_ = this.k.n("allowInnerDock");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("allowInnerDock", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "h", {
        get: function () {
            var ret_ = this.k.n("showPaneHeaders");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerShowPaneHeaders_$type, EnumUtil.getEnumValue(DockManagerShowPaneHeaders_$type, this.k.f(DockManagerShowPaneHeaders_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerShowPaneHeaders_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(DockManagerShowPaneHeaders_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.k.w("showPaneHeaders", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DockManager.prototype, "q", {
        get: function () {
            var ret_ = this.k.n("proximityDock");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.k.w("proximityDock", value_);
        },
        enumerable: false,
        configurable: true
    });
    DockManager.prototype.t = function (a) {
        this.nativeElement.focusPane(this.k.i(a));
    };
    DockManager.$t = markType(DockManager, 'DockManager', BaseElement.$);
    return DockManager;
}(BaseElement));
export { DockManager };
