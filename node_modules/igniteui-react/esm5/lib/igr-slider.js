import { __assign, __extends } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrNumberEventArgs } from "./igr-number-event-args";
import { IgrSliderBase } from "./igr-slider-base";
import { Slider } from "./Slider";
import { IgcSliderComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool } from "igniteui-react-core";
/**
 * A slider component used to select numeric value within a range.
*/
var IgrSlider = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrSlider, _super);
    function IgrSlider(props) {
        var _this = _super.call(this, props) || this;
        _this._input = null;
        _this._input_wrapped = null;
        _this._change = null;
        _this._change_wrapped = null;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcSliderComponent);
        return _this;
    }
    IgrSlider.prototype.createImplementation = function () {
        return new Slider();
    };
    Object.defineProperty(IgrSlider.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrSlider.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrSlider.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-slider", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrSlider.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrSlider.prototype, "value", {
        /**
         * The current value of the component.
        */
        get: function () {
            return this.i.aa;
        },
        set: function (v) {
            this.i.aa = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSlider.prototype, "name", {
        /**
         * The name attribute of the control.
        */
        get: function () {
            return this.i.ab;
        },
        set: function (v) {
            this.i.ab = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSlider.prototype, "invalid", {
        /**
         * Control the validity of the control.
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Increments the value of the slider by `stepIncrement * step`, where `stepIncrement` defaults to 1.
     * stepIncrement Optional step increment. If no parameter is passed, it defaults to 1.
    
    * @param stepIncrement  * Optional step increment. If no parameter is passed, it defaults to 1.
    */
    IgrSlider.prototype.stepUp = function (stepIncrement) {
        this.i.ai(stepIncrement);
    };
    /**
     * Decrements the value of the slider by `stepDecrement * step`, where `stepDecrement` defaults to 1.
     * stepDecrement Optional step decrement. If no parameter is passed, it defaults to 1.
    
    * @param stepDecrement  * Optional step decrement. If no parameter is passed, it defaults to 1.
    */
    IgrSlider.prototype.stepDown = function (stepDecrement) {
        this.i.ah(stepDecrement);
    };
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    IgrSlider.prototype.reportValidity = function () {
        this.i.af();
    };
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    IgrSlider.prototype.checkValidity = function () {
        this.i.ad();
    };
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    IgrSlider.prototype.setCustomValidity = function (message) {
        this.i.ag(message);
    };
    Object.defineProperty(IgrSlider.prototype, "input", {
        /**
         * Emitted when a value is changed via thumb drag or keyboard interaction.
        */
        get: function () {
            return this._input;
        },
        set: function (ev) {
            var _this = this;
            if (this._input_wrapped !== null) {
                this.i.input = delegateRemove(this.i.input, this._input_wrapped);
                this._input_wrapped = null;
                this._input = null;
            }
            this._input = ev;
            this._input_wrapped = function (o, e) {
                var outerArgs = new IgrNumberEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeInput) {
                    _this.beforeInput(_this, outerArgs);
                }
                if (_this._input) {
                    _this._input(_this, outerArgs);
                }
            };
            this.i.input = delegateCombine(this.i.input, this._input_wrapped);
            if (this.i.inputChanged) {
                this.i.inputChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrSlider.prototype, "change", {
        /**
         * Emitted when a value change is committed on a thumb drag end or keyboard interaction.
        */
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrNumberEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
            if (this.i.changeChanged) {
                this.i.changeChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrSlider;
}(IgrSliderBase));
export { IgrSlider };
