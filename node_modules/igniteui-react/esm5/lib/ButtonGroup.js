/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { ButtonGroupAlignment_$type } from "./ButtonGroupAlignment";
import { ButtonGroupSelection_$type } from "./ButtonGroupSelection";
import { ComponentValueChangedEventArgs } from "./ComponentValueChangedEventArgs";
/**
 * @hidden
 */
var ButtonGroup = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ButtonGroup, _super);
    function ButtonGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.f = new WCNativeHelper();
        _this.i = null;
        _this.select = null;
        _this.deselect = null;
        return _this;
    }
    Object.defineProperty(ButtonGroup.prototype, "g", {
        get: function () {
            return this.f;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroup.prototype, "nativeElement", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.f.o = this.i;
        },
        enumerable: false,
        configurable: true
    });
    ButtonGroup.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(ButtonGroup.prototype, "h", {
        get: function () {
            var ret_ = this.g.n("disabled");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("disabled", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroup.prototype, "b", {
        get: function () {
            var ret_ = this.g.n("alignment");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ButtonGroupAlignment_$type, EnumUtil.getEnumValue(ButtonGroupAlignment_$type, this.g.f(ButtonGroupAlignment_$type, ret_)));
            return EnumUtil.getEnumValue(ButtonGroupAlignment_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(ButtonGroupAlignment_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.g.w("alignment", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroup.prototype, "c", {
        get: function () {
            var ret_ = this.g.n("selection");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ButtonGroupSelection_$type, EnumUtil.getEnumValue(ButtonGroupSelection_$type, this.g.f(ButtonGroupSelection_$type, ret_)));
            return EnumUtil.getEnumValue(ButtonGroupSelection_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(ButtonGroupSelection_$type, a);
            value_ = WCNativeHelper.getActualName(value_);
            value_ = WCNativeHelper.camel(value_);
            this.g.w("selection", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonGroup.prototype, "a", {
        get: function () {
            var ret_ = this.g.n("selectedItems");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("selectedItems", value_);
        },
        enumerable: false,
        configurable: true
    });
    ButtonGroup.prototype.selectChanged = function () {
        var _this = this;
        if (this.select != null) {
            this.g.s("select", function (a) { return _this.select(_this, ComponentValueChangedEventArgs.a(a)); });
        }
        else {
            this.g.v("select");
        }
    };
    ButtonGroup.prototype.deselectChanged = function () {
        var _this = this;
        if (this.deselect != null) {
            this.g.s("deselect", function (a) { return _this.deselect(_this, ComponentValueChangedEventArgs.a(a)); });
        }
        else {
            this.g.v("deselect");
        }
    };
    ButtonGroup.$t = markType(ButtonGroup, 'ButtonGroup', BaseElement.$);
    return ButtonGroup;
}(BaseElement));
export { ButtonGroup };
