/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType, enumGetBox, EnumUtil } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { DockManagerPaneType_$type } from "./DockManagerPaneType";
import { UnpinnedLocation_$type } from "./UnpinnedLocation";
import { ObservableCollection$1 } from "igniteui-react-core";
import { SplitPaneOrientation_$type } from "./SplitPaneOrientation";
import { DockManagerPoint } from "./DockManagerPoint";
/**
 * @hidden
 */
var DockManagerPane = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DockManagerPane, _super);
    function DockManagerPane() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.___mustPassByValue = true;
        return _this;
    }
    Object.defineProperty(DockManagerPane.prototype, "d", {
        get: function () {
            var ret_ = this.b().n("name");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.b().w("name", value_);
        },
        enumerable: false,
        configurable: true
    });
    DockManagerPane.createFromNative = function (native_) {
        if (native_ == null) {
            return null;
        }
        var a = (native_.type);
        if (a == null || a == undefined) {
            return null;
        }
        switch (a.toLowerCase()) {
            case "splitpane":
                {
                    var b = new SplitPane();
                    b.setNativeElement(native_);
                    return b;
                }
            case "contentpane":
                {
                    var c = new ContentPane();
                    c.setNativeElement(native_);
                    return c;
                }
            case "tabgrouppane":
                {
                    var d = new TabGroupPane();
                    d.setNativeElement(native_);
                    return d;
                }
            case "documenthost":
                {
                    var e = new DocumentHost();
                    e.setNativeElement(native_);
                    return e;
                }
        }
        return null;
    };
    DockManagerPane.$t = markType(DockManagerPane, 'DockManagerPane');
    return DockManagerPane;
}(Base));
export { DockManagerPane };
/**
 * @hidden
 */
var DocumentHost = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DocumentHost, _super);
    function DocumentHost() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.g = new WCNativeHelper();
        _this.j = null;
        return _this;
    }
    Object.defineProperty(DocumentHost.prototype, "h", {
        get: function () {
            return this.g;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DocumentHost.prototype, "nativeElement", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.g.o = this.j;
        },
        enumerable: false,
        configurable: true
    });
    DocumentHost.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(DocumentHost.prototype, "l", {
        get: function () {
            var ret_ = this.h.n("id");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("id", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DocumentHost.prototype, "e", {
        get: function () {
            var ret_ = this.h.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerPaneType_$type, EnumUtil.getEnumValue(DockManagerPaneType_$type, this.h.f(DockManagerPaneType_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerPaneType_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(DockManagerPaneType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.h.w("type", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DocumentHost.prototype, "f", {
        get: function () {
            var ret_ = this.h.m("rootPane", function (a) { return new SplitPane(); });
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("rootPane", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DocumentHost.prototype, "i", {
        get: function () {
            var ret_ = this.h.n("size");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("size", value_);
        },
        enumerable: false,
        configurable: true
    });
    DocumentHost.prototype.b = function () {
        return this.h;
    };
    DocumentHost.$t = markType(DocumentHost, 'DocumentHost', DockManagerPane.$);
    return DocumentHost;
}(DockManagerPane));
export { DocumentHost };
/**
 * @hidden
 */
var TabGroupPane = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TabGroupPane, _super);
    function TabGroupPane() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.g = new WCNativeHelper();
        _this.m = null;
        return _this;
    }
    Object.defineProperty(TabGroupPane.prototype, "h", {
        get: function () {
            return this.g;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabGroupPane.prototype, "nativeElement", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.g.o = this.m;
        },
        enumerable: false,
        configurable: true
    });
    TabGroupPane.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(TabGroupPane.prototype, "o", {
        get: function () {
            var ret_ = this.h.n("id");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("id", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabGroupPane.prototype, "f", {
        get: function () {
            var ret_ = this.h.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerPaneType_$type, EnumUtil.getEnumValue(DockManagerPaneType_$type, this.h.f(DockManagerPaneType_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerPaneType_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(DockManagerPaneType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.h.w("type", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabGroupPane.prototype, "e", {
        get: function () {
            var ret_ = this.h.k("panes", function (a) { return new ContentPaneCollection(); }, function (a) { return new ContentPane(); });
            return ret_;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabGroupPane.prototype, "l", {
        get: function () {
            var ret_ = this.h.n("size");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("size", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabGroupPane.prototype, "k", {
        get: function () {
            var ret_ = this.h.n("selectedIndex");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("selectedIndex", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabGroupPane.prototype, "i", {
        get: function () {
            var ret_ = this.h.n("allowEmpty");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("allowEmpty", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TabGroupPane.prototype, "j", {
        get: function () {
            var ret_ = this.h.n("isMaximized");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("isMaximized", value_);
        },
        enumerable: false,
        configurable: true
    });
    TabGroupPane.prototype.b = function () {
        return this.h;
    };
    TabGroupPane.$t = markType(TabGroupPane, 'TabGroupPane', DockManagerPane.$);
    return TabGroupPane;
}(DockManagerPane));
export { TabGroupPane };
/**
 * @hidden
 */
var ContentPane = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ContentPane, _super);
    function ContentPane() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.g = new WCNativeHelper();
        _this.v = null;
        return _this;
    }
    ContentPane.prototype.b = function () {
        return this.h;
    };
    Object.defineProperty(ContentPane.prototype, "h", {
        get: function () {
            return this.g;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "nativeElement", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.g.o = this.v;
        },
        enumerable: false,
        configurable: true
    });
    ContentPane.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(ContentPane.prototype, "ab", {
        get: function () {
            var ret_ = this.h.n("id");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("id", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "e", {
        get: function () {
            var ret_ = this.h.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerPaneType_$type, EnumUtil.getEnumValue(DockManagerPaneType_$type, this.h.f(DockManagerPaneType_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerPaneType_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(DockManagerPaneType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.h.w("type", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "x", {
        get: function () {
            var ret_ = this.h.n("contentId");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("contentId", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "z", {
        get: function () {
            var ret_ = this.h.n("header");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("header", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "aa", {
        get: function () {
            var ret_ = this.h.n("headerId");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("headerId", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "ac", {
        get: function () {
            var ret_ = this.h.n("tabHeaderId");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("tabHeaderId", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "ad", {
        get: function () {
            var ret_ = this.h.n("unpinnedHeaderId");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("unpinnedHeaderId", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "y", {
        get: function () {
            var ret_ = this.h.n("floatingHeaderId");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("floatingHeaderId", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "t", {
        get: function () {
            var ret_ = this.h.n("size");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("size", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "j", {
        get: function () {
            var ret_ = this.h.n("allowClose");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("allowClose", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "m", {
        get: function () {
            var ret_ = this.h.n("allowMaximize");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("allowMaximize", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "n", {
        get: function () {
            var ret_ = this.h.n("allowPinning");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("allowPinning", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "k", {
        get: function () {
            var ret_ = this.h.n("allowDocking");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("allowDocking", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "i", {
        get: function () {
            var ret_ = this.h.n("acceptsInnerDock");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("acceptsInnerDock", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "l", {
        get: function () {
            var ret_ = this.h.n("allowFloating");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("allowFloating", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "u", {
        get: function () {
            var ret_ = this.h.n("unpinnedSize");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("unpinnedSize", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "s", {
        get: function () {
            var ret_ = this.h.n("isPinned");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("isPinned", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "r", {
        get: function () {
            var ret_ = this.h.n("isMaximized");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("isMaximized", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "f", {
        get: function () {
            var ret_ = this.h.n("unpinnedLocation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(UnpinnedLocation_$type, EnumUtil.getEnumValue(UnpinnedLocation_$type, this.h.f(UnpinnedLocation_$type, ret_)));
            return EnumUtil.getEnumValue(UnpinnedLocation_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(UnpinnedLocation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.h.w("unpinnedLocation", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "q", {
        get: function () {
            var ret_ = this.h.n("hidden");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("hidden", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "o", {
        get: function () {
            var ret_ = this.h.n("disabled");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("disabled", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContentPane.prototype, "p", {
        get: function () {
            var ret_ = this.h.n("documentOnly");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.h.w("documentOnly", value_);
        },
        enumerable: false,
        configurable: true
    });
    ContentPane.$t = markType(ContentPane, 'ContentPane', DockManagerPane.$);
    return ContentPane;
}(DockManagerPane));
export { ContentPane };
/**
 * @hidden
 */
var ContentPaneCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ContentPaneCollection, _super);
    function ContentPaneCollection() {
        return _super.call(this, ContentPane.$, 0) || this;
    }
    ContentPaneCollection.$t = markType(ContentPaneCollection, 'ContentPaneCollection', ObservableCollection$1.$.specialize(ContentPane.$));
    return ContentPaneCollection;
}(ObservableCollection$1));
export { ContentPaneCollection };
/**
 * @hidden
 */
var SplitPane = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SplitPane, _super);
    function SplitPane() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.i = new WCNativeHelper();
        _this.q = null;
        return _this;
    }
    SplitPane.prototype.b = function () {
        return this.j;
    };
    Object.defineProperty(SplitPane.prototype, "j", {
        get: function () {
            return this.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "nativeElement", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.i.o = this.q;
        },
        enumerable: false,
        configurable: true
    });
    SplitPane.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(SplitPane.prototype, "s", {
        get: function () {
            var ret_ = this.j.n("id");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.j.w("id", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "f", {
        get: function () {
            var ret_ = this.j.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(DockManagerPaneType_$type, EnumUtil.getEnumValue(DockManagerPaneType_$type, this.j.f(DockManagerPaneType_$type, ret_)));
            return EnumUtil.getEnumValue(DockManagerPaneType_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(DockManagerPaneType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("type", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "h", {
        get: function () {
            var ret_ = this.j.n("orientation");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(SplitPaneOrientation_$type, EnumUtil.getEnumValue(SplitPaneOrientation_$type, this.j.f(SplitPaneOrientation_$type, ret_)));
            return EnumUtil.getEnumValue(SplitPaneOrientation_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(SplitPaneOrientation_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.j.w("orientation", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "e", {
        get: function () {
            var ret_ = this.j.k("panes", function (a) { return new DockManagerPaneCollection(); }, function (a) { return DockManagerPane.createFromNative(a); });
            return ret_;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "p", {
        get: function () {
            var ret_ = this.j.n("size");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.j.w("size", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "g", {
        get: function () {
            var ret_ = this.j.m("floatingLocation", function (a) { return new DockManagerPoint(); });
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.j.w("floatingLocation", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "o", {
        get: function () {
            var ret_ = this.j.n("floatingWidth");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.j.w("floatingWidth", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "n", {
        get: function () {
            var ret_ = this.j.n("floatingHeight");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.j.w("floatingHeight", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "l", {
        get: function () {
            var ret_ = this.j.n("floatingResizable");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.j.w("floatingResizable", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "k", {
        get: function () {
            var ret_ = this.j.n("allowEmpty");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.j.w("allowEmpty", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplitPane.prototype, "m", {
        get: function () {
            var ret_ = this.j.n("isMaximized");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.j.w("isMaximized", value_);
        },
        enumerable: false,
        configurable: true
    });
    SplitPane.$t = markType(SplitPane, 'SplitPane', DockManagerPane.$);
    return SplitPane;
}(DockManagerPane));
export { SplitPane };
/**
 * @hidden
 */
var DockManagerPaneCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DockManagerPaneCollection, _super);
    function DockManagerPaneCollection() {
        return _super.call(this, DockManagerPane.$, 0) || this;
    }
    DockManagerPaneCollection.$t = markType(DockManagerPaneCollection, 'DockManagerPaneCollection', ObservableCollection$1.$.specialize(DockManagerPane.$));
    return DockManagerPaneCollection;
}(ObservableCollection$1));
export { DockManagerPaneCollection };
