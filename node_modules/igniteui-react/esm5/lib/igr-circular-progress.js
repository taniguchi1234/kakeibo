import { __assign, __extends } from "tslib";
import * as React from 'react';
import { IgrProgressBase } from "./igr-progress-base";
import { CircularProgress } from "./CircularProgress";
import { IgcCircularProgressComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp } from "igniteui-react-core";
/**
 * A circular progress indicator used to express unspecified wait time or display
 * the length of a process.
*/
var IgrCircularProgress = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrCircularProgress, _super);
    function IgrCircularProgress(props) {
        var _this = _super.call(this, props) || this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcCircularProgressComponent);
        return _this;
    }
    IgrCircularProgress.prototype.createImplementation = function () {
        return new CircularProgress();
    };
    Object.defineProperty(IgrCircularProgress.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrCircularProgress.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrCircularProgress.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-circular-progress", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrCircularProgress.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    return IgrCircularProgress;
}(IgrProgressBase));
export { IgrCircularProgress };
