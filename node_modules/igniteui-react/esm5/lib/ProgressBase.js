/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { StyleVariant_$type } from "./StyleVariant";
/**
 * @hidden
 */
var ProgressBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ProgressBase, _super);
    function ProgressBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.b = new WCNativeHelper();
        _this.i = null;
        return _this;
    }
    Object.defineProperty(ProgressBase.prototype, "c", {
        get: function () {
            return this.b;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProgressBase.prototype, "nativeElement", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.b.o = this.i;
        },
        enumerable: false,
        configurable: true
    });
    ProgressBase.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(ProgressBase.prototype, "g", {
        get: function () {
            var ret_ = this.c.n("max");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.c.w("max", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProgressBase.prototype, "h", {
        get: function () {
            var ret_ = this.c.n("value");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.c.w("value", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProgressBase.prototype, "a", {
        get: function () {
            var ret_ = this.c.n("variant");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StyleVariant_$type, EnumUtil.getEnumValue(StyleVariant_$type, this.c.f(StyleVariant_$type, ret_)));
            return EnumUtil.getEnumValue(StyleVariant_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(StyleVariant_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.c.w("variant", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProgressBase.prototype, "f", {
        get: function () {
            var ret_ = this.c.n("animationDuration");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.c.w("animationDuration", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProgressBase.prototype, "e", {
        get: function () {
            var ret_ = this.c.n("indeterminate");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.c.w("indeterminate", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProgressBase.prototype, "d", {
        get: function () {
            var ret_ = this.c.n("hideLabel");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.c.w("hideLabel", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProgressBase.prototype, "k", {
        get: function () {
            var ret_ = this.c.n("labelFormat");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.c.w("labelFormat", value_);
        },
        enumerable: false,
        configurable: true
    });
    ProgressBase.prototype.l = function () {
        this.nativeElement.connectedCallback();
    };
    ProgressBase.$t = markType(ProgressBase, 'ProgressBase', BaseElement.$);
    return ProgressBase;
}(BaseElement));
export { ProgressBase };
