import { __assign, __extends } from "tslib";
import * as React from 'react';
import { IconButtonVariant_$type } from "./IconButtonVariant";
import { IgrButtonBase } from "./igr-button-base";
import { IconButton } from "./IconButton";
import { IgcIconButtonComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool, ensureEnum } from "igniteui-react-core";
/**

*/
var IgrIconButton = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrIconButton, _super);
    function IgrIconButton(props) {
        var _this = _super.call(this, props) || this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcIconButtonComponent);
        return _this;
    }
    IgrIconButton.prototype.createImplementation = function () {
        return new IconButton();
    };
    Object.defineProperty(IgrIconButton.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrIconButton.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrIconButton.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-icon-button", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrIconButton.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrIconButton.prototype, "name", {
        /**
         * The name of the icon.
        */
        get: function () {
            return this.i.y;
        },
        set: function (v) {
            this.i.y = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrIconButton.prototype, "collection", {
        /**
         * The name of the icon collection.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrIconButton.prototype, "mirrored", {
        /**
         * Whether to flip the icon button. Useful for RTL layouts.
        */
        get: function () {
            return this.i.w;
        },
        set: function (v) {
            this.i.w = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrIconButton.prototype, "variant", {
        /**
         * The visual variant of the icon button.
        */
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = ensureEnum(IconButtonVariant_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    IgrIconButton.prototype.registerIcon = function (name, url, collection) {
        this.i.z(name, url, collection);
    };
    IgrIconButton.prototype.registerIconFromText = function (name, iconText, collection) {
        this.i.aa(name, iconText, collection);
    };
    return IgrIconButton;
}(IgrButtonBase));
export { IgrIconButton };
