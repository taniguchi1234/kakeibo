import { __assign, __extends } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { CalendarHeaderOrientation_$type } from "./CalendarHeaderOrientation";
import { CalendarOrientation_$type } from "./CalendarOrientation";
import { CalendarActiveView_$type } from "./CalendarActiveView";
import { IgrCalendarFormatOptions } from "./igr-calendar-format-options";
import { IgrCalendarResourceStrings } from "./igr-calendar-resource-strings";
import { IgrComponentDataValueChangedEventArgs } from "./igr-component-data-value-changed-event-args";
import { IgrCalendarBase } from "./igr-calendar-base";
import { Calendar } from "./Calendar";
import { IgcCalendarComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool, ensureEnum } from "igniteui-react-core";
/**
 * Represents a calendar that lets users
 * to select a date value in a variety of different ways.
*/
var IgrCalendar = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrCalendar, _super);
    function IgrCalendar(props) {
        var _this = _super.call(this, props) || this;
        _this._change = null;
        _this._change_wrapped = null;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcCalendarComponent);
        return _this;
    }
    IgrCalendar.prototype.createImplementation = function () {
        return new Calendar();
    };
    Object.defineProperty(IgrCalendar.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrCalendar.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrCalendar.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-calendar", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrCalendar.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrCalendar.prototype, "value", {
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "values", {
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.l = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "activeDate", {
        /**
         * Sets the date which is shown in view and is highlighted. By default it is the current date.
        */
        get: function () {
            return this.i.u;
        },
        set: function (v) {
            this.i.u = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "hideOutsideDays", {
        /**
         * Whether to show the dates that do not belong to the current active month.
        */
        get: function () {
            return this.i.t;
        },
        set: function (v) {
            this.i.t = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "hideHeader", {
        /**
         * Whether to render the calendar header part.
         * When the calendar selection is set to `multiple` the header is always hidden.
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "headerOrientation", {
        /**
         * The orientation of the calendar header.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = ensureEnum(CalendarHeaderOrientation_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "orientation", {
        /**
         * The orientation of the calendar months when more than one month
         * is being shown.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = ensureEnum(CalendarOrientation_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "visibleMonths", {
        /**
         * The number of months displayed in the days view.
        */
        get: function () {
            return this.i.w;
        },
        set: function (v) {
            this.i.w = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "activeView", {
        /**
         * The current active view of the component.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = ensureEnum(CalendarActiveView_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "formatOptions", {
        /**
         * The options used to format the months and the weekdays in the calendar views.
        */
        get: function () {
            var r = this.i.n;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrCalendarFormatOptions();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.n = null : this.i.n = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCalendar.prototype, "resourceStrings", {
        /**
         * The resource strings for localization.
        */
        get: function () {
            var r = this.i.q;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrCalendarResourceStrings();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.q = null : this.i.q = v.i;
        },
        enumerable: false,
        configurable: true
    });
    IgrCalendar.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.formatOptions && this.formatOptions.name && this.formatOptions.name == name) {
            return this.formatOptions;
        }
        if (this.resourceStrings && this.resourceStrings.name && this.resourceStrings.name == name) {
            return this.resourceStrings;
        }
        return null;
    };
    Object.defineProperty(IgrCalendar.prototype, "change", {
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrComponentDataValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
            if (this.i.changeChanged) {
                this.i.changeChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrCalendar;
}(IgrCalendarBase));
export { IgrCalendar };
