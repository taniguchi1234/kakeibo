import { __assign, __extends, __values } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { TreeSelection_$type } from "./TreeSelection";
import { IgrTreeSelectionChangeEventArgs } from "./igr-tree-selection-change-event-args";
import { IgrTreeItemComponentEventArgs } from "./igr-tree-item-component-event-args";
import { Tree } from "./Tree";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcTreeComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * The tree allows users to represent hierarchical data in a tree-view structure,
 * maintaining parent-child relationships, as well as to define static tree-view structure without a corresponding data model.
*/
var IgrTree = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrTree, _super);
    function IgrTree(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._selectionChanged = null;
        _this._selectionChanged_wrapped = null;
        _this._itemExpanding = null;
        _this._itemExpanding_wrapped = null;
        _this._itemExpanded = null;
        _this._itemExpanded_wrapped = null;
        _this._itemCollapsing = null;
        _this._itemCollapsing_wrapped = null;
        _this._itemCollapsed = null;
        _this._itemCollapsed_wrapped = null;
        _this._activeItem = null;
        _this._activeItem_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcTreeComponent);
        _this._implementation = _this.createImplementation();
        _this._portalManager = new PortalManager("templates", function () {
            if (_this.mounted) {
                _this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            _this._renderer = new ReactRenderer(_this._implementation.nativeElement, document, false, null, _this._portalManager);
        }
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        if (_this._initializeAdapters) {
            _this._initializeAdapters();
        }
        return _this;
    }
    IgrTree.prototype.createImplementation = function () {
        return new Tree();
    };
    Object.defineProperty(IgrTree.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTree.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgrTree._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrTree.prototype.onImplementationCreated = function () {
    };
    IgrTree.prototype.componentDidMount = function () {
        var e_1, _a;
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrTree.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrTree.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-tree", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrTree.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrTree.prototype, "singleBranchExpand", {
        /**
         * Whether a single or multiple of a parent's child items can be expanded.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTree.prototype, "toggleNodeOnClick", {
        /**
         * Whether clicking over nodes will change their expanded state or not.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTree.prototype, "selection", {
        /**
         * The selection state of the tree.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = ensureEnum(TreeSelection_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    IgrTree.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgrTree.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrTree.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrTree.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Tree");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrTree.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    IgrTree.prototype.connectedCallback = function () {
        this.i.o();
    };
    /**
     * @private
    
    */
    IgrTree.prototype.expandToItem = function (item) {
        this.i.p((item == null ? null : item.i));
    };
    Object.defineProperty(IgrTree.prototype, "selectionChanged", {
        get: function () {
            return this._selectionChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._selectionChanged_wrapped !== null) {
                this.i.selectionChanged = delegateRemove(this.i.selectionChanged, this._selectionChanged_wrapped);
                this._selectionChanged_wrapped = null;
                this._selectionChanged = null;
            }
            this._selectionChanged = ev;
            this._selectionChanged_wrapped = function (o, e) {
                var outerArgs = new IgrTreeSelectionChangeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSelectionChanged) {
                    _this.beforeSelectionChanged(_this, outerArgs);
                }
                if (_this._selectionChanged) {
                    _this._selectionChanged(_this, outerArgs);
                }
            };
            this.i.selectionChanged = delegateCombine(this.i.selectionChanged, this._selectionChanged_wrapped);
            if (this.i.selectionChangedChanged) {
                this.i.selectionChangedChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTree.prototype, "itemExpanding", {
        get: function () {
            return this._itemExpanding;
        },
        set: function (ev) {
            var _this = this;
            if (this._itemExpanding_wrapped !== null) {
                this.i.itemExpanding = delegateRemove(this.i.itemExpanding, this._itemExpanding_wrapped);
                this._itemExpanding_wrapped = null;
                this._itemExpanding = null;
            }
            this._itemExpanding = ev;
            this._itemExpanding_wrapped = function (o, e) {
                var outerArgs = new IgrTreeItemComponentEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeItemExpanding) {
                    _this.beforeItemExpanding(_this, outerArgs);
                }
                if (_this._itemExpanding) {
                    _this._itemExpanding(_this, outerArgs);
                }
            };
            this.i.itemExpanding = delegateCombine(this.i.itemExpanding, this._itemExpanding_wrapped);
            if (this.i.itemExpandingChanged) {
                this.i.itemExpandingChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTree.prototype, "itemExpanded", {
        get: function () {
            return this._itemExpanded;
        },
        set: function (ev) {
            var _this = this;
            if (this._itemExpanded_wrapped !== null) {
                this.i.itemExpanded = delegateRemove(this.i.itemExpanded, this._itemExpanded_wrapped);
                this._itemExpanded_wrapped = null;
                this._itemExpanded = null;
            }
            this._itemExpanded = ev;
            this._itemExpanded_wrapped = function (o, e) {
                var outerArgs = new IgrTreeItemComponentEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeItemExpanded) {
                    _this.beforeItemExpanded(_this, outerArgs);
                }
                if (_this._itemExpanded) {
                    _this._itemExpanded(_this, outerArgs);
                }
            };
            this.i.itemExpanded = delegateCombine(this.i.itemExpanded, this._itemExpanded_wrapped);
            if (this.i.itemExpandedChanged) {
                this.i.itemExpandedChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTree.prototype, "itemCollapsing", {
        get: function () {
            return this._itemCollapsing;
        },
        set: function (ev) {
            var _this = this;
            if (this._itemCollapsing_wrapped !== null) {
                this.i.itemCollapsing = delegateRemove(this.i.itemCollapsing, this._itemCollapsing_wrapped);
                this._itemCollapsing_wrapped = null;
                this._itemCollapsing = null;
            }
            this._itemCollapsing = ev;
            this._itemCollapsing_wrapped = function (o, e) {
                var outerArgs = new IgrTreeItemComponentEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeItemCollapsing) {
                    _this.beforeItemCollapsing(_this, outerArgs);
                }
                if (_this._itemCollapsing) {
                    _this._itemCollapsing(_this, outerArgs);
                }
            };
            this.i.itemCollapsing = delegateCombine(this.i.itemCollapsing, this._itemCollapsing_wrapped);
            if (this.i.itemCollapsingChanged) {
                this.i.itemCollapsingChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTree.prototype, "itemCollapsed", {
        get: function () {
            return this._itemCollapsed;
        },
        set: function (ev) {
            var _this = this;
            if (this._itemCollapsed_wrapped !== null) {
                this.i.itemCollapsed = delegateRemove(this.i.itemCollapsed, this._itemCollapsed_wrapped);
                this._itemCollapsed_wrapped = null;
                this._itemCollapsed = null;
            }
            this._itemCollapsed = ev;
            this._itemCollapsed_wrapped = function (o, e) {
                var outerArgs = new IgrTreeItemComponentEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeItemCollapsed) {
                    _this.beforeItemCollapsed(_this, outerArgs);
                }
                if (_this._itemCollapsed) {
                    _this._itemCollapsed(_this, outerArgs);
                }
            };
            this.i.itemCollapsed = delegateCombine(this.i.itemCollapsed, this._itemCollapsed_wrapped);
            if (this.i.itemCollapsedChanged) {
                this.i.itemCollapsedChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTree.prototype, "activeItem", {
        get: function () {
            return this._activeItem;
        },
        set: function (ev) {
            var _this = this;
            if (this._activeItem_wrapped !== null) {
                this.i.activeItem = delegateRemove(this.i.activeItem, this._activeItem_wrapped);
                this._activeItem_wrapped = null;
                this._activeItem = null;
            }
            this._activeItem = ev;
            this._activeItem_wrapped = function (o, e) {
                var outerArgs = new IgrTreeItemComponentEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeActiveItem) {
                    _this.beforeActiveItem(_this, outerArgs);
                }
                if (_this._activeItem) {
                    _this._activeItem(_this, outerArgs);
                }
            };
            this.i.activeItem = delegateCombine(this.i.activeItem, this._activeItem_wrapped);
            if (this.i.activeItemChanged) {
                this.i.activeItemChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrTree;
}(React.Component));
export { IgrTree };
