import { __extends } from "tslib";
import { IgrDockManagerPoint } from "./igr-dock-manager-point";
import { IgrFloatingPaneResizeEventArgsDetail } from "./igr-floating-pane-resize-event-args-detail";
import { FloatingPaneResizeMoveEventArgsDetail as FloatingPaneResizeMoveEventArgsDetail_internal } from "./FloatingPaneResizeMoveEventArgsDetail";
var IgrFloatingPaneResizeMoveEventArgsDetail = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrFloatingPaneResizeMoveEventArgsDetail, _super);
    function IgrFloatingPaneResizeMoveEventArgsDetail() {
        return _super.call(this) || this;
    }
    IgrFloatingPaneResizeMoveEventArgsDetail.prototype.createImplementation = function () {
        return new FloatingPaneResizeMoveEventArgsDetail_internal();
    };
    Object.defineProperty(IgrFloatingPaneResizeMoveEventArgsDetail.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrFloatingPaneResizeMoveEventArgsDetail.prototype, "oldWidth", {
        /**
         * Gets the pane's width before the resizing operation.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrFloatingPaneResizeMoveEventArgsDetail.prototype, "newWidth", {
        /**
         * Gets the pane's width after the resizing operation.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrFloatingPaneResizeMoveEventArgsDetail.prototype, "oldHeight", {
        /**
         * Gets the pane's height before the resizing operation.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrFloatingPaneResizeMoveEventArgsDetail.prototype, "newHeight", {
        /**
         * Gets the pane's height after the resizing operation.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrFloatingPaneResizeMoveEventArgsDetail.prototype, "oldLocation", {
        /**
         * Gets the pane's floating location before the resizing operation.
        */
        get: function () {
            var r = this.i.i;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrDockManagerPoint();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.i = null : this.i.i = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrFloatingPaneResizeMoveEventArgsDetail.prototype, "newLocation", {
        /**
         * Gets the pane's floating location after the resizing operation.
        */
        get: function () {
            var r = this.i.h;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrDockManagerPoint();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.h = null : this.i.h = v.i;
        },
        enumerable: false,
        configurable: true
    });
    IgrFloatingPaneResizeMoveEventArgsDetail.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.oldLocation && this.oldLocation.name && this.oldLocation.name == name) {
            return this.oldLocation;
        }
        if (this.newLocation && this.newLocation.name && this.newLocation.name == name) {
            return this.newLocation;
        }
        return null;
    };
    return IgrFloatingPaneResizeMoveEventArgsDetail;
}(IgrFloatingPaneResizeEventArgsDetail));
export { IgrFloatingPaneResizeMoveEventArgsDetail };
