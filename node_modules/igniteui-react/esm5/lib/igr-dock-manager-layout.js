import { IgrSplitPane } from "./igr-split-pane";
import { IgrSplitPaneCollection } from "./igr-split-pane-collection";
import { DockManagerLayout as DockManagerLayout_internal } from "./DockManagerLayout";
import { SplitPaneCollection as SplitPaneCollection_internal } from "./SplitPaneCollection";
import { SplitPane } from "./SplitPane";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
/**
 * Describes a Dock Manager layout.
*/
var IgrDockManagerLayout = /** @class */ /*@__PURE__*/ (function () {
    function IgrDockManagerLayout() {
        this.mounted = false;
        this._floatingPanes = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    IgrDockManagerLayout.prototype.createImplementation = function () {
        return new DockManagerLayout_internal();
    };
    Object.defineProperty(IgrDockManagerLayout.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManagerLayout.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrDockManagerLayout.prototype.onImplementationCreated = function () {
    };
    IgrDockManagerLayout.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    };
    Object.defineProperty(IgrDockManagerLayout.prototype, "name", {
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManagerLayout.prototype, "rootPane", {
        /**
         * The root split pane of the layout.
        */
        get: function () {
            var r = this.i.a;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrSplitPane._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.a = null : this.i.a = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManagerLayout.prototype, "floatingPanes", {
        /**
         * The floating panes of the layout.
        */
        get: function () {
            if (this._floatingPanes === null) {
                var coll = new IgrSplitPaneCollection();
                var innerColl = this.i.b;
                if (!innerColl) {
                    innerColl = new SplitPaneCollection_internal();
                }
                this._floatingPanes = coll._fromInner(innerColl);
            }
            return this._floatingPanes;
        },
        set: function (v) {
            if (this._floatingPanes !== null) {
                this._floatingPanes._setSyncTarget(null);
                this._floatingPanes = null;
            }
            var coll = new IgrSplitPaneCollection();
            this._floatingPanes = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(SplitPane.$type);
            var innerColl = this.i.b;
            if (!innerColl) {
                innerColl = new SplitPaneCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._floatingPanes._setSyncTarget(syncColl);
        },
        enumerable: false,
        configurable: true
    });
    IgrDockManagerLayout.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.rootPane && this.rootPane.name && this.rootPane.name == name) {
            return this.rootPane;
        }
        if (this.floatingPanes != null && this.floatingPanes.findByName && this.floatingPanes.findByName(name)) {
            return this.floatingPanes.findByName(name);
        }
        return null;
    };
    IgrDockManagerLayout.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    return IgrDockManagerLayout;
}());
export { IgrDockManagerLayout };
