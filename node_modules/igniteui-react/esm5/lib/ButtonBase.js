/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { ButtonBaseType_$type } from "./ButtonBaseType";
import { ButtonBaseTarget_$type } from "./ButtonBaseTarget";
import { VoidEventArgs } from "./VoidEventArgs";
/**
 * @hidden
 */
var ButtonBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ButtonBase, _super);
    function ButtonBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.clicked = null;
        _this.f = new WCNativeHelper();
        _this.i = null;
        _this.focus = null;
        _this.blur = null;
        return _this;
    }
    ButtonBase.prototype.clickedChanged = function () {
        var _this = this;
        if (this.clicked != null) {
            this.g.s("click", function (a) { return _this.clicked(_this, VoidEventArgs.b(a)); }, false);
        }
        else {
            this.g.v("click");
        }
    };
    Object.defineProperty(ButtonBase.prototype, "g", {
        get: function () {
            return this.f;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonBase.prototype, "nativeElement", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.f.o = this.i;
        },
        enumerable: false,
        configurable: true
    });
    ButtonBase.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(ButtonBase.prototype, "b", {
        get: function () {
            var ret_ = this.g.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ButtonBaseType_$type, EnumUtil.getEnumValue(ButtonBaseType_$type, this.g.f(ButtonBaseType_$type, ret_)));
            return EnumUtil.getEnumValue(ButtonBaseType_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(ButtonBaseType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.g.w("type", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonBase.prototype, "m", {
        get: function () {
            var ret_ = this.g.n("href");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("href", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonBase.prototype, "l", {
        get: function () {
            var ret_ = this.g.n("download");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("download", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonBase.prototype, "a", {
        get: function () {
            var ret_ = this.g.n("target");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(ButtonBaseTarget_$type, EnumUtil.getEnumValue(ButtonBaseTarget_$type, this.g.f(ButtonBaseTarget_$type, ret_)));
            return EnumUtil.getEnumValue(ButtonBaseTarget_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(ButtonBaseTarget_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.g.w("target", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonBase.prototype, "n", {
        get: function () {
            var ret_ = this.g.n("rel");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("rel", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonBase.prototype, "h", {
        get: function () {
            var ret_ = this.g.n("disabled");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("disabled", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonBase.prototype, "j", {
        get: function () {
            var ret_ = this.g.n("form");
            return ret_;
        },
        enumerable: false,
        configurable: true
    });
    ButtonBase.prototype.focusChanged = function () {
        var _this = this;
        if (this.focus != null) {
            this.g.s("focus", function (a) { return _this.focus(_this, VoidEventArgs.b(a)); }, false);
        }
        else {
            this.g.v("focus");
        }
    };
    ButtonBase.prototype.blurChanged = function () {
        var _this = this;
        if (this.blur != null) {
            this.g.s("blur", function (a) { return _this.blur(_this, VoidEventArgs.b(a)); }, false);
        }
        else {
            this.g.v("blur");
        }
    };
    ButtonBase.prototype.t = function (a) {
        this.nativeElement.focus(this.g.i(a));
    };
    ButtonBase.prototype.q = function () {
        this.nativeElement.click();
    };
    ButtonBase.prototype.p = function () {
        this.nativeElement.blur();
    };
    ButtonBase.$t = markType(ButtonBase, 'ButtonBase', BaseElement.$);
    return ButtonBase;
}(BaseElement));
export { ButtonBase };
