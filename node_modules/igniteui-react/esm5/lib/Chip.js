/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { StyleVariant_$type } from "./StyleVariant";
import { ComponentBoolValueChangedEventArgs } from "./ComponentBoolValueChangedEventArgs";
/**
 * @hidden
 */
var Chip = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(Chip, _super);
    function Chip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.d = new WCNativeHelper();
        _this.j = null;
        _this.remove = null;
        _this.select = null;
        return _this;
    }
    Object.defineProperty(Chip.prototype, "e", {
        get: function () {
            return this.d;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chip.prototype, "nativeElement", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.d.o = this.j;
        },
        enumerable: false,
        configurable: true
    });
    Chip.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(Chip.prototype, "f", {
        get: function () {
            var ret_ = this.e.n("disabled");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("disabled", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chip.prototype, "g", {
        get: function () {
            var ret_ = this.e.n("removable");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("removable", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chip.prototype, "h", {
        get: function () {
            var ret_ = this.e.n("selectable");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("selectable", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chip.prototype, "i", {
        get: function () {
            var ret_ = this.e.n("selected");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("selected", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chip.prototype, "c", {
        get: function () {
            var ret_ = this.e.n("variant");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(StyleVariant_$type, EnumUtil.getEnumValue(StyleVariant_$type, this.e.f(StyleVariant_$type, ret_)));
            return EnumUtil.getEnumValue(StyleVariant_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(StyleVariant_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("variant", value_);
        },
        enumerable: false,
        configurable: true
    });
    Chip.prototype.removeChanged = function () {
        var _this = this;
        if (this.remove != null) {
            this.e.s("remove", function (a) { return _this.remove(_this, ComponentBoolValueChangedEventArgs.a(a)); });
        }
        else {
            this.e.v("remove");
        }
    };
    Chip.prototype.selectChanged = function () {
        var _this = this;
        if (this.select != null) {
            this.e.s("select", function (a) { return _this.select(_this, ComponentBoolValueChangedEventArgs.a(a)); });
        }
        else {
            this.e.v("select");
        }
    };
    Chip.$t = markType(Chip, 'Chip', BaseElement.$);
    return Chip;
}(BaseElement));
export { Chip };
