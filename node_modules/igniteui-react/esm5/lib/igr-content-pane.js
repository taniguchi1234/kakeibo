import { __assign, __extends } from "tslib";
import * as React from 'react';
import { DockManagerPaneType_$type } from "./DockManagerPaneType";
import { UnpinnedLocation_$type } from "./UnpinnedLocation";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { ContentPane } from "./ContentPane";
import { defineCustomElements } from "igniteui-dockmanager/loader";
import { isValidProp, ensureEnum, ensureBool } from "igniteui-react-core";
var IgrContentPane = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrContentPane, _super);
    function IgrContentPane(props) {
        var _this = _super.call(this, props) || this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineCustomElements();
        return _this;
    }
    IgrContentPane.prototype.createImplementation = function () {
        return new ContentPane();
    };
    Object.defineProperty(IgrContentPane.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrContentPane.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrContentPane.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("", __assign(__assign({}, nativeProps), { ref: this._getMainRef, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrContentPane.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrContentPane.prototype, "id", {
        /**
         * The id of the pane. If not set the Dock Manager generates it automatically.
        */
        get: function () {
            return this.i.ab;
        },
        set: function (v) {
            this.i.ab = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "type", {
        /**
         * The type of the pane.
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = ensureEnum(DockManagerPaneType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "contentId", {
        /**
         * The slot attribute's value of the content element.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "header", {
        /**
         * The text header of the content pane. Even if header slot templates are used, the text header is used for aria label.
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "headerId", {
        /**
         * The slot attribute's value of the content pane header element. If not set, the `header` property value is used.
        */
        get: function () {
            return this.i.aa;
        },
        set: function (v) {
            this.i.aa = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "tabHeaderId", {
        /**
         * The slot attribute's value of the tab header element. If not set, the `header` property value is used.
        */
        get: function () {
            return this.i.ac;
        },
        set: function (v) {
            this.i.ac = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "unpinnedHeaderId", {
        /**
         * The slot attribute's value of the unpinned header element. If not set, the `header` property value is used.
        */
        get: function () {
            return this.i.ad;
        },
        set: function (v) {
            this.i.ad = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "floatingHeaderId", {
        /**
         * The slot attribute's value of the floating header element. If not set, the `headerId` property value is used.
        */
        get: function () {
            return this.i.y;
        },
        set: function (v) {
            this.i.y = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "size", {
        /**
         * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
        */
        get: function () {
            return this.i.t;
        },
        set: function (v) {
            this.i.t = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "allowClose", {
        /**
         * Determines whether the end user is allowed to close the pane. Defaults to true.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "allowMaximize", {
        /**
         * Determines whether the end user is allowed to maximize the pane.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "allowPinning", {
        /**
         * Determines whether the end user is allowed to pin/unpin the pane. Defaults to true.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            this.i.n = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "allowDocking", {
        /**
         * Determines whether the end user is allowed to dock the pane. Defaults to true.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "acceptsInnerDock", {
        /**
         * Determines whether the end user can inner dock another pane in this one. Defaults to true.
        */
        get: function () {
            return this.i.i;
        },
        set: function (v) {
            this.i.i = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "allowFloating", {
        /**
         * Determines whether the end user is allowed to make the pane floating. Defaults to true.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "unpinnedSize", {
        /**
         * The absolute size of the pane in an unpinned state. Defaults to 200.
        */
        get: function () {
            return this.i.u;
        },
        set: function (v) {
            this.i.u = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "isPinned", {
        /**
         * Determines whether a content pane is pinned or not. Defaults to true.
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "isMaximized", {
        /**
         * Determines whether a content pane is maximized or not. Defaults to false.
        */
        get: function () {
            return this.i.r;
        },
        set: function (v) {
            this.i.r = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "unpinnedLocation", {
        /**
         * The desired unpinned location of the content pane.
         * If not set the Dock Manager automatically calculates it based on the location of the pane relatively to the document host.
         * If more than one document host is presented, the closest one in the pane hierarchy will be used for the calculation.
         * If there is no document host, the default location is left.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = ensureEnum(UnpinnedLocation_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "hidden", {
        /**
         * Determines whether a pane is hidden in the UI. Defaults to false.
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "disabled", {
        /**
         * Determines whether a pane is disabled. Defaults to false.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrContentPane.prototype, "documentOnly", {
        /**
         * Marks that a content pane can be docked only inside a document host.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrContentPane.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    return IgrContentPane;
}(IgrDockManagerPane));
export { IgrContentPane };
