import { __assign, __extends, __values } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { TextareaAutocapitalize_$type } from "./TextareaAutocapitalize";
import { TextareaInputMode_$type } from "./TextareaInputMode";
import { TextareaResize_$type } from "./TextareaResize";
import { TextareaWrap_$type } from "./TextareaWrap";
import { IgrComponentValueChangedEventArgs } from "./igr-component-value-changed-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { Textarea } from "./Textarea";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcTextareaComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureEnum, ensureBool, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * This element represents a multi-line plain-text editing control,
 * useful when you want to allow users to enter a sizeable amount of free-form text,
 * for example a comment on a review or feedback form.
*/
var IgrTextarea = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrTextarea, _super);
    function IgrTextarea(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._input = null;
        _this._input_wrapped = null;
        _this._change = null;
        _this._change_wrapped = null;
        _this._focus = null;
        _this._focus_wrapped = null;
        _this._blur = null;
        _this._blur_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcTextareaComponent);
        _this._implementation = _this.createImplementation();
        _this._portalManager = new PortalManager("templates", function () {
            if (_this.mounted) {
                _this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            _this._renderer = new ReactRenderer(_this._implementation.nativeElement, document, false, null, _this._portalManager);
        }
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        if (_this._initializeAdapters) {
            _this._initializeAdapters();
        }
        return _this;
    }
    IgrTextarea.prototype.createImplementation = function () {
        return new Textarea();
    };
    Object.defineProperty(IgrTextarea.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgrTextarea._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrTextarea.prototype.onImplementationCreated = function () {
    };
    IgrTextarea.prototype.componentDidMount = function () {
        var e_1, _a;
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrTextarea.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrTextarea.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-textarea", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrTextarea.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrTextarea.prototype, "autocomplete", {
        /**
         * Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,
         * as well as guidance to the browser as to the type of information expected in the field.
         * Refer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.
        */
        get: function () {
            return this.i.w;
        },
        set: function (v) {
            this.i.w = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "autocapitalize", {
        /**
         * Controls whether and how text input is automatically capitalized as it is entered/edited by the user.
         * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).
        */
        get: function () {
            return this.i.c;
        },
        set: function (v) {
            this.i.c = ensureEnum(TextareaAutocapitalize_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "inputMode", {
        /**
         * Hints at the type of data that might be entered by the user while editing the element or its contents.
         * This allows a browser to display an appropriate virtual keyboard.
         * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)
        */
        get: function () {
            return this.i.d;
        },
        set: function (v) {
            this.i.d = ensureEnum(TextareaInputMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "label", {
        /**
         * The label for the control.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "maxLength", {
        /**
         * The maximum number of characters (UTF-16 code units) that the user can enter.
         * If this value isn't specified, the user can enter an unlimited number of characters.
        */
        get: function () {
            return this.i.r;
        },
        set: function (v) {
            this.i.r = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "minLength", {
        /**
         * The minimum number of characters (UTF-16 code units) required that the user should enter.
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "outlined", {
        /**
         * Whether the control will have outlined appearance.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "placeholder", {
        /**
         * The placeholder attribute of the control.
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "readOnly", {
        /**
         * Makes the control a readonly field.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            this.i.n = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "resize", {
        /**
         * Controls whether the control can be resized.
         * When `auto` is set, the control will try to expand and fit its content.
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = ensureEnum(TextareaResize_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "rows", {
        /**
         * The number of visible text lines for the control. If it is specified, it must be a positive integer.
         * If it is not specified, the default value is 2.
        */
        get: function () {
            return this.i.t;
        },
        set: function (v) {
            this.i.t = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "value", {
        /**
         * The value of the component
        */
        get: function () {
            return this.i.aa;
        },
        set: function (v) {
            this.i.aa = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "spellcheck", {
        /**
         * Controls whether the element may be checked for spelling errors.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "wrap", {
        /**
         * Indicates how the control should wrap the value for form submission.
         * Refer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)
         * for explanation of the available values.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = ensureEnum(TextareaWrap_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "validateOnly", {
        /**
         * Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property
         * when it is defined.
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "disabled", {
        /**
         * The disabled state of the component
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "required", {
        /**
         * Makes the control a required field in a form context.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "name", {
        /**
         * The name attribute of the control.
        */
        get: function () {
            return this.i.y;
        },
        set: function (v) {
            this.i.y = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "invalid", {
        /**
         * Control the validity of the control.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrTextarea.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgrTextarea.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrTextarea.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrTextarea.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Textarea");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrTextarea.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    IgrTextarea.prototype.connectedCallback = function () {
        this.i.ae();
    };
    IgrTextarea.prototype.disconnectedCallback = function () {
        this.i.af();
    };
    /**
     * Selects all text within the control.
    
    */
    IgrTextarea.prototype.select = function () {
        this.i.aj();
    };
    IgrTextarea.prototype.setSelectionRange = function (start, end, direction) {
        this.i.an(start, end, (direction == null ? null : direction));
    };
    IgrTextarea.prototype.setRangeText = function (replacement, start, end, selectMode) {
        this.i.am(replacement, start, end, (selectMode == null ? null : selectMode));
    };
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    IgrTextarea.prototype.reportValidity = function () {
        this.i.ai();
    };
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    IgrTextarea.prototype.checkValidity = function () {
        this.i.ad();
    };
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    IgrTextarea.prototype.setCustomValidity = function (message) {
        this.i.ak(message);
    };
    Object.defineProperty(IgrTextarea.prototype, "input", {
        get: function () {
            return this._input;
        },
        set: function (ev) {
            var _this = this;
            if (this._input_wrapped !== null) {
                this.i.input = delegateRemove(this.i.input, this._input_wrapped);
                this._input_wrapped = null;
                this._input = null;
            }
            this._input = ev;
            this._input_wrapped = function (o, e) {
                var outerArgs = new IgrComponentValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeInput) {
                    _this.beforeInput(_this, outerArgs);
                }
                if (_this._input) {
                    _this._input(_this, outerArgs);
                }
            };
            this.i.input = delegateCombine(this.i.input, this._input_wrapped);
            if (this.i.inputChanged) {
                this.i.inputChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "change", {
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrComponentValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
            if (this.i.changeChanged) {
                this.i.changeChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "focus", {
        get: function () {
            return this._focus;
        },
        set: function (ev) {
            var _this = this;
            if (this._focus_wrapped !== null) {
                this.i.focus = delegateRemove(this.i.focus, this._focus_wrapped);
                this._focus_wrapped = null;
                this._focus = null;
            }
            this._focus = ev;
            this._focus_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeFocus) {
                    _this.beforeFocus(_this, outerArgs);
                }
                if (_this._focus) {
                    _this._focus(_this, outerArgs);
                }
            };
            this.i.focus = delegateCombine(this.i.focus, this._focus_wrapped);
            if (this.i.focusChanged) {
                this.i.focusChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTextarea.prototype, "blur", {
        get: function () {
            return this._blur;
        },
        set: function (ev) {
            var _this = this;
            if (this._blur_wrapped !== null) {
                this.i.blur = delegateRemove(this.i.blur, this._blur_wrapped);
                this._blur_wrapped = null;
                this._blur = null;
            }
            this._blur = ev;
            this._blur_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeBlur) {
                    _this.beforeBlur(_this, outerArgs);
                }
                if (_this._blur) {
                    _this._blur(_this, outerArgs);
                }
            };
            this.i.blur = delegateCombine(this.i.blur, this._blur_wrapped);
            if (this.i.blurChanged) {
                this.i.blurChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrTextarea;
}(React.Component));
export { IgrTextarea };
