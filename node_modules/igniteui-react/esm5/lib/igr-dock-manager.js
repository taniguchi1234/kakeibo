import { __assign, __extends, __values } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrDockManagerLayout } from "./igr-dock-manager-layout";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { IgrDockManagerPoint } from "./igr-dock-manager-point";
import { IgrContentPane } from "./igr-content-pane";
import { DockManagerShowHeaderIconOnHover_$type } from "./DockManagerShowHeaderIconOnHover";
import { IgrDockManagerResourceStrings } from "./igr-dock-manager-resource-strings";
import { DockManagerShowPaneHeaders_$type } from "./DockManagerShowPaneHeaders";
import { IgrLayoutChangeEventArgs } from "./igr-layout-change-event-args";
import { DockManager } from "./DockManager";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { defineCustomElements } from "igniteui-dockmanager/loader";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * Describes a Dock Manager component.
*/
var IgrDockManager = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrDockManager, _super);
    function IgrDockManager(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._layoutChange = null;
        _this._layoutChange_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineCustomElements();
        _this._implementation = _this.createImplementation();
        _this._portalManager = new PortalManager("templates", function () {
            if (_this.mounted) {
                _this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            _this._renderer = new ReactRenderer(_this._implementation.nativeElement, document, false, null, _this._portalManager);
        }
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        if (_this._initializeAdapters) {
            _this._initializeAdapters();
        }
        return _this;
    }
    IgrDockManager.prototype.createImplementation = function () {
        return new DockManager();
    };
    Object.defineProperty(IgrDockManager.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgrDockManager._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrDockManager.prototype.onImplementationCreated = function () {
    };
    IgrDockManager.prototype.componentDidMount = function () {
        var e_1, _a;
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrDockManager.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrDockManager.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-dockmanager", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrDockManager.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrDockManager.prototype, "layout", {
        /**
         * Gets/sets the layout configuration of the Dock Manager.
        */
        get: function () {
            var r = this.i.b;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrDockManagerLayout();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.b = null : this.i.b = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "draggedPane", {
        /**
         * Gets/sets the currently dragged pane.
        */
        get: function () {
            var r = this.i.c;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrDockManagerPane._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.c = null : this.i.c = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "dropPosition", {
        /**
         * Gets/sets the current drop position when performing custom drag/drop.
        */
        get: function () {
            var r = this.i.e;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrDockManagerPoint();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.e = null : this.i.e = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "activePane", {
        /**
         * Gets/sets the active pane of the Dock Manager.
        */
        get: function () {
            var r = this.i.a;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrContentPane._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.a = null : this.i.a = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "allowMaximize", {
        /**
         * Determines whether the end user is allowed to maximize panes. Defaults to true.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            this.i.n = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "containedInBoundaries", {
        /**
         * Determines whether the floating panes are kept inside the Dock Manager boundaries. Defaults to false.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "showHeaderIconOnHover", {
        /**
         * Determines which tab header icons should show when hovering over the tab with the mouse. Defaults to undefined.
        */
        get: function () {
            return this.i.g;
        },
        set: function (v) {
            this.i.g = ensureEnum(DockManagerShowHeaderIconOnHover_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "maximizedPane", {
        /**
         * Gets/sets the maximized pane.
        */
        get: function () {
            var r = this.i.d;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrDockManagerPane._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.d = null : this.i.d = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "resourceStrings", {
        /**
         * Gets/sets the resource strings.
        */
        get: function () {
            var r = this.i.f;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrDockManagerResourceStrings();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.f = null : this.i.f = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "allowFloatingPanesResize", {
        /**
         * Determines whether the end user is allowed to resize floating panes. Defaults to true.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "disableKeyboardNavigation", {
        /**
         * Disables the built-in keyboard shortcuts for pane navigation. Defaults to false.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "allowInnerDock", {
        /**
         * Determines whether the end user is allowed to inner dock panes. Defaults to true.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "showPaneHeaders", {
        /**
         * Determines whether pane headers are only shown on hover or always visible. Defaults to 'always'.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = ensureEnum(DockManagerShowPaneHeaders_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDockManager.prototype, "proximityDock", {
        /**
         * Determines whether the end user can dock the dragged pane by dragging it close to the target pane edges.
         * If enabled, docking indicators are not visible. Defaults to false.
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrDockManager.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.layout && this.layout.name && this.layout.name == name) {
            return this.layout;
        }
        if (this.draggedPane && this.draggedPane.name && this.draggedPane.name == name) {
            return this.draggedPane;
        }
        if (this.dropPosition && this.dropPosition.name && this.dropPosition.name == name) {
            return this.dropPosition;
        }
        if (this.activePane && this.activePane.name && this.activePane.name == name) {
            return this.activePane;
        }
        if (this.maximizedPane && this.maximizedPane.name && this.maximizedPane.name == name) {
            return this.maximizedPane;
        }
        if (this.resourceStrings && this.resourceStrings.name && this.resourceStrings.name == name) {
            return this.resourceStrings;
        }
        return null;
    };
    Object.defineProperty(IgrDockManager.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrDockManager.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrDockManager.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DockManager");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.draggedPane && this.draggedPane._styling) {
            this.draggedPane._styling(container, component, this);
        }
        if (this.activePane && this.activePane._styling) {
            this.activePane._styling(container, component, this);
        }
        if (this.maximizedPane && this.maximizedPane._styling) {
            this.maximizedPane._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrDockManager.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    /**
     * Focuses a pane from the layout.
    
    */
    IgrDockManager.prototype.focusPane = function (contentId) {
        this.i.t(contentId);
    };
    Object.defineProperty(IgrDockManager.prototype, "layoutChange", {
        get: function () {
            return this._layoutChange;
        },
        set: function (ev) {
            var _this = this;
            if (this._layoutChange_wrapped !== null) {
                this.i.layoutChange = delegateRemove(this.i.layoutChange, this._layoutChange_wrapped);
                this._layoutChange_wrapped = null;
                this._layoutChange = null;
            }
            this._layoutChange = ev;
            this._layoutChange_wrapped = function (o, e) {
                var outerArgs = new IgrLayoutChangeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeLayoutChange) {
                    _this.beforeLayoutChange(_this, outerArgs);
                }
                if (_this._layoutChange) {
                    _this._layoutChange(_this, outerArgs);
                }
            };
            this.i.layoutChange = delegateCombine(this.i.layoutChange, this._layoutChange_wrapped);
            if (this.i.layoutChangeChanged) {
                this.i.layoutChangeChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrDockManager;
}(React.Component));
export { IgrDockManager };
