import { __assign, __extends, __values } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { GroupingDirection_$type } from "./GroupingDirection";
import { IgrFilteringOptions } from "./igr-filtering-options";
import { IgrComboChangeEventArgs } from "./igr-combo-change-event-args";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { Combo } from "./Combo";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcComboComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
import { ReactTemplateAdapter } from "igniteui-react-core";
import { html } from "lit-html";
/**
 * The Combo component is similar to the Select component in that it provides a list of options from which the user can make a selection.
 * In contrast to the Select component, the Combo component displays all options in a virtualized list of items,
 * meaning the combo box can simultaneously show thousands of options, where one or more options can be selected.
 * Additionally, users can create custom item templates, allowing for robust data visualization.
 * The Combo component features case-sensitive filtering, grouping, complex data binding, dynamic addition of values and more.
*/
var IgrCombo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrCombo, _super);
    function IgrCombo(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._change = null;
        _this._change_wrapped = null;
        _this._focus = null;
        _this._focus_wrapped = null;
        _this._blur = null;
        _this._blur_wrapped = null;
        _this._opening = null;
        _this._opening_wrapped = null;
        _this._opened = null;
        _this._opened_wrapped = null;
        _this._closing = null;
        _this._closing_wrapped = null;
        _this._closed = null;
        _this._closed_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcComboComponent);
        _this._implementation = _this.createImplementation();
        _this._portalManager = new PortalManager("templates", function () {
            if (_this.mounted) {
                _this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            _this._renderer = new ReactRenderer(_this._implementation.nativeElement, document, false, null, _this._portalManager);
        }
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        if (_this._initializeAdapters) {
            _this._initializeAdapters();
        }
        return _this;
    }
    IgrCombo.prototype.createImplementation = function () {
        return new Combo();
    };
    Object.defineProperty(IgrCombo.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgrCombo._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrCombo.prototype.onImplementationCreated = function () {
    };
    IgrCombo.prototype.componentDidMount = function () {
        var e_1, _a;
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrCombo.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrCombo.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-combo", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrCombo.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrCombo.prototype, "data", {
        /**
         * The data source used to generate the list of options.
        */
        get: function () {
            return this.i.a;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.a = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "outlined", {
        /**
         * The outlined attribute of the control.
        */
        get: function () {
            return this.i.w;
        },
        set: function (v) {
            this.i.w = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "singleSelect", {
        /**
         * Enables single selection mode and moves item filtering to the main input.
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "autofocus", {
        /**
         * The autofocus attribute of the control.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "autofocusList", {
        /**
         * Focuses the list of options when the menu opens.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "label", {
        /**
         * The label attribute of the control.
        */
        get: function () {
            return this.i.ah;
        },
        set: function (v) {
            this.i.ah = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "placeholder", {
        /**
         * The placeholder attribute of the control.
        */
        get: function () {
            return this.i.aj;
        },
        set: function (v) {
            this.i.aj = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "placeholderSearch", {
        /**
         * The placeholder attribute of the search input.
        */
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "open", {
        /**
         * Sets the open state of the component.
        */
        get: function () {
            return this.i.v;
        },
        set: function (v) {
            this.i.v = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "valueKey", {
        /**
         * The key in the data source used when selecting items.
        */
        get: function () {
            return this.i.al;
        },
        set: function (v) {
            this.i.al = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "displayKey", {
        /**
         * The key in the data source used to display items in the list.
        */
        get: function () {
            return this.i.af;
        },
        set: function (v) {
            this.i.af = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "groupKey", {
        /**
         * The key in the data source used to group items in the list.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "groupSorting", {
        /**
         * Sorts the items in each group by ascending or descending order.
         * @type {"asc" | "desc" | "none"}
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = ensureEnum(GroupingDirection_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "filteringOptions", {
        get: function () {
            var r = this.i.e;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrFilteringOptions();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.e = null : this.i.e = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "caseSensitiveIcon", {
        /**
         * Enables the case sensitive search icon in the filtering input.
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "disableFiltering", {
        /**
         * Disables the filtering of the list of options.
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "value", {
        get: function () {
            return this.i.c;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.c = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "selection", {
        /**
         * Returns the current selection as an array of objects as provided in the `data` source.
        */
        get: function () {
            return this.i.b;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "disabled", {
        /**
         * The disabled state of the component
        */
        get: function () {
            return this.i.r;
        },
        set: function (v) {
            this.i.r = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "required", {
        /**
         * Makes the control a required field in a form context.
        */
        get: function () {
            return this.i.x;
        },
        set: function (v) {
            this.i.x = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "name", {
        /**
         * The name attribute of the control.
        */
        get: function () {
            return this.i.ai;
        },
        set: function (v) {
            this.i.ai = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "invalid", {
        /**
         * Control the validity of the control.
        */
        get: function () {
            return this.i.u;
        },
        set: function (v) {
            this.i.u = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "itemTemplate", {
        get: function () {
            return this._itemTemplate;
        },
        set: function (v) {
            this._itemTemplate = v;
            if (!this._itemTemplateAdapter) {
                this._itemTemplateAdapter = new ReactTemplateAdapter(this._renderer, this._portalManager, "ae", { html: html });
            }
            this._itemTemplateAdapter.setValue(this.i, this._itemTemplate);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "groupHeaderTemplate", {
        get: function () {
            return this._groupHeaderTemplate;
        },
        set: function (v) {
            this._groupHeaderTemplate = v;
            if (!this._groupHeaderTemplateAdapter) {
                this._groupHeaderTemplateAdapter = new ReactTemplateAdapter(this._renderer, this._portalManager, "ad", { html: html });
            }
            this._groupHeaderTemplateAdapter.setValue(this.i, this._groupHeaderTemplate);
        },
        enumerable: false,
        configurable: true
    });
    IgrCombo.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.filteringOptions && this.filteringOptions.name && this.filteringOptions.name == name) {
            return this.filteringOptions;
        }
        return null;
    };
    Object.defineProperty(IgrCombo.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrCombo.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrCombo.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("Combo");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrCombo.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    IgrCombo.prototype.connectedCallback = function () {
        this.i.as();
    };
    /**
     * Sets focus on the component.
    
    */
    IgrCombo.prototype.focusComponent = function (options) {
        this.i.av((options == null ? null : options.i));
    };
    /**
     * Removes focus from the component.
    
    */
    IgrCombo.prototype.blurComponent = function () {
        this.i.an();
    };
    IgrCombo.prototype.select = function (items) {
        this.i.az(items);
    };
    IgrCombo.prototype.deselect = function (items) {
        this.i.at(items);
    };
    /**
     * Shows the list of options.
    
    */
    IgrCombo.prototype.show = function () {
        var iv = this.i.y();
        return (iv);
    };
    /**
     * Hides the list of options.
    
    */
    IgrCombo.prototype.hide = function () {
        var iv = this.i.t();
        return (iv);
    };
    /**
     * Toggles the list of options.
    
    */
    IgrCombo.prototype.toggle = function () {
        var iv = this.i.aa();
        return (iv);
    };
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    IgrCombo.prototype.reportValidity = function () {
        this.i.ay();
    };
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    IgrCombo.prototype.checkValidity = function () {
        this.i.ap();
    };
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    IgrCombo.prototype.setCustomValidity = function (message) {
        this.i.a0(message);
    };
    Object.defineProperty(IgrCombo.prototype, "change", {
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrComboChangeEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
            if (this.i.changeChanged) {
                this.i.changeChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "focus", {
        get: function () {
            return this._focus;
        },
        set: function (ev) {
            var _this = this;
            if (this._focus_wrapped !== null) {
                this.i.focus = delegateRemove(this.i.focus, this._focus_wrapped);
                this._focus_wrapped = null;
                this._focus = null;
            }
            this._focus = ev;
            this._focus_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeFocus) {
                    _this.beforeFocus(_this, outerArgs);
                }
                if (_this._focus) {
                    _this._focus(_this, outerArgs);
                }
            };
            this.i.focus = delegateCombine(this.i.focus, this._focus_wrapped);
            if (this.i.focusChanged) {
                this.i.focusChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "blur", {
        get: function () {
            return this._blur;
        },
        set: function (ev) {
            var _this = this;
            if (this._blur_wrapped !== null) {
                this.i.blur = delegateRemove(this.i.blur, this._blur_wrapped);
                this._blur_wrapped = null;
                this._blur = null;
            }
            this._blur = ev;
            this._blur_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeBlur) {
                    _this.beforeBlur(_this, outerArgs);
                }
                if (_this._blur) {
                    _this._blur(_this, outerArgs);
                }
            };
            this.i.blur = delegateCombine(this.i.blur, this._blur_wrapped);
            if (this.i.blurChanged) {
                this.i.blurChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "opening", {
        get: function () {
            return this._opening;
        },
        set: function (ev) {
            var _this = this;
            if (this._opening_wrapped !== null) {
                this.i.opening = delegateRemove(this.i.opening, this._opening_wrapped);
                this._opening_wrapped = null;
                this._opening = null;
            }
            this._opening = ev;
            this._opening_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeOpening) {
                    _this.beforeOpening(_this, outerArgs);
                }
                if (_this._opening) {
                    _this._opening(_this, outerArgs);
                }
            };
            this.i.opening = delegateCombine(this.i.opening, this._opening_wrapped);
            if (this.i.openingChanged) {
                this.i.openingChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "opened", {
        get: function () {
            return this._opened;
        },
        set: function (ev) {
            var _this = this;
            if (this._opened_wrapped !== null) {
                this.i.opened = delegateRemove(this.i.opened, this._opened_wrapped);
                this._opened_wrapped = null;
                this._opened = null;
            }
            this._opened = ev;
            this._opened_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeOpened) {
                    _this.beforeOpened(_this, outerArgs);
                }
                if (_this._opened) {
                    _this._opened(_this, outerArgs);
                }
            };
            this.i.opened = delegateCombine(this.i.opened, this._opened_wrapped);
            if (this.i.openedChanged) {
                this.i.openedChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "closing", {
        get: function () {
            return this._closing;
        },
        set: function (ev) {
            var _this = this;
            if (this._closing_wrapped !== null) {
                this.i.closing = delegateRemove(this.i.closing, this._closing_wrapped);
                this._closing_wrapped = null;
                this._closing = null;
            }
            this._closing = ev;
            this._closing_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeClosing) {
                    _this.beforeClosing(_this, outerArgs);
                }
                if (_this._closing) {
                    _this._closing(_this, outerArgs);
                }
            };
            this.i.closing = delegateCombine(this.i.closing, this._closing_wrapped);
            if (this.i.closingChanged) {
                this.i.closingChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrCombo.prototype, "closed", {
        get: function () {
            return this._closed;
        },
        set: function (ev) {
            var _this = this;
            if (this._closed_wrapped !== null) {
                this.i.closed = delegateRemove(this.i.closed, this._closed_wrapped);
                this._closed_wrapped = null;
                this._closed = null;
            }
            this._closed = ev;
            this._closed_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeClosed) {
                    _this.beforeClosed(_this, outerArgs);
                }
                if (_this._closed) {
                    _this._closed(_this, outerArgs);
                }
            };
            this.i.closed = delegateCombine(this.i.closed, this._closed_wrapped);
            if (this.i.closedChanged) {
                this.i.closedChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrCombo;
}(React.Component));
export { IgrCombo };
