import { __assign, __extends } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrDatePartDeltas } from "./igr-date-part-deltas";
import { IgrComponentDateValueChangedEventArgs } from "./igr-component-date-value-changed-event-args";
import { IgrMaskInputBase } from "./igr-mask-input-base";
import { DateTimeInput } from "./DateTimeInput";
import { IgcDateTimeInputComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureBool } from "igniteui-react-core";
/**
 * A date time input is an input field that lets you set and edit the date and time in a chosen input element
 * using customizable display and input formats.
*/
var IgrDateTimeInput = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrDateTimeInput, _super);
    function IgrDateTimeInput(props) {
        var _this = _super.call(this, props) || this;
        _this._change = null;
        _this._change_wrapped = null;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcDateTimeInputComponent);
        return _this;
    }
    IgrDateTimeInput.prototype.createImplementation = function () {
        return new DateTimeInput();
    };
    Object.defineProperty(IgrDateTimeInput.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrDateTimeInput.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrDateTimeInput.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-date-time-input", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrDateTimeInput.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrDateTimeInput.prototype, "inputFormat", {
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeInput.prototype, "value", {
        /**
         * The value of the input.
        */
        get: function () {
            return this.i.ai;
        },
        set: function (v) {
            this.i.ai = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeInput.prototype, "min", {
        /**
         * The minimum value required for the input to remain valid.
        */
        get: function () {
            return this.i.ah;
        },
        set: function (v) {
            this.i.ah = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeInput.prototype, "max", {
        /**
         * The maximum value required for the input to remain valid.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeInput.prototype, "displayFormat", {
        /**
         * Format to display the value in when not editing.
         * Defaults to the input format if not set.
        */
        get: function () {
            return this.i.aj;
        },
        set: function (v) {
            this.i.aj = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeInput.prototype, "spinDelta", {
        /**
         * Delta values used to increment or decrement each date part on step actions.
         * All values default to `1`.
        */
        get: function () {
            var r = this.i.ae;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrDatePartDeltas();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.ae = null : this.i.ae = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeInput.prototype, "spinLoop", {
        /**
         * Sets whether to loop over the currently spun segment.
        */
        get: function () {
            return this.i.af;
        },
        set: function (v) {
            this.i.af = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDateTimeInput.prototype, "locale", {
        /**
         * The locale settings used to display the value.
        */
        get: function () {
            return this.i.al;
        },
        set: function (v) {
            this.i.al = v;
        },
        enumerable: false,
        configurable: true
    });
    IgrDateTimeInput.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.spinDelta && this.spinDelta.name && this.spinDelta.name == name) {
            return this.spinDelta;
        }
        return null;
    };
    IgrDateTimeInput.prototype.connectedCallback = function () {
        this.i.ao();
    };
    IgrDateTimeInput.prototype.stepUp = function (datePart, delta) {
        this.i.aq((datePart == null ? null : datePart), delta);
    };
    IgrDateTimeInput.prototype.stepDown = function (datePart, delta) {
        this.i.ap((datePart == null ? null : datePart), delta);
    };
    /**
     * Clears the input element of user input.
    
    */
    IgrDateTimeInput.prototype.clear = function () {
        this.i.an();
    };
    Object.defineProperty(IgrDateTimeInput.prototype, "change", {
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrComponentDateValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
            if (this.i.changeChanged) {
                this.i.changeChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrDateTimeInput;
}(IgrMaskInputBase));
export { IgrDateTimeInput };
