/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ButtonBase } from "./ButtonBase";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { IconButtonVariant_$type } from "./IconButtonVariant";
/**
 * @hidden
 */
var IconButton = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IconButton, _super);
    function IconButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(IconButton.prototype, "y", {
        get: function () {
            var ret_ = this.g.n("name");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("name", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconButton.prototype, "x", {
        get: function () {
            var ret_ = this.g.n("collection");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("collection", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconButton.prototype, "w", {
        get: function () {
            var ret_ = this.g.n("mirrored");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.g.w("mirrored", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconButton.prototype, "v", {
        get: function () {
            var ret_ = this.g.n("variant");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(IconButtonVariant_$type, EnumUtil.getEnumValue(IconButtonVariant_$type, this.g.f(IconButtonVariant_$type, ret_)));
            return EnumUtil.getEnumValue(IconButtonVariant_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(IconButtonVariant_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.g.w("variant", value_);
        },
        enumerable: false,
        configurable: true
    });
    IconButton.prototype.z = function (a, b, c) {
        this.nativeElement.registerIcon(this.g.i(a), this.g.i(b), this.g.i(c));
    };
    IconButton.prototype.aa = function (a, b, c) {
        this.nativeElement.registerIconFromText(this.g.i(a), this.g.i(b), this.g.i(c));
    };
    IconButton.$t = markType(IconButton, 'IconButton', ButtonBase.$);
    return IconButton;
}(ButtonBase));
export { IconButton };
