import { __assign, __extends, __values } from "tslib";
import * as React from 'react';
import { TreeItem } from "./TreeItem";
import { TypeRegistrar } from "igniteui-react-core";
import { ReactRenderer, PortalManager } from "igniteui-react-core";
import { IgcTreeItemComponent, defineComponents } from "igniteui-webcomponents";
import { NamePatcher, getModifiedProps, isValidProp, ensureBool, toSpinal, initializePropertiesFromCss } from "igniteui-react-core";
/**
 * The tree-item component represents a child item of the tree component or another tree item.
*/
var IgrTreeItem = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrTreeItem, _super);
    function IgrTreeItem(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcTreeItemComponent);
        _this._implementation = _this.createImplementation();
        _this._portalManager = new PortalManager("templates", function () {
            if (_this.mounted) {
                _this.setState({});
            }
        });
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            _this._renderer = new ReactRenderer(_this._implementation.nativeElement, document, false, null, _this._portalManager);
        }
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        if (_this._initializeAdapters) {
            _this._initializeAdapters();
        }
        return _this;
    }
    IgrTreeItem.prototype.createImplementation = function () {
        return new TreeItem();
    };
    Object.defineProperty(IgrTreeItem.prototype, "nativeElement", {
        get: function () {
            return this._implementation.nativeElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgrTreeItem._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrTreeItem.prototype.onImplementationCreated = function () {
    };
    IgrTreeItem.prototype.componentDidMount = function () {
        var e_1, _a;
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    IgrTreeItem.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
        return true;
    };
    IgrTreeItem.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-tree-item", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrTreeItem.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrTreeItem.prototype, "parent", {
        /**
         * The parent item of the current tree item (if any)
        */
        get: function () {
            var r = this.i.b;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrTreeItem({});
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.b = null : this.i.b = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "level", {
        /**
         * The depth of the item, relative to the root.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "label", {
        /**
         * The tree item label.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            this.i.n = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "expanded", {
        /**
         * The tree item expansion state.
        */
        get: function () {
            return this.i.g;
        },
        set: function (v) {
            this.i.g = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "active", {
        /**
         * Marks the item as the tree's active item.
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "disabled", {
        /**
         * Get/Set whether the tree item is disabled. Disabled items are ignored for user interactions.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "selected", {
        /**
         * The tree item selection state.
        */
        get: function () {
            return this.i.i;
        },
        set: function (v) {
            this.i.i = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "loading", {
        /**
         * To be used for load-on-demand scenarios in order to specify whether the item is loading data.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "value", {
        /**
         * The value entry that the tree item is visualizing. Required for searching through items.
         * @type any
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTreeItem.prototype, "path", {
        /**
         * The full path to the tree item, starting from the top-most ancestor.
        */
        get: function () {
            if (!this.i.a) {
                return undefined;
            }
            var ret = [];
            for (var i = 0; i < this.i.a.length; i++) {
                var impl = this.i.a[i];
                if (!impl.externalObject) {
                    if (impl instanceof IgrTreeItem) {
                        ret.push(impl);
                        continue;
                    }
                    var e = IgrTreeItem._createFromInternal(impl);
                    e._implementation = impl;
                    impl.externalObject = e;
                }
                ret.push(impl.externalObject);
            }
            return ret;
        },
        enumerable: false,
        configurable: true
    });
    IgrTreeItem.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.parent && this.parent.name && this.parent.name == name) {
            return this.parent;
        }
        return null;
    };
    Object.defineProperty(IgrTreeItem.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrTreeItem.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrTreeItem.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("TreeItem");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this.parent && this.parent._styling) {
            this.parent._styling(container, component, this);
        }
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgrTreeItem.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    IgrTreeItem.prototype.connectedCallback = function () {
        this.i.q();
    };
    IgrTreeItem.prototype.disconnectedCallback = function () {
        this.i.r();
    };
    /**
     * @private
     * Expands the tree item.
    
    */
    IgrTreeItem.prototype.expandWithEvent = function () {
        this.i.t();
    };
    /**
     * @private
     * Collapses the tree item.
    
    */
    IgrTreeItem.prototype.collapseWithEvent = function () {
        this.i.p();
    };
    /**
     * Toggles tree item expansion state.
    
    */
    IgrTreeItem.prototype.toggle = function () {
        this.i.v();
    };
    /**
     * Expands the tree item.
    
    */
    IgrTreeItem.prototype.expand = function () {
        this.i.s();
    };
    /**
     * Collapses the tree item.
    
    */
    IgrTreeItem.prototype.collapse = function () {
        this.i.o();
    };
    return IgrTreeItem;
}(React.Component));
export { IgrTreeItem };
