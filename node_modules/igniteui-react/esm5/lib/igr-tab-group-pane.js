import { __assign, __extends } from "tslib";
import * as React from 'react';
import { DockManagerPaneType_$type } from "./DockManagerPaneType";
import { IgrContentPaneCollection } from "./igr-content-pane-collection";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { TabGroupPane } from "./TabGroupPane";
import { defineCustomElements } from "igniteui-dockmanager/loader";
import { isValidProp, ensureEnum, ensureBool } from "igniteui-react-core";
import { ContentPaneCollection as ContentPaneCollection_internal } from "./ContentPaneCollection";
import { ContentPane } from "./ContentPane";
import { SyncableObservableCollection$1 } from "igniteui-react-core";
var IgrTabGroupPane = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrTabGroupPane, _super);
    function IgrTabGroupPane(props) {
        var _this = _super.call(this, props) || this;
        _this._panes = null;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineCustomElements();
        return _this;
    }
    IgrTabGroupPane.prototype.createImplementation = function () {
        return new TabGroupPane();
    };
    Object.defineProperty(IgrTabGroupPane.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrTabGroupPane.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrTabGroupPane.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("", __assign(__assign({}, nativeProps), { ref: this._getMainRef, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrTabGroupPane.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrTabGroupPane.prototype, "id", {
        /**
         * The id of the pane. If not set the Dock Manager generates it automatically.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTabGroupPane.prototype, "type", {
        /**
         * The type of the pane.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = ensureEnum(DockManagerPaneType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTabGroupPane.prototype, "panes", {
        /**
         * The child content panes of the tab group.
        */
        get: function () {
            if (this._panes === null) {
                var coll = new IgrContentPaneCollection();
                var innerColl = this.i.e;
                if (!innerColl) {
                    innerColl = new ContentPaneCollection_internal();
                }
                this._panes = coll._fromInner(innerColl);
            }
            return this._panes;
        },
        set: function (v) {
            if (this._panes !== null) {
                this._panes._setSyncTarget(null);
                this._panes = null;
            }
            var coll = new IgrContentPaneCollection();
            this._panes = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(ContentPane.$type);
            var innerColl = this.i.e;
            if (!innerColl) {
                innerColl = new ContentPaneCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._panes._setSyncTarget(syncColl);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTabGroupPane.prototype, "size", {
        /**
         * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTabGroupPane.prototype, "selectedIndex", {
        /**
         * The index of the selected tab.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTabGroupPane.prototype, "allowEmpty", {
        /**
         * Determines whether the pane should present in the UI when empty.
        */
        get: function () {
            return this.i.i;
        },
        set: function (v) {
            this.i.i = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrTabGroupPane.prototype, "isMaximized", {
        /**
         * Determines whether a tab group is maximized or not. Defaults to false.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrTabGroupPane.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.panes != null && this.panes.findByName && this.panes.findByName(name)) {
            return this.panes.findByName(name);
        }
        return null;
    };
    IgrTabGroupPane.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    return IgrTabGroupPane;
}(IgrDockManagerPane));
export { IgrTabGroupPane };
