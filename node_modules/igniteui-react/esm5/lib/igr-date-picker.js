import { __assign, __extends } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { DatePickerMode_$type } from "./DatePickerMode";
import { DatePickerHeaderOrientation_$type } from "./DatePickerHeaderOrientation";
import { DatePickerOrientation_$type } from "./DatePickerOrientation";
import { IgrCalendarResourceStrings } from "./igr-calendar-resource-strings";
import { WeekDays_$type } from "./WeekDays";
import { IgrVoidEventArgs } from "./igr-void-event-args";
import { IgrComponentDateValueChangedEventArgs } from "./igr-component-date-value-changed-event-args";
import { IgrBaseComboBoxLike } from "./igr-base-combo-box-like";
import { DatePicker } from "./DatePicker";
import { IgcDatePickerComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureEnum, ensureBool } from "igniteui-react-core";
/**
 * igc-date-picker is a feature rich component used for entering a date through manual text input or
 * choosing date values from a calendar dialog that pops up.
*/
var IgrDatePicker = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrDatePicker, _super);
    function IgrDatePicker(props) {
        var _this = _super.call(this, props) || this;
        _this._opening = null;
        _this._opening_wrapped = null;
        _this._opened = null;
        _this._opened_wrapped = null;
        _this._closing = null;
        _this._closing_wrapped = null;
        _this._closed = null;
        _this._closed_wrapped = null;
        _this._change = null;
        _this._change_wrapped = null;
        _this._input = null;
        _this._input_wrapped = null;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcDatePickerComponent);
        return _this;
    }
    IgrDatePicker.prototype.createImplementation = function () {
        return new DatePicker();
    };
    Object.defineProperty(IgrDatePicker.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrDatePicker.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrDatePicker.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-date-picker", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrDatePicker.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrDatePicker.prototype, "label", {
        /**
         * The label of the datepicker.
        */
        get: function () {
            return this.i.ap;
        },
        set: function (v) {
            this.i.ap = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "mode", {
        /**
         * Determines whether the calendar is opened in a dropdown or a modal dialog
        */
        get: function () {
            return this.i.s;
        },
        set: function (v) {
            this.i.s = ensureEnum(DatePickerMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "nonEditable", {
        /**
         * Whether to allow typing in the input.
        */
        get: function () {
            return this.i.ad;
        },
        set: function (v) {
            this.i.ad = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "readOnly", {
        /**
         * Makes the control a readonly field.
        */
        get: function () {
            return this.i.af;
        },
        set: function (v) {
            this.i.af = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "value", {
        /**
         * The value of the picker
        */
        get: function () {
            return this.i.al;
        },
        set: function (v) {
            this.i.al = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "activeDate", {
        /**
         * Gets/Sets the date which is shown in the calendar picker and is highlighted.
         * By default it is the current date.
        */
        get: function () {
            return this.i.ai;
        },
        set: function (v) {
            this.i.ai = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "min", {
        /**
         * The minimum value required for the date picker to remain valid.
        */
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "max", {
        /**
         * The maximum value required for the date picker to remain valid.
        */
        get: function () {
            return this.i.aj;
        },
        set: function (v) {
            this.i.aj = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "headerOrientation", {
        /**
         * The orientation of the calendar header.
        */
        get: function () {
            return this.i.r;
        },
        set: function (v) {
            this.i.r = ensureEnum(DatePickerHeaderOrientation_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "orientation", {
        /**
         * The orientation of the multiple months displayed in the calendar's days view.
        */
        get: function () {
            return this.i.t;
        },
        set: function (v) {
            this.i.t = ensureEnum(DatePickerOrientation_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "hideHeader", {
        /**
         * Determines whether the calendar hides its header.
        */
        get: function () {
            return this.i.aa;
        },
        set: function (v) {
            this.i.aa = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "hideOutsideDays", {
        /**
         * Controls the visibility of the dates that do not belong to the current month.
        */
        get: function () {
            return this.i.ab;
        },
        set: function (v) {
            this.i.ab = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "disabledDates", {
        /**
         * Gets/sets disabled dates.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.m = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "specialDates", {
        /**
         * Gets/sets special dates.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.n = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "outlined", {
        /**
         * Whether the control will have outlined appearance.
        */
        get: function () {
            return this.i.ae;
        },
        set: function (v) {
            this.i.ae = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "placeholder", {
        /**
         * The placeholder attribute of the control.
        */
        get: function () {
            return this.i.as;
        },
        set: function (v) {
            this.i.as = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "visibleMonths", {
        /**
         * The number of months displayed in the calendar.
        */
        get: function () {
            return this.i.am;
        },
        set: function (v) {
            this.i.am = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "showWeekNumbers", {
        /**
         * Whether to show the number of the week in the calendar.
        */
        get: function () {
            return this.i.ah;
        },
        set: function (v) {
            this.i.ah = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "displayFormat", {
        /**
         * Format to display the value in when not editing.
         * Defaults to the input format if not set.
        */
        get: function () {
            return this.i.an;
        },
        set: function (v) {
            this.i.an = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "inputFormat", {
        /**
         * The date format to apply on the input.
         * Defaults to the current locale Intl.DateTimeFormat
        */
        get: function () {
            return this.i.ao;
        },
        set: function (v) {
            this.i.ao = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "locale", {
        /**
         * The locale settings used to display the value.
        */
        get: function () {
            return this.i.aq;
        },
        set: function (v) {
            this.i.aq = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "prompt", {
        /**
         * The prompt symbol to use for unfilled parts of the mask.
        */
        get: function () {
            return this.i.at;
        },
        set: function (v) {
            this.i.at = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "resourceStrings", {
        /**
         * The resource strings of the calendar.
        */
        get: function () {
            var r = this.i.o;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgrCalendarResourceStrings();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.o = null : this.i.o = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "weekStart", {
        /**
         * Sets the start day of the week for the calendar.
        */
        get: function () {
            return this.i.y;
        },
        set: function (v) {
            this.i.y = ensureEnum(WeekDays_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "disabled", {
        /**
         * The disabled state of the component
        */
        get: function () {
            return this.i.z;
        },
        set: function (v) {
            this.i.z = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "required", {
        /**
         * Makes the control a required field in a form context.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "name", {
        /**
         * The name attribute of the control.
        */
        get: function () {
            return this.i.ar;
        },
        set: function (v) {
            this.i.ar = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "invalid", {
        /**
         * Control the validity of the control.
        */
        get: function () {
            return this.i.ac;
        },
        set: function (v) {
            this.i.ac = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrDatePicker.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.resourceStrings && this.resourceStrings.name && this.resourceStrings.name == name) {
            return this.resourceStrings;
        }
        return null;
    };
    IgrDatePicker.prototype.connectedCallback = function () {
        this.i.az();
    };
    /**
     * Clears the input part of the component of any user input
    
    */
    IgrDatePicker.prototype.clear = function () {
        this.i.aw();
    };
    IgrDatePicker.prototype.stepUp = function (datePart, delta) {
        this.i.a9((datePart == null ? null : datePart), delta);
    };
    IgrDatePicker.prototype.stepDown = function (datePart, delta) {
        this.i.a8((datePart == null ? null : datePart), delta);
    };
    /**
     * Selects the text in the input of the component
    
    */
    IgrDatePicker.prototype.select = function () {
        this.i.a4();
    };
    IgrDatePicker.prototype.setSelectionRange = function (start, end, direction) {
        this.i.a7(start, end, (direction == null ? null : direction));
    };
    IgrDatePicker.prototype.setRangeText = function (replacement, start, end, mode) {
        this.i.a6(replacement, start, end, (mode == null ? null : mode));
    };
    /**
     * Checks for validity of the control and shows the browser message if it invalid.
    
    */
    IgrDatePicker.prototype.reportValidity = function () {
        this.i.a3();
    };
    /**
     * Checks for validity of the control and emits the invalid event if it invalid.
    
    */
    IgrDatePicker.prototype.checkValidity = function () {
        this.i.av();
    };
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
    
    */
    IgrDatePicker.prototype.setCustomValidity = function (message) {
        this.i.a5(message);
    };
    Object.defineProperty(IgrDatePicker.prototype, "opening", {
        get: function () {
            return this._opening;
        },
        set: function (ev) {
            var _this = this;
            if (this._opening_wrapped !== null) {
                this.i.opening = delegateRemove(this.i.opening, this._opening_wrapped);
                this._opening_wrapped = null;
                this._opening = null;
            }
            this._opening = ev;
            this._opening_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeOpening) {
                    _this.beforeOpening(_this, outerArgs);
                }
                if (_this._opening) {
                    _this._opening(_this, outerArgs);
                }
            };
            this.i.opening = delegateCombine(this.i.opening, this._opening_wrapped);
            if (this.i.openingChanged) {
                this.i.openingChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "opened", {
        get: function () {
            return this._opened;
        },
        set: function (ev) {
            var _this = this;
            if (this._opened_wrapped !== null) {
                this.i.opened = delegateRemove(this.i.opened, this._opened_wrapped);
                this._opened_wrapped = null;
                this._opened = null;
            }
            this._opened = ev;
            this._opened_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeOpened) {
                    _this.beforeOpened(_this, outerArgs);
                }
                if (_this._opened) {
                    _this._opened(_this, outerArgs);
                }
            };
            this.i.opened = delegateCombine(this.i.opened, this._opened_wrapped);
            if (this.i.openedChanged) {
                this.i.openedChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "closing", {
        get: function () {
            return this._closing;
        },
        set: function (ev) {
            var _this = this;
            if (this._closing_wrapped !== null) {
                this.i.closing = delegateRemove(this.i.closing, this._closing_wrapped);
                this._closing_wrapped = null;
                this._closing = null;
            }
            this._closing = ev;
            this._closing_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeClosing) {
                    _this.beforeClosing(_this, outerArgs);
                }
                if (_this._closing) {
                    _this._closing(_this, outerArgs);
                }
            };
            this.i.closing = delegateCombine(this.i.closing, this._closing_wrapped);
            if (this.i.closingChanged) {
                this.i.closingChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "closed", {
        get: function () {
            return this._closed;
        },
        set: function (ev) {
            var _this = this;
            if (this._closed_wrapped !== null) {
                this.i.closed = delegateRemove(this.i.closed, this._closed_wrapped);
                this._closed_wrapped = null;
                this._closed = null;
            }
            this._closed = ev;
            this._closed_wrapped = function (o, e) {
                var outerArgs = new IgrVoidEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeClosed) {
                    _this.beforeClosed(_this, outerArgs);
                }
                if (_this._closed) {
                    _this._closed(_this, outerArgs);
                }
            };
            this.i.closed = delegateCombine(this.i.closed, this._closed_wrapped);
            if (this.i.closedChanged) {
                this.i.closedChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "change", {
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrComponentDateValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
            if (this.i.changeChanged) {
                this.i.changeChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDatePicker.prototype, "input", {
        get: function () {
            return this._input;
        },
        set: function (ev) {
            var _this = this;
            if (this._input_wrapped !== null) {
                this.i.input = delegateRemove(this.i.input, this._input_wrapped);
                this._input_wrapped = null;
                this._input = null;
            }
            this._input = ev;
            this._input_wrapped = function (o, e) {
                var outerArgs = new IgrComponentDateValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeInput) {
                    _this.beforeInput(_this, outerArgs);
                }
                if (_this._input) {
                    _this._input(_this, outerArgs);
                }
            };
            this.i.input = delegateCombine(this.i.input, this._input_wrapped);
            if (this.i.inputChanged) {
                this.i.inputChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrDatePicker;
}(IgrBaseComboBoxLike));
export { IgrDatePicker };
