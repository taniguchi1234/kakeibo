import { __assign, __extends } from "tslib";
import * as React from 'react';
import { DockManagerPaneType_$type } from "./DockManagerPaneType";
import { IgrSplitPane } from "./igr-split-pane";
import { IgrDockManagerPane } from "./igr-dock-manager-pane";
import { DocumentHost } from "./DocumentHost";
import { defineCustomElements } from "igniteui-dockmanager/loader";
import { isValidProp, ensureEnum } from "igniteui-react-core";
var IgrDocumentHost = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrDocumentHost, _super);
    function IgrDocumentHost(props) {
        var _this = _super.call(this, props) || this;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineCustomElements();
        return _this;
    }
    IgrDocumentHost.prototype.createImplementation = function () {
        return new DocumentHost();
    };
    Object.defineProperty(IgrDocumentHost.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrDocumentHost.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrDocumentHost.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("", __assign(__assign({}, nativeProps), { ref: this._getMainRef, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrDocumentHost.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrDocumentHost.prototype, "id", {
        /**
         * The id of the pane. If not set the Dock Manager generates it automatically.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDocumentHost.prototype, "type", {
        /**
         * The type of the pane.
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = ensureEnum(DockManagerPaneType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDocumentHost.prototype, "rootPane", {
        /**
         * The root split pane of the document host.
        */
        get: function () {
            var r = this.i.f;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrSplitPane._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.f = null : this.i.f = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDocumentHost.prototype, "size", {
        /**
         * The size of the pane relative to its sibling panes' sizes. Defaults to 100.
        */
        get: function () {
            return this.i.i;
        },
        set: function (v) {
            this.i.i = +v;
        },
        enumerable: false,
        configurable: true
    });
    IgrDocumentHost.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.rootPane && this.rootPane.name && this.rootPane.name == name) {
            return this.rootPane;
        }
        return null;
    };
    IgrDocumentHost.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.rootPane && this.rootPane._styling) {
            this.rootPane._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgrDocumentHost.prototype.setNativeElement = function (element) {
        this.i.setNativeElement(element);
    };
    return IgrDocumentHost;
}(IgrDockManagerPane));
export { IgrDocumentHost };
