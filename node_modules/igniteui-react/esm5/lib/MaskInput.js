/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { MaskInputBase } from "./MaskInputBase";
import { MaskInputValueMode_$type } from "./MaskInputValueMode";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { ComponentDataValueChangedEventArgs } from "./ComponentDataValueChangedEventArgs";
/**
 * @hidden
 */
var MaskInput = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(MaskInput, _super);
    function MaskInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.change = null;
        return _this;
    }
    Object.defineProperty(MaskInput.prototype, "ae", {
        get: function () {
            var ret_ = this.e.n("valueMode");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(MaskInputValueMode_$type, EnumUtil.getEnumValue(MaskInputValueMode_$type, this.e.f(MaskInputValueMode_$type, ret_)));
            return EnumUtil.getEnumValue(MaskInputValueMode_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(MaskInputValueMode_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("valueMode", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MaskInput.prototype, "ag", {
        get: function () {
            var ret_ = this.e.n("value");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("value", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MaskInput.prototype, "af", {
        get: function () {
            var ret_ = this.e.n("mask");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("mask", value_);
        },
        enumerable: false,
        configurable: true
    });
    MaskInput.prototype.ai = function () {
        this.nativeElement.connectedCallback();
    };
    MaskInput.prototype.changeChanged = function () {
        var _this = this;
        if (this.change != null) {
            this.e.s("change", function (a) { return _this.change(_this, ComponentDataValueChangedEventArgs.a(a)); });
        }
        else {
            this.e.v("change");
        }
    };
    MaskInput.$t = markType(MaskInput, 'MaskInput', MaskInputBase.$);
    return MaskInput;
}(MaskInputBase));
export { MaskInput };
