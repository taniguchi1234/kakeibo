/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BaseElement } from "./BaseElement";
import { WCNativeHelper } from "./WCNativeHelper";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { CheckboxBaseLabelPosition_$type } from "./CheckboxBaseLabelPosition";
import { CheckboxChangeEventArgs } from "./CheckboxChangeEventArgs";
import { VoidEventArgs } from "./VoidEventArgs";
/**
 * @hidden
 */
var CheckboxBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CheckboxBase, _super);
    function CheckboxBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.e = new WCNativeHelper();
        _this.k = null;
        _this.change = null;
        _this.focus = null;
        _this.blur = null;
        return _this;
    }
    Object.defineProperty(CheckboxBase.prototype, "f", {
        get: function () {
            return this.e;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CheckboxBase.prototype, "nativeElement", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e.o = this.k;
        },
        enumerable: false,
        configurable: true
    });
    CheckboxBase.prototype.setNativeElement = function (a) {
        this.nativeElement = a;
    };
    Object.defineProperty(CheckboxBase.prototype, "n", {
        get: function () {
            var ret_ = this.f.n("value");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.f.w("value", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CheckboxBase.prototype, "g", {
        get: function () {
            var ret_ = this.f.n("checked");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.f.w("checked", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CheckboxBase.prototype, "a", {
        get: function () {
            var ret_ = this.f.n("labelPosition");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(CheckboxBaseLabelPosition_$type, EnumUtil.getEnumValue(CheckboxBaseLabelPosition_$type, this.f.f(CheckboxBaseLabelPosition_$type, ret_)));
            return EnumUtil.getEnumValue(CheckboxBaseLabelPosition_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(CheckboxBaseLabelPosition_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.f.w("labelPosition", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CheckboxBase.prototype, "h", {
        get: function () {
            var ret_ = this.f.n("disabled");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.f.w("disabled", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CheckboxBase.prototype, "j", {
        get: function () {
            var ret_ = this.f.n("required");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.f.w("required", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CheckboxBase.prototype, "m", {
        get: function () {
            var ret_ = this.f.n("name");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.f.w("name", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CheckboxBase.prototype, "i", {
        get: function () {
            var ret_ = this.f.n("invalid");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.f.w("invalid", value_);
        },
        enumerable: false,
        configurable: true
    });
    CheckboxBase.prototype.changeChanged = function () {
        var _this = this;
        if (this.change != null) {
            this.f.s("change", function (a) { return _this.change(_this, CheckboxChangeEventArgs.a(a)); });
        }
        else {
            this.f.v("change");
        }
    };
    CheckboxBase.prototype.focusChanged = function () {
        var _this = this;
        if (this.focus != null) {
            this.f.s("focus", function (a) { return _this.focus(_this, VoidEventArgs.b(a)); }, false);
        }
        else {
            this.f.v("focus");
        }
    };
    CheckboxBase.prototype.blurChanged = function () {
        var _this = this;
        if (this.blur != null) {
            this.f.s("blur", function (a) { return _this.blur(_this, VoidEventArgs.b(a)); }, false);
        }
        else {
            this.f.v("blur");
        }
    };
    CheckboxBase.prototype.s = function () {
        this.nativeElement.click();
    };
    CheckboxBase.prototype.u = function (a) {
        this.nativeElement.focus(this.f.i(a));
    };
    CheckboxBase.prototype.p = function () {
        this.nativeElement.blur();
    };
    CheckboxBase.prototype.v = function () {
        this.nativeElement.reportValidity();
    };
    CheckboxBase.prototype.r = function () {
        this.nativeElement.checkValidity();
    };
    CheckboxBase.prototype.w = function (a) {
        this.nativeElement.setCustomValidity(this.f.i(a));
    };
    CheckboxBase.$t = markType(CheckboxBase, 'CheckboxBase', BaseElement.$);
    return CheckboxBase;
}(BaseElement));
export { CheckboxBase };
