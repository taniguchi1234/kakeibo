import { __assign, __extends } from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { MaskInputValueMode_$type } from "./MaskInputValueMode";
import { IgrComponentDataValueChangedEventArgs } from "./igr-component-data-value-changed-event-args";
import { IgrMaskInputBase } from "./igr-mask-input-base";
import { MaskInput } from "./MaskInput";
import { IgcMaskInputComponent, defineComponents } from "igniteui-webcomponents";
import { isValidProp, ensureEnum } from "igniteui-react-core";
/**
 * A masked input is an input field where a developer can control user input and format the visible value,
 * based on configurable rules
*/
var IgrMaskInput = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrMaskInput, _super);
    function IgrMaskInput(props) {
        var _this = _super.call(this, props) || this;
        _this._change = null;
        _this._change_wrapped = null;
        _this._getMainRef = _this._getMainRef.bind(_this);
        defineComponents(IgcMaskInputComponent);
        return _this;
    }
    IgrMaskInput.prototype.createImplementation = function () {
        return new MaskInput();
    };
    Object.defineProperty(IgrMaskInput.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrMaskInput.prototype.componentDidMount = function () {
        this.i.nativeElement = this._elRef;
        this.mounted = true;
        _super.prototype.componentDidMount.call(this);
    };
    IgrMaskInput.prototype.render = function () {
        var _this = this;
        var nativePropsName = Object.keys(this.props).filter(function (prop) { return !isValidProp(_this, prop) && prop !== "originalRef"; });
        var nativeProps = {};
        nativePropsName.forEach(function (propName) {
            nativeProps[propName] = _this.props[propName];
        });
        var propChildren = this.props.children;
        var children = [];
        React.Children.forEach(propChildren, function (ch) {
            children.push(React.cloneElement(ch));
        });
        this._portalManager.onRender(children);
        var style = {};
        if (this.props.style) {
            style = this.props.style;
        }
        var div = React.createElement("igc-mask-input", __assign(__assign({}, nativeProps), { ref: this._getMainRef, id: this.props.id, class: this.props.className, style: style, children: children }));
        return div;
    };
    IgrMaskInput.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    Object.defineProperty(IgrMaskInput.prototype, "valueMode", {
        /**
         * Dictates the behavior when retrieving the value of the control:
         * - `raw` will return the clean user input.
         * - `withFormatting` will return the value with all literals and prompts.
        */
        get: function () {
            return this.i.ae;
        },
        set: function (v) {
            this.i.ae = ensureEnum(MaskInputValueMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMaskInput.prototype, "value", {
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            this.i.ag = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrMaskInput.prototype, "mask", {
        /**
         * The mask pattern to apply on the input.
        */
        get: function () {
            return this.i.af;
        },
        set: function (v) {
            this.i.af = v;
        },
        enumerable: false,
        configurable: true
    });
    IgrMaskInput.prototype.connectedCallback = function () {
        this.i.ai();
    };
    Object.defineProperty(IgrMaskInput.prototype, "change", {
        get: function () {
            return this._change;
        },
        set: function (ev) {
            var _this = this;
            if (this._change_wrapped !== null) {
                this.i.change = delegateRemove(this.i.change, this._change_wrapped);
                this._change_wrapped = null;
                this._change = null;
            }
            this._change = ev;
            this._change_wrapped = function (o, e) {
                var outerArgs = new IgrComponentDataValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeChange) {
                    _this.beforeChange(_this, outerArgs);
                }
                if (_this._change) {
                    _this._change(_this, outerArgs);
                }
            };
            this.i.change = delegateCombine(this.i.change, this._change_wrapped);
            if (this.i.changeChanged) {
                this.i.changeChanged();
            }
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrMaskInput;
}(IgrMaskInputBase));
export { IgrMaskInput };
