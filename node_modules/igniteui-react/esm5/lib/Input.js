/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { InputBase } from "./InputBase";
import { enumGetBox, EnumUtil, markType } from "igniteui-react-core";
import { WCNativeHelper } from "./WCNativeHelper";
import { InputType_$type } from "./InputType";
import { ComponentDataValueChangedEventArgs } from "./ComponentDataValueChangedEventArgs";
/**
 * @hidden
 */
var Input = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(Input, _super);
    function Input() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.change = null;
        return _this;
    }
    Input.prototype.changeChanged = function () {
        var _this = this;
        if (this.change != null) {
            this.e.s("change", function (a) { return _this.change(_this, ComponentDataValueChangedEventArgs.a(a)); });
        }
        else {
            this.e.v("change");
        }
    };
    Object.defineProperty(Input.prototype, "am", {
        get: function () {
            var ret_ = this.e.n("value");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("value", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "ab", {
        get: function () {
            var ret_ = this.e.n("type");
            if ((ret_ === undefined && this.___rawMode)) {
                return undefined;
            }
            ret_ = enumGetBox(InputType_$type, EnumUtil.getEnumValue(InputType_$type, this.e.f(InputType_$type, ret_)));
            return EnumUtil.getEnumValue(InputType_$type, ret_);
        },
        set: function (a) {
            var value_ = enumGetBox(InputType_$type, a);
            value_ = WCNativeHelper.camel(value_.toString());
            this.e.w("type", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "ai", {
        get: function () {
            var ret_ = this.e.n("inputMode");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("inputMode", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "al", {
        get: function () {
            var ret_ = this.e.n("pattern");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("pattern", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "af", {
        get: function () {
            var ret_ = this.e.n("minLength");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("minLength", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "ae", {
        get: function () {
            var ret_ = this.e.n("maxLength");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("maxLength", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "ak", {
        get: function () {
            var ret_ = this.e.n("min");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("min", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "aj", {
        get: function () {
            var ret_ = this.e.n("max");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("max", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "ag", {
        get: function () {
            var ret_ = this.e.n("step");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("step", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "ac", {
        get: function () {
            var ret_ = this.e.n("autofocus");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("autofocus", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "ah", {
        get: function () {
            var ret_ = this.e.n("autocomplete");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("autocomplete", value_);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "ad", {
        get: function () {
            var ret_ = this.e.n("validateOnly");
            return ret_;
        },
        set: function (a) {
            var value_ = a;
            this.e.w("validateOnly", value_);
        },
        enumerable: false,
        configurable: true
    });
    Input.prototype.ao = function () {
        this.nativeElement.select();
    };
    Input.prototype.aq = function (a) {
        if (a === void 0) {
            a = -1;
        }
        this.nativeElement.stepUp(this.e.i(a));
    };
    Input.prototype.ap = function (a) {
        if (a === void 0) {
            a = -1;
        }
        this.nativeElement.stepDown(this.e.i(a));
    };
    Input.$t = markType(Input, 'Input', InputBase.$);
    return Input;
}(InputBase));
export { Input };
